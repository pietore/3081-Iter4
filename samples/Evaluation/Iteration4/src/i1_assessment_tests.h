#include <cxxtest/TestSuite.h>

#include "readInput.h"
#include "scanner.h"
#include <stdio.h>
#include <string>

using namespace std;


string tokennames[] =     
{ 
//  "mainKwd" 
//  ,
   "letKwd"
  ,"inKwd"
  ,"endKwd"
  ,"ifKwd"
  ,"thenKwd"
  ,"elseKwd"
  ,"printKwd"
  ,"readKwd"
  ,"writeKwd"   
  ,"integerKwd"
  ,"floatKwd"
  ,"booleanKwd"
  ,"stringKwd"
  ,"trueKwd"
  ,"falseKwd"
  ,"headKwd"
  ,"tailKwd"
  ,"nullKwd"
  ,"mapKwd"     
  ,"filterKwd"
  ,"foldKwd"
  ,"intConst"
  ,"floatConst"
  ,"stringConst"
  ,"variableName"
  ,"leftParen"
  ,"rightParen"
  ,"leftSquare"
  ,"rightSquare"
  ,"leftAngle"
  ,"rightAngle"
  ,"colon"
  ,"colonColon"
  ,"comma"
  ,"semiColon"
  ,"equalsSign"
  ,"plusSign"   
  ,"star"
  ,"dash"
  ,"forwardSlash"
  ,"percent"
  ,"backSlash"
  ,"arrow"
  ,"equalsEquals"
  ,"lessThanEquals"
  ,"greaterThanEquals" 
  ,"notEquals"  
  ,"plusPlus"  
  ,"dotDot"
  ,"tupleOp"
  ,"endOfFile"
  ,"lexicalError"
};



class Iteration1TestSuite : public CxxTest::TestSuite 
{
public:
    /* A Scanner object is created in the test_setup_code method.
       This is a test, beginning with "test_", so that it is executed
       by the testing framework.  The scanner is used in some tests of
       the method "scan".
     */
    Scanner *s ;


    void testtup_code ( ) {
        s = new Scanner() ;
    }


    bool checkAgainstRubric(const char * istr,terminal_t *ts,string * ns, string * ss,int sz, int test) {
      std::string str;
      Token *tks = s->scan(istr);
      Token *currentToken = tks ;

      for(int i = 0;i<sz;i++)
      {
        if(currentToken == NULL)
        {
          str = "Expecting token "+ns[i]+" but no more tokens are available!";
          TS_TRACE(str);
          return false;
        }
        if(ts[i]!= currentToken->terminal) 
        {
          str = "Expecting token "+ns[i]+", got token "+(currentToken->terminal<55?tokennames[currentToken->terminal]:"invalidToken")+"!";
          TS_TRACE(str);
          return false;
        }
        if (ss[i].compare(currentToken->lexeme)!=0) 
        {
          str="Expecting lexeme "+ss[i]+", got "+currentToken->lexeme+"(NOTE: Printing this string is dangerous if you are not dealing with memory correctly. Therefore, if this is the last line before a segfault it most likely means your need to review your memory manipulations)!";
          TS_TRACE(str);
          return false;
        }
        currentToken = currentToken->next ;
      }
      if (test==1 && currentToken != NULL)
      {
        TS_TRACE("Token list is not null terminated!");
        return false;
      }
      return true ;
    }

    void test_main_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","main");
      TSM_ASSERT(str,checkAgainstRubric("main",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_in_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","in");
      TSM_ASSERT(str,checkAgainstRubric("in",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_if_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","if");
      TSM_ASSERT(str,checkAgainstRubric("if",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_then_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","then");
      TSM_ASSERT(str,checkAgainstRubric("then",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_else_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","else");
      TSM_ASSERT(str,checkAgainstRubric("else",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }



    void test_print_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","print");
      TSM_ASSERT(str,checkAgainstRubric("print",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_read_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","read");
      TSM_ASSERT(str,checkAgainstRubric("read",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_write_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","write");
      TSM_ASSERT(str,checkAgainstRubric("write",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_Integer_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","Integer");
      TSM_ASSERT(str,checkAgainstRubric("Integer",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_Float_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","Float");
      TSM_ASSERT(str,checkAgainstRubric("Float",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_Boolean_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","Boolean");
      TSM_ASSERT(str,checkAgainstRubric("Boolean",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_String_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","String");
      TSM_ASSERT(str,checkAgainstRubric("String",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_false_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","false");
      TSM_ASSERT(str,checkAgainstRubric("false",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_true_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","true");
      TSM_ASSERT(str,checkAgainstRubric("true",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_head_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","head");
      TSM_ASSERT(str,checkAgainstRubric("head",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_tail_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","tail");
      TSM_ASSERT(str,checkAgainstRubric("tail",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_null_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","null");
      TSM_ASSERT(str,checkAgainstRubric("null",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_map_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","map");
      TSM_ASSERT(str,checkAgainstRubric("map",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_filter_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","filter");
      TSM_ASSERT(str,checkAgainstRubric("filter",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_fold_keyword( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			foldKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"foldKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\157\154\144\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s Keyword Test Failed\n","fold");
      TSM_ASSERT(str,checkAgainstRubric("fold",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }
    void test_lparen_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x28\x0a","lparen");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_rparen_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x29\x0a","rparen");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_lbrace_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x28\x0a","lbrace");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_rbrace_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x29\x0a","rbrace");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_lbracket_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x5b\x0a","lbracket");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_rbracket_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x5d\x0a","rbracket");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_lessthan_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x3c\x0a","lessthan");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_greaterthan_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x3e\x0a","greaterthan");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_colon_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x3a\x0a","colon");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_doublecolon_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x3a\x3a\x0a","doublecolon");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_comma_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x2c\x0a","comma");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_semicolon_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x3b\x0a","semicolon");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_assignment_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x3d\x0a","assignment");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_plus_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x2b\x0a","plus");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_multiplication_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x2a\x0a","multiplication");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_subtraction_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x2d\x0a","subtraction");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_division_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x2f\x0a","division");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_doublebackslash_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x5c\x5c\x0a","doublebackslash");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_arrow_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x2d\x3e\x0a","arrow");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_equals_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x3d\x3d\x0a","equals");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_leq_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x3c\x3d\x0a","leq");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_geq_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x3e\x3d\x0a","geq");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_notequal_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x21\x3d\x0a","notequal");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_doubleplus_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x2b\x2b\x0a","doubleplus");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_doubledot_symbol( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"%s(%s) Symbol Test Failed\n","\x2e\x2e\x0a","doubledot");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,1));
    }

    void test_three_lparen_rbrace_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			rightParen,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"rightParen",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\051\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x29\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x29\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_rbrace_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			rightParen,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"rightParen",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\051\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x29\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x29\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_rparen_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			rightParen,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"rightParen",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\051\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x29\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x29\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_lbrace_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			leftParen,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"leftParen",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\050\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x28\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x28\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_rparen_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			rightParen,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"rightParen",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\051\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x29\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x29\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_rparen_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			rightParen,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"rightParen",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\051\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x29\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x29\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_rparen_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			rightParen,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"rightParen",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\051\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x29\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x29\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_rparen_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			rightParen,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"rightParen",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\051\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x29\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x29\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_rparen_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			rightParen,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"rightParen",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\051\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x29\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x29\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_rparen_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			rightParen,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"rightParen",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\051\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x29\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x29\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_rparen_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			rightParen,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"rightParen",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\051\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x29\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x29\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_lbracket_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			leftSquare,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"leftSquare",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\133\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x5b\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x5b\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_rbracket_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			rightSquare,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"rightSquare",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\135\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x5d\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x5d\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_rbracket_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			rightSquare,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"rightSquare",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\135\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x5d\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x5d\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_lessthan_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			leftAngle,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"leftAngle",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\074\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x3c\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x3c\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_greaterthan_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			rightAngle,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"rightAngle",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\076\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x3e\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x3e\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_rbracket_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			rightSquare,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"rightSquare",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\135\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x5d\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x5d\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_lessthan_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			leftAngle,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"leftAngle",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\074\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x3c\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x3c\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_greaterthan_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			rightAngle,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"rightAngle",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\076\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x3e\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x3e\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_lbracket_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			leftSquare,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"leftSquare",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\133\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x5b\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x5b\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_greaterthan_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			rightAngle,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"rightAngle",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\076\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x3e\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x3e\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_rbracket_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			rightSquare,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"rightSquare",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\135\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x5d\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x5d\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_doublecolon_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			colonColon,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"colonColon",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\072\072\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x3a\x3a\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x3a\x3a\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_semicolon_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			semiColon,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"semiColon",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\073\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x3b\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x3b\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_doublecolon_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			colonColon,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"colonColon",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\072\072\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x3a\x3a\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x3a\x3a\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_colon_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			colon,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"colon",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\072\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x3a\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x3a\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_colon_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			colon,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"colon",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\072\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x3a\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x3a\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_doublecolon_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			colonColon,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"colonColon",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\072\072\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x3a\x3a\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x3a\x3a\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_colon_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			colon,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"colon",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\072\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x3a\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x3a\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_doublecolon_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			colonColon,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"colonColon",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\072\072\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x3a\x3a\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x3a\x3a\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_colon_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			colon,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"colon",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\072\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x3a\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x3a\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_colon_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			colon,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"colon",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\072\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x3a\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x3a\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_colon_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			colon,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"colon",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\072\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x3a\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x3a\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_plus_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			plusSign,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"plusSign",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\053\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x2b\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x2b\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_multiplication_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			star,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"star",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\052\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x2a\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x2a\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_subtraction_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			dash,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"dash",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\055\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x2d\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x2d\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_multiplication_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			star,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"star",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\052\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x2a\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x2a\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_plus_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			plusSign,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"plusSign",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\053\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x2b\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x2b\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_plus_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			plusSign,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"plusSign",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\053\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x2b\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x2b\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_multiplication_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			star,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"star",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\052\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x2a\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x2a\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_subtraction_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			dash,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"dash",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\055\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x2d\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x2d\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_multiplication_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			star,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"star",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\052\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x2a\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x2a\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_multiplication_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			star,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"star",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\052\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x2a\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x2a\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_plus_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			plusSign,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"plusSign",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\053\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x2b\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x2b\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_arrow_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			arrow,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"arrow",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\055\076\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x2d\x3e\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x2d\x3e\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_arrow_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			arrow,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"arrow",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\055\076\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x2d\x3e\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x2d\x3e\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_equals_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			equalsEquals,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"equalsEquals",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\075\075\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x3d\x3d\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x3d\x3d\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_doublebackslash_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			backSlash,
			backSlash,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"backSlash",
			"backSlash",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\134\000",
			"\134\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x5c\x5c\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x5c\x5c\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_division_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			forwardSlash,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"forwardSlash",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\057\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x2f\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x2f\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_equals_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			equalsEquals,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"equalsEquals",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\075\075\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x3d\x3d\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x3d\x3d\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_doublebackslash_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			backSlash,
			backSlash,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"backSlash",
			"backSlash",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\134\000",
			"\134\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x5c\x5c\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x5c\x5c\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_doublebackslash_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			backSlash,
			backSlash,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"backSlash",
			"backSlash",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\134\000",
			"\134\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x5c\x5c\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x5c\x5c\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_division_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			forwardSlash,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"forwardSlash",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\057\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x2f\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x2f\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_arrow_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			arrow,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"arrow",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\055\076\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x2d\x3e\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x2d\x3e\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_arrow_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			arrow,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"arrow",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\055\076\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x2d\x3e\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x2d\x3e\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_geq_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			greaterThanEquals,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"greaterThanEquals",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\076\075\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x3e\x3d\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x3e\x3d\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_leq_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			lessThanEquals,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"lessThanEquals",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\074\075\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x3c\x3d\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x3c\x3d\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_geq_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			greaterThanEquals,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"greaterThanEquals",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\076\075\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x3e\x3d\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x3e\x3d\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_notequal_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			notEquals,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"notEquals",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\041\075\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x21\x3d\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x21\x3d\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_geq_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			greaterThanEquals,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"greaterThanEquals",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\076\075\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x3e\x3d\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x3e\x3d\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_geq_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			greaterThanEquals,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"greaterThanEquals",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\076\075\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x3e\x3d\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x3e\x3d\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_leq_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			lessThanEquals,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"lessThanEquals",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\074\075\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x3c\x3d\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x3c\x3d\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_doubleplus_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			plusPlus,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"plusPlus",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\053\053\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x2b\x2b\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x2b\x2b\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_notequal_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			notEquals,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"notEquals",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\041\075\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x21\x3d\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x21\x3d\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_geq_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			greaterThanEquals,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"greaterThanEquals",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\076\075\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x3e\x3d\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x3e\x3d\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_geq_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			greaterThanEquals,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"greaterThanEquals",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\076\075\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x3e\x3d\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x3e\x3d\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_in_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			inKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"inKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\151\156\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x69\x6e\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x69\x6e\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_doubledot_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			dotDot,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"dotDot",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\056\056\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x2e\x2e\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x2e\x2e\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_if_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			ifKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"ifKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\151\146\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x69\x66\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x69\x66\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_in_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			inKwd,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"inKwd",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\151\156\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x69\x6e\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x69\x6e\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_in_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			inKwd,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"inKwd",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\151\156\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x69\x6e\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x69\x6e\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_in_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			inKwd,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"inKwd",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\151\156\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x69\x6e\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x69\x6e\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_main_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			variableName,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"variableName",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\155\141\151\156\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x6d\x61\x69\x6e\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x6d\x61\x69\x6e\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_in_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			inKwd,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"inKwd",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\151\156\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x69\x6e\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x69\x6e\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_in_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			inKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"inKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\151\156\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x69\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x69\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_main_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			variableName,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"variableName",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\155\141\151\156\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x6d\x61\x69\x6e\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x6d\x61\x69\x6e\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_doubledot_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			dotDot,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"dotDot",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\056\056\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x2e\x2e\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x2e\x2e\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_read_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			readKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"readKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\162\145\141\144\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x72\x65\x61\x64\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x72\x65\x61\x64\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_then_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			thenKwd,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"thenKwd",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\164\150\145\156\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x74\x68\x65\x6e\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x74\x68\x65\x6e\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_else_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			elseKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"elseKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\145\154\163\145\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x65\x6c\x73\x65\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x65\x6c\x73\x65\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_else_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			elseKwd,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"elseKwd",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\145\154\163\145\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x65\x6c\x73\x65\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x65\x6c\x73\x65\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_read_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			readKwd,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"readKwd",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\162\145\141\144\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x72\x65\x61\x64\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x72\x65\x61\x64\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_print_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			printKwd,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"printKwd",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\160\162\151\156\164\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x70\x72\x69\x6e\x74\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x70\x72\x69\x6e\x74\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_then_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			thenKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"thenKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\164\150\145\156\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x74\x68\x65\x6e\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x74\x68\x65\x6e\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_else_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			elseKwd,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"elseKwd",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\145\154\163\145\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x65\x6c\x73\x65\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x65\x6c\x73\x65\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_else_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			elseKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"elseKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\145\154\163\145\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x65\x6c\x73\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x65\x6c\x73\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_then_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			thenKwd,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"thenKwd",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\164\150\145\156\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x74\x68\x65\x6e\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x74\x68\x65\x6e\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_else_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			elseKwd,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"elseKwd",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\145\154\163\145\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x65\x6c\x73\x65\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x65\x6c\x73\x65\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_Integer_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			integerKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"integerKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\111\156\164\145\147\145\162\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_Boolean_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			booleanKwd,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"booleanKwd",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\102\157\157\154\145\141\156\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_Boolean_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			booleanKwd,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"booleanKwd",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\102\157\157\154\145\141\156\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_Boolean_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			booleanKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"booleanKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\102\157\157\154\145\141\156\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_Float_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			floatKwd,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"floatKwd",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\106\154\157\141\164\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x46\x6c\x6f\x61\x74\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x46\x6c\x6f\x61\x74\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_Float_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			floatKwd,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"floatKwd",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\106\154\157\141\164\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x46\x6c\x6f\x61\x74\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x46\x6c\x6f\x61\x74\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_Float_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			floatKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"floatKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\106\154\157\141\164\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x46\x6c\x6f\x61\x74\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x46\x6c\x6f\x61\x74\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_Boolean_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			booleanKwd,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"booleanKwd",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\102\157\157\154\145\141\156\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_Integer_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			integerKwd,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"integerKwd",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\111\156\164\145\147\145\162\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_Integer_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			integerKwd,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"integerKwd",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\111\156\164\145\147\145\162\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_write_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			writeKwd,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"writeKwd",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\167\162\151\164\145\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x77\x72\x69\x74\x65\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x77\x72\x69\x74\x65\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_true_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			trueKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"trueKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\164\162\165\145\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x74\x72\x75\x65\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x74\x72\x75\x65\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_head_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			headKwd,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"headKwd",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\150\145\141\144\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x68\x65\x61\x64\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x68\x65\x61\x64\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_false_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			falseKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"falseKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\146\141\154\163\145\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x66\x61\x6c\x73\x65\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x66\x61\x6c\x73\x65\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_false_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			falseKwd,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"falseKwd",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\146\141\154\163\145\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x66\x61\x6c\x73\x65\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x66\x61\x6c\x73\x65\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_head_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			headKwd,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"headKwd",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\150\145\141\144\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x68\x65\x61\x64\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x68\x65\x61\x64\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_head_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			headKwd,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"headKwd",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\150\145\141\144\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x68\x65\x61\x64\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x68\x65\x61\x64\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_String_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			stringKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"stringKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\123\164\162\151\156\147\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x53\x74\x72\x69\x6e\x67\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x53\x74\x72\x69\x6e\x67\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_true_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			trueKwd,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"trueKwd",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\164\162\165\145\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x74\x72\x75\x65\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x74\x72\x75\x65\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_true_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			trueKwd,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"trueKwd",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\164\162\165\145\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x74\x72\x75\x65\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x74\x72\x75\x65\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_true_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			trueKwd,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"trueKwd",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\164\162\165\145\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x74\x72\x75\x65\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x74\x72\x75\x65\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_String_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			stringKwd,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"stringKwd",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\123\164\162\151\156\147\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x53\x74\x72\x69\x6e\x67\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x53\x74\x72\x69\x6e\x67\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_filter_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			filterKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"filterKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\146\151\154\164\145\162\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x66\x69\x6c\x74\x65\x72\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x66\x69\x6c\x74\x65\x72\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_filter_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			filterKwd,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"filterKwd",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\146\151\154\164\145\162\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x66\x69\x6c\x74\x65\x72\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x66\x69\x6c\x74\x65\x72\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_map_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			mapKwd,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"mapKwd",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\155\141\160\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x6d\x61\x70\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x6d\x61\x70\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_map_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			mapKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"mapKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\155\141\160\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x6d\x61\x70\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x6d\x61\x70\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_null_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			nullKwd,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"nullKwd",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\156\165\154\154\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x6e\x75\x6c\x6c\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x6e\x75\x6c\x6c\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbrace_map_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			mapKwd,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"mapKwd",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\155\141\160\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x6d\x61\x70\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x6d\x61\x70\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_map_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			mapKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"mapKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\155\141\160\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x6d\x61\x70\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x6d\x61\x70\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rparen_null_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			nullKwd,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"nullKwd",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\156\165\154\154\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x29\x20\x6e\x75\x6c\x6c\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x20\x6e\x75\x6c\x6c\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_null_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			nullKwd,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"nullKwd",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\156\165\154\154\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x6e\x75\x6c\x6c\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x6e\x75\x6c\x6c\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lparen_tail_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			tailKwd,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"tailKwd",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\164\141\151\154\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x74\x61\x69\x6c\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x74\x61\x69\x6c\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbrace_filter_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			filterKwd,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"filterKwd",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\146\151\154\164\145\162\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x28\x20\x66\x69\x6c\x74\x65\x72\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x20\x66\x69\x6c\x74\x65\x72\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_rparen_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			rightParen,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"rightParen",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\051\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x29\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x29\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_lbrace_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			leftParen,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"leftParen",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\050\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x28\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x28\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_rbrace_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			rightParen,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"rightParen",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\051\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x29\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x29\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_rparen_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			rightParen,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"rightParen",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\051\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x29\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x29\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_lparen_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			leftParen,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"leftParen",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\050\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x28\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x28\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_lparen_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			leftParen,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"leftParen",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\050\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x28\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x28\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_rbrace_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			rightParen,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"rightParen",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\051\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x29\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x29\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_rparen_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			rightParen,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"rightParen",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\051\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x29\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x29\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_rbrace_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			rightParen,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"rightParen",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\051\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x29\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x29\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_rparen_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			rightParen,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"rightParen",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\051\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x29\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x29\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_rbrace_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			rightParen,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"rightParen",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\051\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x29\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x29\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_lbracket_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			leftSquare,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"leftSquare",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\133\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x5b\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x5b\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_greaterthan_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			rightAngle,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"rightAngle",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\076\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x3e\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x3e\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_lbracket_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			leftSquare,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"leftSquare",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\133\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x5b\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x5b\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_lessthan_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			leftAngle,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"leftAngle",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\074\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x3c\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x3c\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_lessthan_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			leftAngle,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"leftAngle",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\074\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x3c\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x3c\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_lbracket_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			leftSquare,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"leftSquare",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\133\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x5b\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x5b\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_lbracket_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			leftSquare,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"leftSquare",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\133\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x5b\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x5b\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_rbracket_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			rightSquare,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"rightSquare",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\135\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x5d\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x5d\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_greaterthan_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			rightAngle,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"rightAngle",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\076\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x3e\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x3e\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_lbracket_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			leftSquare,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"leftSquare",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\133\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x5b\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x5b\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_lbracket_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			leftSquare,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"leftSquare",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\133\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x5b\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x5b\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_doublecolon_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			colonColon,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"colonColon",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\072\072\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x3a\x3a\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x3a\x3a\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_comma_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			comma,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"comma",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\054\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x2c\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x2c\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_doublecolon_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			colonColon,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"colonColon",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\072\072\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x3a\x3a\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x3a\x3a\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_comma_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			comma,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"comma",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\054\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x2c\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x2c\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_comma_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			comma,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"comma",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\054\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x2c\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x2c\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_doublecolon_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			colonColon,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"colonColon",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\072\072\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x3a\x3a\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x3a\x3a\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_comma_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			comma,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"comma",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\054\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x2c\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x2c\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_semicolon_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			semiColon,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"semiColon",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\073\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x3b\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x3b\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_colon_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			colon,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"colon",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\072\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x3a\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x3a\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_semicolon_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			semiColon,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"semiColon",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\073\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x3b\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x3b\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_doublecolon_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			colonColon,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"colonColon",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\072\072\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x3a\x3a\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x3a\x3a\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_plus_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			plusSign,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"plusSign",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\053\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x2b\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x2b\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_plus_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			plusSign,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"plusSign",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\053\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x2b\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x2b\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_subtraction_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			dash,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"dash",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\055\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x2d\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x2d\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_assignment_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			equalsSign,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"equalsSign",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\075\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x3d\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x3d\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_plus_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			plusSign,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"plusSign",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\053\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x2b\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x2b\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_multiplication_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			star,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"star",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\052\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x2a\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x2a\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_subtraction_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			dash,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"dash",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\055\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x2d\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x2d\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_subtraction_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			dash,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"dash",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\055\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x2d\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x2d\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_multiplication_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			star,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"star",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\052\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x2a\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x2a\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_multiplication_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			star,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"star",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\052\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x2a\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x2a\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_multiplication_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			star,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"star",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\052\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x2a\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x2a\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_equals_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			equalsEquals,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"equalsEquals",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\075\075\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x3d\x3d\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x3d\x3d\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_equals_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			equalsEquals,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"equalsEquals",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\075\075\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x3d\x3d\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x3d\x3d\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_doublebackslash_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			backSlash,
			backSlash,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"backSlash",
			"backSlash",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\134\000",
			"\134\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x5c\x5c\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x5c\x5c\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_division_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			forwardSlash,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"forwardSlash",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\057\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x2f\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x2f\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_division_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			forwardSlash,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"forwardSlash",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\057\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x2f\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x2f\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_doublebackslash_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			backSlash,
			backSlash,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"backSlash",
			"backSlash",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\134\000",
			"\134\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x5c\x5c\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x5c\x5c\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_arrow_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			arrow,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"arrow",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\055\076\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x2d\x3e\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x2d\x3e\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_doublebackslash_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			backSlash,
			backSlash,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"backSlash",
			"backSlash",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\134\000",
			"\134\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x5c\x5c\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x5c\x5c\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_division_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			forwardSlash,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"forwardSlash",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\057\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x2f\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x2f\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_doublebackslash_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			backSlash,
			backSlash,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"backSlash",
			"backSlash",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\134\000",
			"\134\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x5c\x5c\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x5c\x5c\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_equals_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			equalsEquals,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"equalsEquals",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\075\075\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x3d\x3d\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x3d\x3d\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_doubleplus_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			plusPlus,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"plusPlus",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\053\053\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x2b\x2b\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x2b\x2b\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_geq_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			greaterThanEquals,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"greaterThanEquals",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\076\075\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x3e\x3d\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x3e\x3d\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_notequal_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			notEquals,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"notEquals",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\041\075\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x21\x3d\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x21\x3d\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_leq_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			lessThanEquals,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"lessThanEquals",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\074\075\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x3c\x3d\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x3c\x3d\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_notequal_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			notEquals,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"notEquals",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\041\075\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x21\x3d\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x21\x3d\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_notequal_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			notEquals,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"notEquals",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\041\075\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x21\x3d\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x21\x3d\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_geq_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			greaterThanEquals,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"greaterThanEquals",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\076\075\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x3e\x3d\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x3e\x3d\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_notequal_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			notEquals,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"notEquals",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\041\075\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x21\x3d\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x21\x3d\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_notequal_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			notEquals,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"notEquals",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\041\075\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x21\x3d\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x21\x3d\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_doubleplus_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			plusPlus,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"plusPlus",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\053\053\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x2b\x2b\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x2b\x2b\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_geq_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			greaterThanEquals,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"greaterThanEquals",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\076\075\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x3e\x3d\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x3e\x3d\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_doubledot_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			dotDot,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"dotDot",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\056\056\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x2e\x2e\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x2e\x2e\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_main_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			variableName,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"variableName",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\155\141\151\156\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x6d\x61\x69\x6e\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x6d\x61\x69\x6e\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_in_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			inKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"inKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\151\156\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x69\x6e\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x69\x6e\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_in_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			inKwd,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"inKwd",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\151\156\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x69\x6e\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x69\x6e\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_if_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			ifKwd,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"ifKwd",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\151\146\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x69\x66\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x69\x66\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_doubledot_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			dotDot,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"dotDot",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\056\056\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x2e\x2e\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x2e\x2e\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_main_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			variableName,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"variableName",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\155\141\151\156\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x6d\x61\x69\x6e\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x6d\x61\x69\x6e\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_in_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			inKwd,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"inKwd",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\151\156\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x69\x6e\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x69\x6e\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_main_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			variableName,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"variableName",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\155\141\151\156\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x6d\x61\x69\x6e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x6d\x61\x69\x6e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_main_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			variableName,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"variableName",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\155\141\151\156\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x6d\x61\x69\x6e\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x6d\x61\x69\x6e\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_doubledot_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			dotDot,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"dotDot",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\056\056\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x2e\x2e\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x2e\x2e\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_print_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			printKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"printKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\160\162\151\156\164\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x70\x72\x69\x6e\x74\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x70\x72\x69\x6e\x74\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_print_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			printKwd,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"printKwd",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\160\162\151\156\164\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x70\x72\x69\x6e\x74\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x70\x72\x69\x6e\x74\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_print_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			printKwd,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"printKwd",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\160\162\151\156\164\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x70\x72\x69\x6e\x74\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x70\x72\x69\x6e\x74\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_else_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			elseKwd,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"elseKwd",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\145\154\163\145\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x65\x6c\x73\x65\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x65\x6c\x73\x65\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_else_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			elseKwd,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"elseKwd",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\145\154\163\145\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x65\x6c\x73\x65\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x65\x6c\x73\x65\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_else_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			elseKwd,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"elseKwd",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\145\154\163\145\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x65\x6c\x73\x65\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x65\x6c\x73\x65\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_then_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			thenKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"thenKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\164\150\145\156\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x74\x68\x65\x6e\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x74\x68\x65\x6e\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_then_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			thenKwd,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"thenKwd",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\164\150\145\156\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x74\x68\x65\x6e\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x74\x68\x65\x6e\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_then_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			thenKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"thenKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\164\150\145\156\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x74\x68\x65\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x74\x68\x65\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_read_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			readKwd,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"readKwd",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\162\145\141\144\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x72\x65\x61\x64\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x72\x65\x61\x64\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_read_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			readKwd,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"readKwd",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\162\145\141\144\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x72\x65\x61\x64\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x72\x65\x61\x64\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_Boolean_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			booleanKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"booleanKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\102\157\157\154\145\141\156\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_Float_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			floatKwd,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"floatKwd",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\106\154\157\141\164\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x46\x6c\x6f\x61\x74\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x46\x6c\x6f\x61\x74\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_Boolean_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			booleanKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"booleanKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\102\157\157\154\145\141\156\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_Boolean_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			booleanKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"booleanKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\102\157\157\154\145\141\156\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_Integer_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			integerKwd,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"integerKwd",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\111\156\164\145\147\145\162\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_write_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			writeKwd,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"writeKwd",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\167\162\151\164\145\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x77\x72\x69\x74\x65\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x77\x72\x69\x74\x65\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_write_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			writeKwd,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"writeKwd",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\167\162\151\164\145\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x77\x72\x69\x74\x65\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x77\x72\x69\x74\x65\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_Boolean_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			booleanKwd,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"booleanKwd",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\102\157\157\154\145\141\156\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_Boolean_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			booleanKwd,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"booleanKwd",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\102\157\157\154\145\141\156\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_Boolean_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			booleanKwd,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"booleanKwd",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\102\157\157\154\145\141\156\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_write_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			writeKwd,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"writeKwd",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\167\162\151\164\145\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x77\x72\x69\x74\x65\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x77\x72\x69\x74\x65\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_String_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			stringKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"stringKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\123\164\162\151\156\147\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x53\x74\x72\x69\x6e\x67\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x53\x74\x72\x69\x6e\x67\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_true_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			trueKwd,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"trueKwd",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\164\162\165\145\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x74\x72\x75\x65\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x74\x72\x75\x65\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_false_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			falseKwd,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"falseKwd",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\146\141\154\163\145\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x66\x61\x6c\x73\x65\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x66\x61\x6c\x73\x65\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_head_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			headKwd,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"headKwd",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\150\145\141\144\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x68\x65\x61\x64\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x68\x65\x61\x64\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_false_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			falseKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"falseKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\146\141\154\163\145\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x66\x61\x6c\x73\x65\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x66\x61\x6c\x73\x65\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_false_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			falseKwd,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"falseKwd",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\146\141\154\163\145\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x66\x61\x6c\x73\x65\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x66\x61\x6c\x73\x65\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_false_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			falseKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"falseKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\146\141\154\163\145\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x66\x61\x6c\x73\x65\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x66\x61\x6c\x73\x65\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_head_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			headKwd,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"headKwd",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\150\145\141\144\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x68\x65\x61\x64\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x68\x65\x61\x64\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_String_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			stringKwd,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"stringKwd",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\123\164\162\151\156\147\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x53\x74\x72\x69\x6e\x67\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x53\x74\x72\x69\x6e\x67\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_true_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			trueKwd,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"trueKwd",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\164\162\165\145\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x74\x72\x75\x65\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x74\x72\x75\x65\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_head_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			headKwd,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"headKwd",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\150\145\141\144\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x68\x65\x61\x64\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x68\x65\x61\x64\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_null_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			nullKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"nullKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\156\165\154\154\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x6e\x75\x6c\x6c\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x6e\x75\x6c\x6c\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_null_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			nullKwd,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"nullKwd",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\156\165\154\154\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x6e\x75\x6c\x6c\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x6e\x75\x6c\x6c\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_filter_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			filterKwd,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"filterKwd",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\146\151\154\164\145\162\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x66\x69\x6c\x74\x65\x72\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x66\x69\x6c\x74\x65\x72\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_map_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			mapKwd,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"mapKwd",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\155\141\160\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x6d\x61\x70\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x6d\x61\x70\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_map_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			mapKwd,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"mapKwd",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\155\141\160\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x6d\x61\x70\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x6d\x61\x70\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_map_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			mapKwd,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"mapKwd",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\155\141\160\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x6d\x61\x70\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x6d\x61\x70\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lbracket_map_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			mapKwd,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"mapKwd",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\155\141\160\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5b\x20\x6d\x61\x70\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x20\x6d\x61\x70\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_greaterthan_null_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			nullKwd,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"nullKwd",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\156\165\154\154\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x20\x6e\x75\x6c\x6c\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x20\x6e\x75\x6c\x6c\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_tail_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			tailKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"tailKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\164\141\151\154\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x74\x61\x69\x6c\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x74\x61\x69\x6c\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_lessthan_map_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			mapKwd,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"mapKwd",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\155\141\160\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x20\x6d\x61\x70\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x20\x6d\x61\x70\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_rbracket_filter_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			filterKwd,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"filterKwd",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\146\151\154\164\145\162\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x5d\x20\x66\x69\x6c\x74\x65\x72\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x20\x66\x69\x6c\x74\x65\x72\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_rbrace_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			rightParen,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"rightParen",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\051\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x29\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x29\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_rparen_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			rightParen,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"rightParen",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\051\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x29\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x29\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_rparen_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			rightParen,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"rightParen",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\051\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x29\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x29\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_rparen_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			rightParen,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"rightParen",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\051\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x29\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x29\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_rparen_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			rightParen,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"rightParen",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\051\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x29\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x29\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_rparen_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			rightParen,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"rightParen",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\051\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x29\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x29\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_lparen_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			leftParen,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"leftParen",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\050\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x28\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x28\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_lbrace_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			leftParen,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"leftParen",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\050\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x28\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x28\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_lbrace_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			leftParen,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"leftParen",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\050\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x28\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x28\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_rparen_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			rightParen,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"rightParen",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\051\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x29\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x29\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_lparen_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			leftParen,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"leftParen",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\050\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x28\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x28\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_lessthan_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			leftAngle,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"leftAngle",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\074\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x3c\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x3c\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_greaterthan_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			rightAngle,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"rightAngle",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\076\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x3e\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x3e\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_greaterthan_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			rightAngle,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"rightAngle",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\076\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x3e\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x3e\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_lessthan_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			leftAngle,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"leftAngle",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\074\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x3c\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x3c\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_lbracket_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			leftSquare,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"leftSquare",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\133\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x5b\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x5b\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_rbracket_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			rightSquare,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"rightSquare",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\135\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x5d\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x5d\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_lessthan_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			leftAngle,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"leftAngle",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\074\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x3c\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x3c\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_lessthan_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			leftAngle,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"leftAngle",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\074\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x3c\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x3c\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_rbracket_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			rightSquare,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"rightSquare",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\135\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x5d\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x5d\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_rbracket_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			rightSquare,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"rightSquare",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\135\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x5d\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x5d\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_rbracket_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			rightSquare,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"rightSquare",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\135\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x5d\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x5d\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_doublecolon_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			colonColon,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"colonColon",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\072\072\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x3a\x3a\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x3a\x3a\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_comma_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			comma,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"comma",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\054\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x2c\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x2c\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_comma_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			comma,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"comma",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\054\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x2c\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x2c\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_doublecolon_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			colonColon,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"colonColon",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\072\072\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x3a\x3a\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x3a\x3a\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_doublecolon_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			colonColon,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"colonColon",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\072\072\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x3a\x3a\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x3a\x3a\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_semicolon_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			semiColon,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"semiColon",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\073\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x3b\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x3b\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_semicolon_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			semiColon,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"semiColon",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\073\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x3b\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x3b\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_semicolon_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			semiColon,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"semiColon",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\073\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x3b\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x3b\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_doublecolon_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			colonColon,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"colonColon",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\072\072\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x3a\x3a\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x3a\x3a\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_colon_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			colon,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"colon",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\072\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x3a\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x3a\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_semicolon_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			semiColon,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"semiColon",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\073\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x3b\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x3b\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_multiplication_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			star,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"star",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\052\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x2a\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x2a\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_multiplication_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			star,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"star",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\052\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x2a\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x2a\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_multiplication_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			star,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"star",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\052\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x2a\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x2a\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_assignment_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			equalsSign,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"equalsSign",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\075\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x3d\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x3d\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_assignment_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			equalsSign,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"equalsSign",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\075\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x3d\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x3d\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_assignment_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			equalsSign,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"equalsSign",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\075\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x3d\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x3d\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_multiplication_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			star,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"star",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\052\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x2a\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x2a\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_assignment_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			equalsSign,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"equalsSign",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\075\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x3d\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x3d\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_subtraction_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			dash,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"dash",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\055\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x2d\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x2d\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_plus_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			plusSign,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"plusSign",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\053\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x2b\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x2b\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_assignment_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			equalsSign,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"equalsSign",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\075\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x3d\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x3d\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_division_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			forwardSlash,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"forwardSlash",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\057\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x2f\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x2f\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_doublebackslash_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			backSlash,
			backSlash,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"backSlash",
			"backSlash",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\134\000",
			"\134\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x5c\x5c\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x5c\x5c\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_division_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			forwardSlash,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"forwardSlash",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\057\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x2f\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x2f\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_division_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			forwardSlash,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"forwardSlash",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\057\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x2f\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x2f\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_arrow_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			arrow,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"arrow",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\055\076\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x2d\x3e\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x2d\x3e\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_equals_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			equalsEquals,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"equalsEquals",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\075\075\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x3d\x3d\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x3d\x3d\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_arrow_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			arrow,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"arrow",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\055\076\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x2d\x3e\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x2d\x3e\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_division_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			forwardSlash,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"forwardSlash",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\057\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x2f\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x2f\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_arrow_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			arrow,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"arrow",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\055\076\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x2d\x3e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x2d\x3e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_division_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			forwardSlash,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"forwardSlash",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\057\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x2f\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x2f\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_equals_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			equalsEquals,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"equalsEquals",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\075\075\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x3d\x3d\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x3d\x3d\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_doubleplus_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			plusPlus,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"plusPlus",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\053\053\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x2b\x2b\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x2b\x2b\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_doubleplus_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			plusPlus,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"plusPlus",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\053\053\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x2b\x2b\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x2b\x2b\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_notequal_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			notEquals,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"notEquals",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\041\075\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x21\x3d\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x21\x3d\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_notequal_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			notEquals,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"notEquals",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\041\075\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x21\x3d\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x21\x3d\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_notequal_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			notEquals,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"notEquals",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\041\075\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x21\x3d\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x21\x3d\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_geq_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			greaterThanEquals,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"greaterThanEquals",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\076\075\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x3e\x3d\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x3e\x3d\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_leq_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			lessThanEquals,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"lessThanEquals",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\074\075\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x3c\x3d\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x3c\x3d\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_geq_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			greaterThanEquals,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"greaterThanEquals",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\076\075\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x3e\x3d\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x3e\x3d\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_notequal_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			notEquals,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"notEquals",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\041\075\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x21\x3d\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x21\x3d\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_geq_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			greaterThanEquals,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"greaterThanEquals",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\076\075\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x3e\x3d\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x3e\x3d\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_doubleplus_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			plusPlus,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"plusPlus",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\053\053\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x2b\x2b\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x2b\x2b\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_doubledot_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			dotDot,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"dotDot",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\056\056\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x2e\x2e\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x2e\x2e\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_if_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			ifKwd,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"ifKwd",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\151\146\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x69\x66\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x69\x66\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_if_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			ifKwd,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"ifKwd",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\151\146\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x69\x66\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x69\x66\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_if_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			ifKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"ifKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\151\146\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x69\x66\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x69\x66\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_doubledot_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			dotDot,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"dotDot",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\056\056\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x2e\x2e\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x2e\x2e\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_main_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			variableName,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"variableName",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\155\141\151\156\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x6d\x61\x69\x6e\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x6d\x61\x69\x6e\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_in_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			inKwd,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"inKwd",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\151\156\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x69\x6e\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x69\x6e\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_doubledot_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			dotDot,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"dotDot",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\056\056\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x2e\x2e\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x2e\x2e\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_in_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			inKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"inKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\151\156\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x69\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x69\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_main_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			variableName,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"variableName",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\155\141\151\156\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x6d\x61\x69\x6e\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x6d\x61\x69\x6e\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_in_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			inKwd,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"inKwd",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\151\156\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x69\x6e\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x69\x6e\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_print_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			printKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"printKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\160\162\151\156\164\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x70\x72\x69\x6e\x74\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x70\x72\x69\x6e\x74\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_read_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			readKwd,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"readKwd",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\162\145\141\144\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x72\x65\x61\x64\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x72\x65\x61\x64\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_read_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			readKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"readKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\162\145\141\144\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x72\x65\x61\x64\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x72\x65\x61\x64\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_else_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			elseKwd,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"elseKwd",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\145\154\163\145\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x65\x6c\x73\x65\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x65\x6c\x73\x65\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_print_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			printKwd,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"printKwd",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\160\162\151\156\164\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x70\x72\x69\x6e\x74\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x70\x72\x69\x6e\x74\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_else_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			elseKwd,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"elseKwd",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\145\154\163\145\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x65\x6c\x73\x65\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x65\x6c\x73\x65\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_else_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			elseKwd,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"elseKwd",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\145\154\163\145\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x65\x6c\x73\x65\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x65\x6c\x73\x65\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_print_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			printKwd,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"printKwd",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\160\162\151\156\164\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x70\x72\x69\x6e\x74\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x70\x72\x69\x6e\x74\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_then_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			thenKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"thenKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\164\150\145\156\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x74\x68\x65\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x74\x68\x65\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_read_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			readKwd,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"readKwd",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\162\145\141\144\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x72\x65\x61\x64\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x72\x65\x61\x64\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_read_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			readKwd,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"readKwd",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\162\145\141\144\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x72\x65\x61\x64\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x72\x65\x61\x64\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_Float_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			floatKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"floatKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\106\154\157\141\164\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x46\x6c\x6f\x61\x74\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x46\x6c\x6f\x61\x74\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_write_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			writeKwd,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"writeKwd",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\167\162\151\164\145\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x77\x72\x69\x74\x65\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x77\x72\x69\x74\x65\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_Float_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			floatKwd,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"floatKwd",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\106\154\157\141\164\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x46\x6c\x6f\x61\x74\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x46\x6c\x6f\x61\x74\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_Float_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			floatKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"floatKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\106\154\157\141\164\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x46\x6c\x6f\x61\x74\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x46\x6c\x6f\x61\x74\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_Boolean_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			booleanKwd,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"booleanKwd",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\102\157\157\154\145\141\156\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_Integer_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			integerKwd,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"integerKwd",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\111\156\164\145\147\145\162\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_Integer_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			integerKwd,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"integerKwd",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\111\156\164\145\147\145\162\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_write_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			writeKwd,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"writeKwd",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\167\162\151\164\145\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x77\x72\x69\x74\x65\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x77\x72\x69\x74\x65\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_write_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			writeKwd,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"writeKwd",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\167\162\151\164\145\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x77\x72\x69\x74\x65\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x77\x72\x69\x74\x65\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_write_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			writeKwd,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"writeKwd",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\167\162\151\164\145\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x77\x72\x69\x74\x65\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x77\x72\x69\x74\x65\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_Boolean_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			booleanKwd,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"booleanKwd",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\102\157\157\154\145\141\156\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_true_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			trueKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"trueKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\164\162\165\145\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x74\x72\x75\x65\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x74\x72\x75\x65\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_false_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			falseKwd,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"falseKwd",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\146\141\154\163\145\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x66\x61\x6c\x73\x65\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x66\x61\x6c\x73\x65\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_head_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			headKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"headKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\150\145\141\144\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x68\x65\x61\x64\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x68\x65\x61\x64\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_true_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			trueKwd,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"trueKwd",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\164\162\165\145\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x74\x72\x75\x65\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x74\x72\x75\x65\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_true_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			trueKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"trueKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\164\162\165\145\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x74\x72\x75\x65\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x74\x72\x75\x65\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_true_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			trueKwd,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"trueKwd",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\164\162\165\145\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x74\x72\x75\x65\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x74\x72\x75\x65\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_head_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			headKwd,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"headKwd",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\150\145\141\144\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x68\x65\x61\x64\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x68\x65\x61\x64\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_false_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			falseKwd,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"falseKwd",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\146\141\154\163\145\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x66\x61\x6c\x73\x65\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x66\x61\x6c\x73\x65\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_head_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			headKwd,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"headKwd",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\150\145\141\144\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x68\x65\x61\x64\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x68\x65\x61\x64\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_String_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			stringKwd,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"stringKwd",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\123\164\162\151\156\147\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x53\x74\x72\x69\x6e\x67\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x53\x74\x72\x69\x6e\x67\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_String_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			stringKwd,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"stringKwd",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\123\164\162\151\156\147\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x53\x74\x72\x69\x6e\x67\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x53\x74\x72\x69\x6e\x67\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_null_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			nullKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"nullKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\156\165\154\154\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x6e\x75\x6c\x6c\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x6e\x75\x6c\x6c\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_map_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			mapKwd,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"mapKwd",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\155\141\160\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x6d\x61\x70\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x6d\x61\x70\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_null_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			nullKwd,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"nullKwd",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\156\165\154\154\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x6e\x75\x6c\x6c\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x6e\x75\x6c\x6c\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_tail_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			tailKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"tailKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\164\141\151\154\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x74\x61\x69\x6c\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x74\x61\x69\x6c\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_tail_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			tailKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"tailKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\164\141\151\154\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x74\x61\x69\x6c\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x74\x61\x69\x6c\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_map_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			mapKwd,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"mapKwd",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\155\141\160\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x6d\x61\x70\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x6d\x61\x70\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_comma_filter_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			filterKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"filterKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\146\151\154\164\145\162\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2c\x20\x66\x69\x6c\x74\x65\x72\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x20\x66\x69\x6c\x74\x65\x72\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublecolon_map_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colonColon,
			mapKwd,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colonColon",
			"mapKwd",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\072\000",
			"\155\141\160\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x3a\x20\x6d\x61\x70\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x3a\x20\x6d\x61\x70\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_filter_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			filterKwd,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"filterKwd",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\146\151\154\164\145\162\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x66\x69\x6c\x74\x65\x72\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x66\x69\x6c\x74\x65\x72\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_semicolon_null_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			nullKwd,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"nullKwd",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\156\165\154\154\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3b\x20\x6e\x75\x6c\x6c\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x20\x6e\x75\x6c\x6c\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_colon_filter_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			filterKwd,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"filterKwd",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\146\151\154\164\145\162\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3a\x20\x66\x69\x6c\x74\x65\x72\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x20\x66\x69\x6c\x74\x65\x72\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_lparen_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			leftParen,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"leftParen",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\050\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x28\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x28\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_lparen_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			leftParen,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"leftParen",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\050\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x28\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x28\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_lparen_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			leftParen,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"leftParen",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\050\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x28\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x28\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_lbrace_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			leftParen,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"leftParen",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\050\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x28\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x28\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_lbrace_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			leftParen,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"leftParen",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\050\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x28\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x28\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_lparen_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			leftParen,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"leftParen",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\050\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x28\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x28\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_lbrace_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			leftParen,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"leftParen",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\050\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x28\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x28\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_lparen_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			leftParen,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"leftParen",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\050\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x28\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x28\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_lparen_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			leftParen,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"leftParen",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\050\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x28\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x28\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_lbrace_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			leftParen,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"leftParen",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\050\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x28\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x28\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_rparen_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			rightParen,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"rightParen",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\051\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x29\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x29\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_lbracket_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			leftSquare,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"leftSquare",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\133\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x5b\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x5b\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_lessthan_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			leftAngle,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"leftAngle",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\074\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x3c\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x3c\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_lessthan_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			leftAngle,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"leftAngle",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\074\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x3c\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x3c\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_lessthan_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			leftAngle,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"leftAngle",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\074\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x3c\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x3c\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_greaterthan_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			rightAngle,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"rightAngle",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\076\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x3e\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x3e\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_lessthan_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			leftAngle,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"leftAngle",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\074\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x3c\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x3c\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_greaterthan_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			rightAngle,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"rightAngle",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\076\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x3e\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x3e\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_lessthan_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			leftAngle,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"leftAngle",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\074\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x3c\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x3c\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_lessthan_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			leftAngle,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"leftAngle",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\074\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x3c\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x3c\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_rbracket_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			rightSquare,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"rightSquare",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\135\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x5d\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x5d\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_lbracket_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			leftSquare,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"leftSquare",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\133\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x5b\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x5b\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_colon_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			colon,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"colon",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\072\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x3a\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x3a\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_semicolon_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			semiColon,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"semiColon",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\073\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x3b\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x3b\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_semicolon_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			semiColon,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"semiColon",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\073\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x3b\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x3b\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_doublecolon_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			colonColon,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"colonColon",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\072\072\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x3a\x3a\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x3a\x3a\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_colon_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			colon,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"colon",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\072\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x3a\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x3a\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_doublecolon_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			colonColon,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"colonColon",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\072\072\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x3a\x3a\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x3a\x3a\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_semicolon_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			semiColon,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"semiColon",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\073\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x3b\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x3b\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_comma_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			comma,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"comma",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\054\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x2c\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x2c\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_doublecolon_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			colonColon,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"colonColon",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\072\072\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x3a\x3a\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x3a\x3a\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_comma_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			comma,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"comma",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\054\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x2c\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x2c\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_colon_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			colon,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"colon",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\072\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x3a\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x3a\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_subtraction_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			dash,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"dash",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\055\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x2d\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x2d\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_multiplication_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			star,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"star",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\052\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x2a\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x2a\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_multiplication_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			star,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"star",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\052\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x2a\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x2a\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_assignment_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			equalsSign,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"equalsSign",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\075\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x3d\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x3d\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_multiplication_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			star,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"star",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\052\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x2a\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x2a\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_assignment_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			equalsSign,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"equalsSign",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\075\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x3d\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x3d\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_subtraction_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			dash,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"dash",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\055\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x2d\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x2d\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_assignment_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			equalsSign,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"equalsSign",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\075\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x3d\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x3d\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_multiplication_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			star,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"star",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\052\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x2a\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x2a\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_subtraction_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			dash,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"dash",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\055\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x2d\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x2d\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_plus_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			plusSign,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"plusSign",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\053\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x2b\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x2b\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_division_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			forwardSlash,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"forwardSlash",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\057\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x2f\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x2f\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_division_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			forwardSlash,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"forwardSlash",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\057\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x2f\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x2f\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_arrow_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			arrow,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"arrow",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\055\076\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x2d\x3e\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x2d\x3e\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_doublebackslash_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			backSlash,
			backSlash,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"backSlash",
			"backSlash",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\134\000",
			"\134\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x5c\x5c\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x5c\x5c\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_division_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			forwardSlash,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"forwardSlash",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\057\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x2f\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x2f\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_equals_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			equalsEquals,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"equalsEquals",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\075\075\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x3d\x3d\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x3d\x3d\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_equals_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			equalsEquals,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"equalsEquals",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\075\075\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x3d\x3d\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x3d\x3d\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_arrow_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			arrow,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"arrow",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\055\076\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x2d\x3e\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x2d\x3e\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_arrow_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			arrow,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"arrow",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\055\076\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x2d\x3e\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x2d\x3e\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_equals_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			equalsEquals,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"equalsEquals",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\075\075\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x3d\x3d\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x3d\x3d\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_doublebackslash_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			backSlash,
			backSlash,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"backSlash",
			"backSlash",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\134\000",
			"\134\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x5c\x5c\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x5c\x5c\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_doubleplus_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			plusPlus,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"plusPlus",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\053\053\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x2b\x2b\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x2b\x2b\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_doubleplus_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			plusPlus,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"plusPlus",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\053\053\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x2b\x2b\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x2b\x2b\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_leq_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			lessThanEquals,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"lessThanEquals",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\074\075\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x3c\x3d\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x3c\x3d\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_geq_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			greaterThanEquals,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"greaterThanEquals",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\076\075\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x3e\x3d\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x3e\x3d\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_leq_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			lessThanEquals,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"lessThanEquals",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\074\075\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x3c\x3d\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x3c\x3d\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_geq_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			greaterThanEquals,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"greaterThanEquals",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\076\075\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x3e\x3d\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x3e\x3d\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_doubleplus_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			plusPlus,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"plusPlus",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\053\053\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x2b\x2b\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x2b\x2b\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_geq_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			greaterThanEquals,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"greaterThanEquals",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\076\075\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x3e\x3d\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x3e\x3d\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_geq_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			greaterThanEquals,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"greaterThanEquals",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\076\075\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x3e\x3d\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x3e\x3d\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_notequal_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			notEquals,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"notEquals",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\041\075\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x21\x3d\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x21\x3d\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_notequal_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			notEquals,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"notEquals",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\041\075\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x21\x3d\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x21\x3d\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_if_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			ifKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"ifKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\151\146\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x69\x66\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x69\x66\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_doubledot_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			dotDot,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"dotDot",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\056\056\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x2e\x2e\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x2e\x2e\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_doubledot_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			dotDot,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"dotDot",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\056\056\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x2e\x2e\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x2e\x2e\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_main_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			variableName,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"variableName",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\155\141\151\156\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x6d\x61\x69\x6e\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x6d\x61\x69\x6e\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_if_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			ifKwd,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"ifKwd",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\151\146\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x69\x66\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x69\x66\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_main_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			variableName,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"variableName",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\155\141\151\156\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x6d\x61\x69\x6e\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x6d\x61\x69\x6e\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_in_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			inKwd,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"inKwd",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\151\156\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x69\x6e\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x69\x6e\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_in_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			inKwd,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"inKwd",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\151\156\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x69\x6e\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x69\x6e\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_main_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			variableName,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"variableName",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\155\141\151\156\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x6d\x61\x69\x6e\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x6d\x61\x69\x6e\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_in_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			inKwd,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"inKwd",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\151\156\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x69\x6e\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x69\x6e\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_main_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			variableName,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"variableName",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\155\141\151\156\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x6d\x61\x69\x6e\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x6d\x61\x69\x6e\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_then_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			thenKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"thenKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\164\150\145\156\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x74\x68\x65\x6e\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x74\x68\x65\x6e\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_read_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			readKwd,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"readKwd",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\162\145\141\144\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x72\x65\x61\x64\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x72\x65\x61\x64\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_print_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			printKwd,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"printKwd",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\160\162\151\156\164\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x70\x72\x69\x6e\x74\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x70\x72\x69\x6e\x74\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_read_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			readKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"readKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\162\145\141\144\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x72\x65\x61\x64\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x72\x65\x61\x64\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_then_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			thenKwd,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"thenKwd",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\164\150\145\156\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x74\x68\x65\x6e\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x74\x68\x65\x6e\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_read_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			readKwd,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"readKwd",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\162\145\141\144\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x72\x65\x61\x64\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x72\x65\x61\x64\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_read_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			readKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"readKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\162\145\141\144\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x72\x65\x61\x64\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x72\x65\x61\x64\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_print_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			printKwd,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"printKwd",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\160\162\151\156\164\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x70\x72\x69\x6e\x74\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x70\x72\x69\x6e\x74\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_then_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			thenKwd,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"thenKwd",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\164\150\145\156\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x74\x68\x65\x6e\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x74\x68\x65\x6e\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_else_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			elseKwd,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"elseKwd",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\145\154\163\145\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x65\x6c\x73\x65\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x65\x6c\x73\x65\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_else_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			elseKwd,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"elseKwd",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\145\154\163\145\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x65\x6c\x73\x65\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x65\x6c\x73\x65\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_Integer_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			integerKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"integerKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\111\156\164\145\147\145\162\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_Integer_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			integerKwd,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"integerKwd",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\111\156\164\145\147\145\162\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_Integer_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			integerKwd,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"integerKwd",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\111\156\164\145\147\145\162\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_Float_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			floatKwd,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"floatKwd",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\106\154\157\141\164\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x46\x6c\x6f\x61\x74\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x46\x6c\x6f\x61\x74\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_Boolean_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			booleanKwd,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"booleanKwd",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\102\157\157\154\145\141\156\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_write_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			writeKwd,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"writeKwd",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\167\162\151\164\145\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x77\x72\x69\x74\x65\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x77\x72\x69\x74\x65\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_write_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			writeKwd,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"writeKwd",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\167\162\151\164\145\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x77\x72\x69\x74\x65\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x77\x72\x69\x74\x65\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_Float_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			floatKwd,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"floatKwd",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\106\154\157\141\164\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x46\x6c\x6f\x61\x74\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x46\x6c\x6f\x61\x74\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_Integer_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			integerKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"integerKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\111\156\164\145\147\145\162\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_Integer_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			integerKwd,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"integerKwd",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\111\156\164\145\147\145\162\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_write_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			writeKwd,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"writeKwd",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\167\162\151\164\145\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x77\x72\x69\x74\x65\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x77\x72\x69\x74\x65\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_true_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			trueKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"trueKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\164\162\165\145\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x74\x72\x75\x65\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x74\x72\x75\x65\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_String_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			stringKwd,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"stringKwd",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\123\164\162\151\156\147\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x53\x74\x72\x69\x6e\x67\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x53\x74\x72\x69\x6e\x67\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_true_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			trueKwd,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"trueKwd",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\164\162\165\145\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x74\x72\x75\x65\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x74\x72\x75\x65\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_true_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			trueKwd,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"trueKwd",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\164\162\165\145\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x74\x72\x75\x65\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x74\x72\x75\x65\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_true_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			trueKwd,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"trueKwd",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\164\162\165\145\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x74\x72\x75\x65\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x74\x72\x75\x65\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_head_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			headKwd,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"headKwd",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\150\145\141\144\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x68\x65\x61\x64\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x68\x65\x61\x64\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_multiplication_head_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			headKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"headKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\150\145\141\144\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2a\x20\x68\x65\x61\x64\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x20\x68\x65\x61\x64\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_head_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			headKwd,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"headKwd",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\150\145\141\144\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x68\x65\x61\x64\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x68\x65\x61\x64\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_false_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			falseKwd,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"falseKwd",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\146\141\154\163\145\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x66\x61\x6c\x73\x65\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x66\x61\x6c\x73\x65\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_String_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			stringKwd,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"stringKwd",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\123\164\162\151\156\147\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x53\x74\x72\x69\x6e\x67\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x53\x74\x72\x69\x6e\x67\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_head_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			headKwd,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"headKwd",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\150\145\141\144\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x68\x65\x61\x64\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x68\x65\x61\x64\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_tail_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			tailKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"tailKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\164\141\151\154\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x74\x61\x69\x6c\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x74\x61\x69\x6c\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_filter_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			filterKwd,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"filterKwd",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\146\151\154\164\145\162\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x66\x69\x6c\x74\x65\x72\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x66\x69\x6c\x74\x65\x72\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_tail_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			tailKwd,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"tailKwd",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\164\141\151\154\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x74\x61\x69\x6c\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x74\x61\x69\x6c\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_map_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			mapKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"mapKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\155\141\160\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x6d\x61\x70\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x6d\x61\x70\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_tail_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			tailKwd,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"tailKwd",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\164\141\151\154\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x74\x61\x69\x6c\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x74\x61\x69\x6c\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_assignment_map_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsSign,
			mapKwd,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsSign",
			"mapKwd",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\000",
			"\155\141\160\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x20\x6d\x61\x70\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x20\x6d\x61\x70\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_tail_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			tailKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"tailKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\164\141\151\154\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x74\x61\x69\x6c\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x74\x61\x69\x6c\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_plus_filter_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			filterKwd,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"filterKwd",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\146\151\154\164\145\162\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x20\x66\x69\x6c\x74\x65\x72\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x20\x66\x69\x6c\x74\x65\x72\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_null_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			nullKwd,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"nullKwd",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\156\165\154\154\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x6e\x75\x6c\x6c\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x6e\x75\x6c\x6c\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_map_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			mapKwd,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"mapKwd",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\155\141\160\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x6d\x61\x70\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x6d\x61\x70\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_subtraction_tail_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			tailKwd,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"tailKwd",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\164\141\151\154\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x20\x74\x61\x69\x6c\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x20\x74\x61\x69\x6c\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_rbrace_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			rightParen,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"rightParen",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\051\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x29\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x29\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_rbrace_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			rightParen,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"rightParen",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\051\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x29\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x29\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_rbrace_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			rightParen,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"rightParen",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\051\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x29\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x29\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_lparen_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			leftParen,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"leftParen",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\050\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x28\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x28\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_lparen_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			leftParen,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"leftParen",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\050\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x28\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x28\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_rbrace_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			rightParen,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"rightParen",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\051\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x29\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x29\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_lbrace_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			leftParen,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"leftParen",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\050\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x28\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x28\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_lparen_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			leftParen,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"leftParen",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\050\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x28\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x28\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_lbrace_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			leftParen,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"leftParen",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\050\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x28\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x28\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_rbrace_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			rightParen,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"rightParen",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\051\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x29\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x29\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_lbrace_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			leftParen,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"leftParen",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\050\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x28\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x28\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_greaterthan_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			rightAngle,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"rightAngle",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\076\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x3e\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x3e\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_lessthan_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			leftAngle,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"leftAngle",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\074\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x3c\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x3c\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_greaterthan_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			rightAngle,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"rightAngle",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\076\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x3e\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x3e\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_greaterthan_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			rightAngle,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"rightAngle",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\076\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x3e\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x3e\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_lbracket_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			leftSquare,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"leftSquare",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\133\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x5b\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x5b\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_lbracket_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			leftSquare,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"leftSquare",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\133\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x5b\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x5b\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_lbracket_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			leftSquare,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"leftSquare",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\133\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x5b\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x5b\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_lessthan_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			leftAngle,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"leftAngle",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\074\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x3c\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x3c\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_rbracket_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			rightSquare,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"rightSquare",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\135\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x5d\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x5d\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_rbracket_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			rightSquare,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"rightSquare",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\135\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x5d\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x5d\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_lessthan_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			leftAngle,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"leftAngle",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\074\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x3c\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x3c\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_colon_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			colon,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"colon",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\072\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x3a\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x3a\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_semicolon_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			semiColon,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"semiColon",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\073\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x3b\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x3b\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_comma_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			comma,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"comma",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\054\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x2c\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x2c\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_comma_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			comma,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"comma",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\054\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x2c\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x2c\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_doublecolon_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			colonColon,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"colonColon",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\072\072\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x3a\x3a\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x3a\x3a\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_colon_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			colon,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"colon",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\072\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x3a\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x3a\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_comma_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			comma,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"comma",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\054\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x2c\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x2c\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_colon_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			colon,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"colon",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\072\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x3a\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x3a\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_doublecolon_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			colonColon,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"colonColon",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\072\072\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x3a\x3a\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x3a\x3a\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_doublecolon_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			colonColon,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"colonColon",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\072\072\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x3a\x3a\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x3a\x3a\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_semicolon_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			semiColon,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"semiColon",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\073\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x3b\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x3b\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_subtraction_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			dash,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"dash",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\055\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x2d\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x2d\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_subtraction_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			dash,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"dash",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\055\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x2d\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x2d\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_multiplication_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			star,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"star",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\052\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x2a\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x2a\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_plus_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			plusSign,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"plusSign",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\053\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x2b\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x2b\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_plus_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			plusSign,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"plusSign",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\053\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x2b\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x2b\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_plus_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			plusSign,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"plusSign",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\053\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x2b\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x2b\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_assignment_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			equalsSign,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"equalsSign",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\075\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x3d\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x3d\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_assignment_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			equalsSign,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"equalsSign",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\075\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x3d\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x3d\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_assignment_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			equalsSign,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"equalsSign",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\075\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x3d\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x3d\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_subtraction_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			dash,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"dash",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\055\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x2d\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x2d\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_multiplication_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			star,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"star",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\052\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x2a\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x2a\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_equals_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			equalsEquals,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"equalsEquals",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\075\075\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x3d\x3d\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x3d\x3d\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_doublebackslash_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			backSlash,
			backSlash,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"backSlash",
			"backSlash",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\134\000",
			"\134\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x5c\x5c\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x5c\x5c\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_equals_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			equalsEquals,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"equalsEquals",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\075\075\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x3d\x3d\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x3d\x3d\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_doublebackslash_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			backSlash,
			backSlash,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"backSlash",
			"backSlash",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\134\000",
			"\134\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x5c\x5c\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x5c\x5c\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_arrow_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			arrow,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"arrow",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\055\076\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x2d\x3e\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x2d\x3e\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_equals_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			equalsEquals,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"equalsEquals",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\075\075\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x3d\x3d\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x3d\x3d\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_doublebackslash_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			backSlash,
			backSlash,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"backSlash",
			"backSlash",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\134\000",
			"\134\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x5c\x5c\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x5c\x5c\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_division_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			forwardSlash,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"forwardSlash",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\057\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x2f\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x2f\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_division_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			forwardSlash,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"forwardSlash",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\057\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x2f\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x2f\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_doublebackslash_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			backSlash,
			backSlash,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"backSlash",
			"backSlash",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\134\000",
			"\134\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x5c\x5c\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x5c\x5c\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_division_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			forwardSlash,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"forwardSlash",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\057\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x2f\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x2f\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_geq_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			greaterThanEquals,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"greaterThanEquals",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\076\075\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x3e\x3d\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x3e\x3d\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_leq_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			lessThanEquals,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"lessThanEquals",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\074\075\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x3c\x3d\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x3c\x3d\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_notequal_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			notEquals,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"notEquals",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\041\075\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x21\x3d\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x21\x3d\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_leq_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			lessThanEquals,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"lessThanEquals",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\074\075\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x3c\x3d\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x3c\x3d\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_notequal_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			notEquals,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"notEquals",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\041\075\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x21\x3d\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x21\x3d\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_doubleplus_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			plusPlus,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"plusPlus",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\053\053\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x2b\x2b\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x2b\x2b\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_leq_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			lessThanEquals,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"lessThanEquals",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\074\075\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x3c\x3d\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x3c\x3d\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_geq_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			greaterThanEquals,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"greaterThanEquals",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\076\075\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x3e\x3d\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x3e\x3d\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_leq_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			lessThanEquals,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"lessThanEquals",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\074\075\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x3c\x3d\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x3c\x3d\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_leq_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			lessThanEquals,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"lessThanEquals",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\074\075\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x3c\x3d\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x3c\x3d\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_leq_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			lessThanEquals,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"lessThanEquals",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\074\075\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x3c\x3d\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x3c\x3d\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_main_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			variableName,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"variableName",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\155\141\151\156\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x6d\x61\x69\x6e\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x6d\x61\x69\x6e\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_in_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			inKwd,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"inKwd",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\151\156\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x69\x6e\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x69\x6e\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_in_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			inKwd,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"inKwd",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\151\156\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x69\x6e\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x69\x6e\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_doubledot_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			dotDot,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"dotDot",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\056\056\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x2e\x2e\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x2e\x2e\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_in_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			inKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"inKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\151\156\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x69\x6e\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x69\x6e\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_doubledot_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			dotDot,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"dotDot",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\056\056\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x2e\x2e\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x2e\x2e\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_in_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			inKwd,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"inKwd",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\151\156\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x69\x6e\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x69\x6e\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_in_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			inKwd,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"inKwd",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\151\156\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x69\x6e\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x69\x6e\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_doubledot_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			dotDot,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"dotDot",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\056\056\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x2e\x2e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x2e\x2e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_main_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			variableName,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"variableName",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\155\141\151\156\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x6d\x61\x69\x6e\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x6d\x61\x69\x6e\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_doubledot_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			dotDot,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"dotDot",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\056\056\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x2e\x2e\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x2e\x2e\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_else_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			elseKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"elseKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\145\154\163\145\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x65\x6c\x73\x65\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x65\x6c\x73\x65\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_print_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			printKwd,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"printKwd",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\160\162\151\156\164\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x70\x72\x69\x6e\x74\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x70\x72\x69\x6e\x74\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_read_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			readKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"readKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\162\145\141\144\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x72\x65\x61\x64\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x72\x65\x61\x64\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_read_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			readKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"readKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\162\145\141\144\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x72\x65\x61\x64\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x72\x65\x61\x64\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_then_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			thenKwd,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"thenKwd",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\164\150\145\156\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x74\x68\x65\x6e\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x74\x68\x65\x6e\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_print_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			printKwd,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"printKwd",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\160\162\151\156\164\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x70\x72\x69\x6e\x74\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x70\x72\x69\x6e\x74\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_then_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			thenKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"thenKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\164\150\145\156\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x74\x68\x65\x6e\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x74\x68\x65\x6e\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_print_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			printKwd,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"printKwd",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\160\162\151\156\164\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x70\x72\x69\x6e\x74\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x70\x72\x69\x6e\x74\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_read_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			readKwd,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"readKwd",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\162\145\141\144\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x72\x65\x61\x64\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x72\x65\x61\x64\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_else_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			elseKwd,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"elseKwd",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\145\154\163\145\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x65\x6c\x73\x65\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x65\x6c\x73\x65\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_else_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			elseKwd,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"elseKwd",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\145\154\163\145\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x65\x6c\x73\x65\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x65\x6c\x73\x65\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_Float_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			floatKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"floatKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\106\154\157\141\164\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x46\x6c\x6f\x61\x74\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x46\x6c\x6f\x61\x74\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_write_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			writeKwd,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"writeKwd",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\167\162\151\164\145\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x77\x72\x69\x74\x65\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x77\x72\x69\x74\x65\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_Boolean_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			booleanKwd,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"booleanKwd",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\102\157\157\154\145\141\156\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_write_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			writeKwd,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"writeKwd",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\167\162\151\164\145\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x77\x72\x69\x74\x65\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x77\x72\x69\x74\x65\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_Float_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			floatKwd,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"floatKwd",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\106\154\157\141\164\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x46\x6c\x6f\x61\x74\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x46\x6c\x6f\x61\x74\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_Boolean_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			booleanKwd,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"booleanKwd",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\102\157\157\154\145\141\156\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_Float_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			floatKwd,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"floatKwd",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\106\154\157\141\164\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x46\x6c\x6f\x61\x74\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x46\x6c\x6f\x61\x74\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_Integer_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			integerKwd,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"integerKwd",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\111\156\164\145\147\145\162\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_Boolean_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			booleanKwd,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"booleanKwd",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\102\157\157\154\145\141\156\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_Integer_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			integerKwd,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"integerKwd",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\111\156\164\145\147\145\162\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_Integer_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			integerKwd,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"integerKwd",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\111\156\164\145\147\145\162\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_head_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			headKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"headKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\150\145\141\144\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x68\x65\x61\x64\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x68\x65\x61\x64\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_true_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			trueKwd,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"trueKwd",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\164\162\165\145\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x74\x72\x75\x65\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x74\x72\x75\x65\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_String_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			stringKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"stringKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\123\164\162\151\156\147\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x53\x74\x72\x69\x6e\x67\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x53\x74\x72\x69\x6e\x67\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_false_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			falseKwd,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"falseKwd",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\146\141\154\163\145\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x66\x61\x6c\x73\x65\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x66\x61\x6c\x73\x65\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_String_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			stringKwd,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"stringKwd",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\123\164\162\151\156\147\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x53\x74\x72\x69\x6e\x67\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x53\x74\x72\x69\x6e\x67\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_true_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			trueKwd,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"trueKwd",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\164\162\165\145\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x74\x72\x75\x65\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x74\x72\x75\x65\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_String_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			stringKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"stringKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\123\164\162\151\156\147\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x53\x74\x72\x69\x6e\x67\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x53\x74\x72\x69\x6e\x67\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_false_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			falseKwd,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"falseKwd",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\146\141\154\163\145\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x66\x61\x6c\x73\x65\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x66\x61\x6c\x73\x65\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_false_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			falseKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"falseKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\146\141\154\163\145\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x66\x61\x6c\x73\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x66\x61\x6c\x73\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_head_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			headKwd,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"headKwd",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\150\145\141\144\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x68\x65\x61\x64\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x68\x65\x61\x64\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_true_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			trueKwd,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"trueKwd",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\164\162\165\145\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x74\x72\x75\x65\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x74\x72\x75\x65\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_null_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			nullKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"nullKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\156\165\154\154\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x6e\x75\x6c\x6c\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x6e\x75\x6c\x6c\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_filter_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			filterKwd,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"filterKwd",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\146\151\154\164\145\162\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x66\x69\x6c\x74\x65\x72\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x66\x69\x6c\x74\x65\x72\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_filter_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			filterKwd,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"filterKwd",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\146\151\154\164\145\162\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x66\x69\x6c\x74\x65\x72\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x66\x69\x6c\x74\x65\x72\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_division_filter_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			filterKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"filterKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\146\151\154\164\145\162\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2f\x20\x66\x69\x6c\x74\x65\x72\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x20\x66\x69\x6c\x74\x65\x72\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_map_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			mapKwd,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"mapKwd",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\155\141\160\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x6d\x61\x70\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x6d\x61\x70\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_filter_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			filterKwd,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"filterKwd",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\146\151\154\164\145\162\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x66\x69\x6c\x74\x65\x72\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x66\x69\x6c\x74\x65\x72\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_map_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			mapKwd,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"mapKwd",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\155\141\160\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x6d\x61\x70\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x6d\x61\x70\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_null_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			nullKwd,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"nullKwd",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\156\165\154\154\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x6e\x75\x6c\x6c\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x6e\x75\x6c\x6c\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_arrow_filter_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			arrow,
			filterKwd,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"arrow",
			"filterKwd",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\076\000",
			"\146\151\154\164\145\162\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2d\x3e\x20\x66\x69\x6c\x74\x65\x72\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x3e\x20\x66\x69\x6c\x74\x65\x72\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_equals_map_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			equalsEquals,
			mapKwd,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"equalsEquals",
			"mapKwd",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\075\075\000",
			"\155\141\160\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3d\x3d\x20\x6d\x61\x70\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3d\x3d\x20\x6d\x61\x70\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doublebackslash_filter_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			backSlash,
			filterKwd,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"backSlash",
			"filterKwd",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\134\000",
			"\146\151\154\164\145\162\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x5c\x5c\x20\x66\x69\x6c\x74\x65\x72\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x5c\x20\x66\x69\x6c\x74\x65\x72\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_lbrace_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			leftParen,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"leftParen",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\050\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x28\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x28\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_lbrace_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			leftParen,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"leftParen",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\050\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x28\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x28\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_rbrace_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			rightParen,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"rightParen",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\051\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x29\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x29\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_rparen_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			rightParen,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"rightParen",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\051\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x29\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x29\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_rbrace_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			rightParen,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"rightParen",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\051\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x29\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x29\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_lparen_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			leftParen,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"leftParen",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\050\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x28\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x28\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_rparen_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			rightParen,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"rightParen",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\051\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x29\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x29\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_lparen_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			leftParen,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"leftParen",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\050\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x28\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x28\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_lbrace_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			leftParen,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"leftParen",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\050\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x28\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x28\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_rparen_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			rightParen,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"rightParen",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\051\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x29\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x29\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_lbrace_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			leftParen,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"leftParen",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\050\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x28\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x28\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_lessthan_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			leftAngle,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"leftAngle",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\074\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x3c\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x3c\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_lessthan_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			leftAngle,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"leftAngle",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\074\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x3c\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x3c\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_lessthan_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			leftAngle,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"leftAngle",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\074\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x3c\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x3c\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_lessthan_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			leftAngle,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"leftAngle",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\074\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x3c\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x3c\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_greaterthan_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			rightAngle,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"rightAngle",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\076\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x3e\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x3e\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_lessthan_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			leftAngle,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"leftAngle",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\074\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x3c\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x3c\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_lessthan_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			leftAngle,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"leftAngle",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\074\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x3c\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x3c\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_lbracket_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			leftSquare,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"leftSquare",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\133\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x5b\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x5b\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_rbracket_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			rightSquare,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"rightSquare",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\135\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x5d\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x5d\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_lbracket_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			leftSquare,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"leftSquare",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\133\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x5b\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x5b\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_lessthan_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			leftAngle,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"leftAngle",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\074\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x3c\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x3c\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_semicolon_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			semiColon,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"semiColon",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\073\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x3b\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x3b\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_comma_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			comma,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"comma",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\054\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x2c\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x2c\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_colon_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			colon,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"colon",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\072\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x3a\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x3a\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_doublecolon_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			colonColon,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"colonColon",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\072\072\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x3a\x3a\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x3a\x3a\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_doublecolon_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			colonColon,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"colonColon",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\072\072\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x3a\x3a\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x3a\x3a\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_semicolon_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			semiColon,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"semiColon",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\073\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x3b\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x3b\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_semicolon_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			semiColon,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"semiColon",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\073\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x3b\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x3b\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_semicolon_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			semiColon,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"semiColon",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\073\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x3b\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x3b\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_colon_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			colon,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"colon",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\072\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x3a\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x3a\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_comma_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			comma,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"comma",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\054\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x2c\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x2c\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_comma_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			comma,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"comma",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\054\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x2c\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x2c\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_multiplication_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			star,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"star",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\052\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x2a\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x2a\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_multiplication_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			star,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"star",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\052\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x2a\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x2a\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_multiplication_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			star,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"star",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\052\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x2a\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x2a\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_subtraction_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			dash,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"dash",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\055\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x2d\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x2d\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_multiplication_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			star,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"star",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\052\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x2a\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x2a\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_assignment_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			equalsSign,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"equalsSign",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\075\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x3d\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x3d\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_subtraction_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			dash,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"dash",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\055\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x2d\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x2d\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_subtraction_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			dash,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"dash",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\055\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x2d\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x2d\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_plus_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			plusSign,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"plusSign",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\053\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x2b\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x2b\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_multiplication_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			star,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"star",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\052\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x2a\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x2a\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_multiplication_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			star,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"star",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\052\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x2a\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x2a\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_arrow_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			arrow,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"arrow",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\055\076\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x2d\x3e\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x2d\x3e\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_equals_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			equalsEquals,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"equalsEquals",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\075\075\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x3d\x3d\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x3d\x3d\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_equals_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			equalsEquals,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"equalsEquals",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\075\075\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x3d\x3d\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x3d\x3d\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_doublebackslash_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			backSlash,
			backSlash,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"backSlash",
			"backSlash",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\134\000",
			"\134\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x5c\x5c\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x5c\x5c\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_doublebackslash_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			backSlash,
			backSlash,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"backSlash",
			"backSlash",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\134\000",
			"\134\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x5c\x5c\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x5c\x5c\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_equals_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			equalsEquals,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"equalsEquals",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\075\075\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x3d\x3d\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x3d\x3d\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_division_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			forwardSlash,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"forwardSlash",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\057\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x2f\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x2f\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_division_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			forwardSlash,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"forwardSlash",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\057\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x2f\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x2f\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_doublebackslash_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			backSlash,
			backSlash,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"backSlash",
			"backSlash",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\134\000",
			"\134\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x5c\x5c\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x5c\x5c\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_arrow_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			arrow,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"arrow",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\055\076\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x2d\x3e\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x2d\x3e\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_doublebackslash_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			backSlash,
			backSlash,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"backSlash",
			"backSlash",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\134\000",
			"\134\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x5c\x5c\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x5c\x5c\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_doubleplus_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			plusPlus,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"plusPlus",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\053\053\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x2b\x2b\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x2b\x2b\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_notequal_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			notEquals,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"notEquals",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\041\075\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x21\x3d\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x21\x3d\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_notequal_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			notEquals,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"notEquals",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\041\075\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x21\x3d\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x21\x3d\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_leq_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			lessThanEquals,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"lessThanEquals",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\074\075\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x3c\x3d\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x3c\x3d\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_notequal_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			notEquals,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"notEquals",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\041\075\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x21\x3d\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x21\x3d\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_leq_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			lessThanEquals,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"lessThanEquals",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\074\075\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x3c\x3d\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x3c\x3d\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_geq_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			greaterThanEquals,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"greaterThanEquals",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\076\075\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x3e\x3d\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x3e\x3d\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_notequal_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			notEquals,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"notEquals",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\041\075\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x21\x3d\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x21\x3d\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_notequal_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			notEquals,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"notEquals",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\041\075\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x21\x3d\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x21\x3d\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_notequal_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			notEquals,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"notEquals",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\041\075\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x21\x3d\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x21\x3d\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_doubleplus_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			plusPlus,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"plusPlus",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\053\053\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x2b\x2b\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x2b\x2b\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_if_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			ifKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"ifKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\151\146\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x69\x66\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x69\x66\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_main_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			variableName,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"variableName",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\155\141\151\156\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x6d\x61\x69\x6e\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x6d\x61\x69\x6e\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_main_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			variableName,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"variableName",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\155\141\151\156\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x6d\x61\x69\x6e\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x6d\x61\x69\x6e\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_if_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			ifKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"ifKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\151\146\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x69\x66\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x69\x66\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_main_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			variableName,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"variableName",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\155\141\151\156\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x6d\x61\x69\x6e\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x6d\x61\x69\x6e\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_main_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			variableName,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"variableName",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\155\141\151\156\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x6d\x61\x69\x6e\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x6d\x61\x69\x6e\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_in_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			inKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"inKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\151\156\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x69\x6e\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x69\x6e\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_doubledot_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			dotDot,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"dotDot",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\056\056\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x2e\x2e\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x2e\x2e\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_main_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			variableName,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"variableName",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\155\141\151\156\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x6d\x61\x69\x6e\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x6d\x61\x69\x6e\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_in_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			inKwd,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"inKwd",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\151\156\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x69\x6e\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x69\x6e\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_doubledot_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			dotDot,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"dotDot",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\056\056\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x2e\x2e\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x2e\x2e\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_then_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			thenKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"thenKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\164\150\145\156\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x74\x68\x65\x6e\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x74\x68\x65\x6e\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_read_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			readKwd,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"readKwd",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\162\145\141\144\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x72\x65\x61\x64\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x72\x65\x61\x64\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_print_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			printKwd,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"printKwd",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\160\162\151\156\164\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x70\x72\x69\x6e\x74\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x70\x72\x69\x6e\x74\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_else_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			elseKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"elseKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\145\154\163\145\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x65\x6c\x73\x65\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x65\x6c\x73\x65\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_print_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			printKwd,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"printKwd",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\160\162\151\156\164\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x70\x72\x69\x6e\x74\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x70\x72\x69\x6e\x74\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_else_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			elseKwd,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"elseKwd",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\145\154\163\145\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x65\x6c\x73\x65\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x65\x6c\x73\x65\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_else_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			elseKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"elseKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\145\154\163\145\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x65\x6c\x73\x65\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x65\x6c\x73\x65\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_read_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			readKwd,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"readKwd",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\162\145\141\144\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x72\x65\x61\x64\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x72\x65\x61\x64\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_print_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			printKwd,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"printKwd",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\160\162\151\156\164\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x70\x72\x69\x6e\x74\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x70\x72\x69\x6e\x74\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_print_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			printKwd,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"printKwd",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\160\162\151\156\164\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x70\x72\x69\x6e\x74\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x70\x72\x69\x6e\x74\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_else_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			elseKwd,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"elseKwd",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\145\154\163\145\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x65\x6c\x73\x65\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x65\x6c\x73\x65\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_Integer_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			integerKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"integerKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\111\156\164\145\147\145\162\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_Boolean_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			booleanKwd,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"booleanKwd",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\102\157\157\154\145\141\156\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_Integer_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			integerKwd,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"integerKwd",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\111\156\164\145\147\145\162\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_write_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			writeKwd,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"writeKwd",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\167\162\151\164\145\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x77\x72\x69\x74\x65\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x77\x72\x69\x74\x65\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_write_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			writeKwd,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"writeKwd",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\167\162\151\164\145\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x77\x72\x69\x74\x65\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x77\x72\x69\x74\x65\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_write_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			writeKwd,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"writeKwd",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\167\162\151\164\145\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x77\x72\x69\x74\x65\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x77\x72\x69\x74\x65\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_Integer_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			integerKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"integerKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\111\156\164\145\147\145\162\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_Boolean_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			booleanKwd,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"booleanKwd",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\102\157\157\154\145\141\156\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_Integer_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			integerKwd,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"integerKwd",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\111\156\164\145\147\145\162\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_Boolean_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			booleanKwd,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"booleanKwd",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\102\157\157\154\145\141\156\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_Float_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			floatKwd,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"floatKwd",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\106\154\157\141\164\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x46\x6c\x6f\x61\x74\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x46\x6c\x6f\x61\x74\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_head_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			headKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"headKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\150\145\141\144\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x68\x65\x61\x64\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x68\x65\x61\x64\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_true_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			trueKwd,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"trueKwd",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\164\162\165\145\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x74\x72\x75\x65\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x74\x72\x75\x65\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_false_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			falseKwd,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"falseKwd",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\146\141\154\163\145\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x66\x61\x6c\x73\x65\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x66\x61\x6c\x73\x65\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_String_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			stringKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"stringKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\123\164\162\151\156\147\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x53\x74\x72\x69\x6e\x67\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x53\x74\x72\x69\x6e\x67\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_String_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			stringKwd,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"stringKwd",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\123\164\162\151\156\147\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x53\x74\x72\x69\x6e\x67\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x53\x74\x72\x69\x6e\x67\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_String_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			stringKwd,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"stringKwd",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\123\164\162\151\156\147\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x53\x74\x72\x69\x6e\x67\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x53\x74\x72\x69\x6e\x67\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_head_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			headKwd,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"headKwd",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\150\145\141\144\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x68\x65\x61\x64\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x68\x65\x61\x64\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_false_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			falseKwd,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"falseKwd",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\146\141\154\163\145\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x66\x61\x6c\x73\x65\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x66\x61\x6c\x73\x65\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubleplus_String_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusPlus,
			stringKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusPlus",
			"stringKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\053\000",
			"\123\164\162\151\156\147\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2b\x2b\x20\x53\x74\x72\x69\x6e\x67\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x2b\x20\x53\x74\x72\x69\x6e\x67\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_true_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			trueKwd,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"trueKwd",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\164\162\165\145\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x74\x72\x75\x65\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x74\x72\x75\x65\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_true_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			trueKwd,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"trueKwd",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\164\162\165\145\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x74\x72\x75\x65\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x74\x72\x75\x65\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_map_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			mapKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"mapKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\155\141\160\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x6d\x61\x70\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x6d\x61\x70\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_filter_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			filterKwd,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"filterKwd",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\146\151\154\164\145\162\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x66\x69\x6c\x74\x65\x72\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x66\x69\x6c\x74\x65\x72\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_filter_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			filterKwd,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"filterKwd",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\146\151\154\164\145\162\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x66\x69\x6c\x74\x65\x72\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x66\x69\x6c\x74\x65\x72\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_tail_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			tailKwd,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"tailKwd",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\164\141\151\154\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x74\x61\x69\x6c\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x74\x61\x69\x6c\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_map_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			mapKwd,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"mapKwd",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\155\141\160\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x6d\x61\x70\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x6d\x61\x70\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_leq_map_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lessThanEquals,
			mapKwd,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"lessThanEquals",
			"mapKwd",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\075\000",
			"\155\141\160\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3c\x3d\x20\x6d\x61\x70\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x3d\x20\x6d\x61\x70\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_null_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			nullKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"nullKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\156\165\154\154\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x6e\x75\x6c\x6c\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x6e\x75\x6c\x6c\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_filter_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			filterKwd,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"filterKwd",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\146\151\154\164\145\162\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x66\x69\x6c\x74\x65\x72\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x66\x69\x6c\x74\x65\x72\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_map_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			mapKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"mapKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\155\141\160\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x6d\x61\x70\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x6d\x61\x70\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_notequal_tail_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			notEquals,
			tailKwd,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"notEquals",
			"tailKwd",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\075\000",
			"\164\141\151\154\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x21\x3d\x20\x74\x61\x69\x6c\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x3d\x20\x74\x61\x69\x6c\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_geq_tail_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			greaterThanEquals,
			tailKwd,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"greaterThanEquals",
			"tailKwd",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\075\000",
			"\164\141\151\154\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x3e\x3d\x20\x74\x61\x69\x6c\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x3d\x20\x74\x61\x69\x6c\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_lbrace_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftParen,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftParen",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\050\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x28\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x28\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_rparen_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			rightParen,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"rightParen",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\051\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x29\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x29\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_rparen_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			rightParen,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"rightParen",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\051\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x29\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x29\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_rbrace_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			rightParen,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"rightParen",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\051\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x29\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x29\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_rparen_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			rightParen,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"rightParen",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\051\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x29\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x29\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_lparen_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			leftParen,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"leftParen",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\050\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x28\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x28\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_lbrace_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftParen,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftParen",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\050\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x28\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x28\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_lparen_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftParen,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftParen",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\050\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x28\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x28\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_lparen_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftParen,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftParen",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\050\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x28\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x28\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_rparen_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			rightParen,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"rightParen",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\051\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x29\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x29\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_rbrace_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			rightParen,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"rightParen",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\051\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x29\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x29\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_greaterthan_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			rightAngle,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"rightAngle",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\076\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x3e\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x3e\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_rbracket_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			rightSquare,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"rightSquare",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\135\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x5d\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x5d\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_rbracket_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			rightSquare,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"rightSquare",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\135\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x5d\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x5d\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_lessthan_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			leftAngle,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"leftAngle",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\074\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x3c\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x3c\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_lbracket_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			leftSquare,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"leftSquare",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\133\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x5b\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x5b\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_lbracket_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftSquare,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftSquare",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\133\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x5b\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x5b\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_greaterthan_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			rightAngle,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"rightAngle",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\076\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x3e\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x3e\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_lessthan_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			leftAngle,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"leftAngle",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\074\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x3c\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x3c\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_greaterthan_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			rightAngle,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"rightAngle",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\076\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x3e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x3e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_lbracket_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftSquare,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftSquare",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\133\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x5b\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x5b\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_lessthan_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			leftAngle,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"leftAngle",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\074\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x3c\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x3c\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_colon_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			colon,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"colon",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\072\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x3a\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x3a\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_colon_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			colon,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"colon",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\072\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x3a\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x3a\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_comma_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			comma,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"comma",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\054\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x2c\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x2c\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_colon_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			colon,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"colon",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\072\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x3a\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x3a\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_semicolon_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			semiColon,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"semiColon",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\073\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x3b\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x3b\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_doublecolon_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			colonColon,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"colonColon",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\072\072\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x3a\x3a\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x3a\x3a\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_comma_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			comma,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"comma",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\054\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x2c\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x2c\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_semicolon_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			semiColon,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"semiColon",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\073\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x3b\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x3b\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_comma_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			comma,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"comma",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\054\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x2c\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x2c\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_doublecolon_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			colonColon,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"colonColon",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\072\072\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x3a\x3a\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x3a\x3a\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_doublecolon_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			colonColon,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"colonColon",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\072\072\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x3a\x3a\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x3a\x3a\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_assignment_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			equalsSign,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"equalsSign",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\075\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x3d\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x3d\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_multiplication_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			star,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"star",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\052\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x2a\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x2a\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_assignment_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			equalsSign,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"equalsSign",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\075\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x3d\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x3d\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_plus_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			plusSign,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"plusSign",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\053\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x2b\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x2b\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_plus_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			plusSign,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"plusSign",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\053\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x2b\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x2b\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_assignment_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			equalsSign,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"equalsSign",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\075\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x3d\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x3d\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_assignment_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			equalsSign,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"equalsSign",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\075\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x3d\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x3d\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_assignment_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			equalsSign,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"equalsSign",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\075\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x3d\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x3d\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_plus_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			plusSign,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"plusSign",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\053\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x2b\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x2b\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_assignment_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			equalsSign,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"equalsSign",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\075\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x3d\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x3d\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_assignment_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			equalsSign,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"equalsSign",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\075\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x3d\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x3d\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_doublebackslash_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			backSlash,
			backSlash,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"backSlash",
			"backSlash",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\134\000",
			"\134\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x5c\x5c\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x5c\x5c\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_arrow_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			arrow,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"arrow",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\055\076\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x2d\x3e\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x2d\x3e\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_arrow_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			arrow,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"arrow",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\055\076\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x2d\x3e\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x2d\x3e\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_equals_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			equalsEquals,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"equalsEquals",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\075\075\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x3d\x3d\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x3d\x3d\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_arrow_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			arrow,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"arrow",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\055\076\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x2d\x3e\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x2d\x3e\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_division_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			forwardSlash,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"forwardSlash",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\057\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x2f\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x2f\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_equals_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			equalsEquals,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"equalsEquals",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\075\075\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x3d\x3d\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x3d\x3d\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_equals_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			equalsEquals,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"equalsEquals",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\075\075\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x3d\x3d\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x3d\x3d\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_arrow_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			arrow,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"arrow",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\055\076\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x2d\x3e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x2d\x3e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_doublebackslash_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			backSlash,
			backSlash,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"backSlash",
			"backSlash",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\134\000",
			"\134\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x5c\x5c\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x5c\x5c\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_doublebackslash_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			backSlash,
			backSlash,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"backSlash",
			"backSlash",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\134\000",
			"\134\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x5c\x5c\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x5c\x5c\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_doubleplus_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			plusPlus,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"plusPlus",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\053\053\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x2b\x2b\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x2b\x2b\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_notequal_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			notEquals,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"notEquals",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\041\075\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x21\x3d\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x21\x3d\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_leq_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			lessThanEquals,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"lessThanEquals",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\074\075\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x3c\x3d\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x3c\x3d\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_leq_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			lessThanEquals,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"lessThanEquals",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\074\075\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x3c\x3d\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x3c\x3d\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_notequal_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			notEquals,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"notEquals",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\041\075\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x21\x3d\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x21\x3d\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_doubleplus_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			plusPlus,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"plusPlus",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\053\053\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x2b\x2b\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x2b\x2b\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_notequal_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			notEquals,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"notEquals",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\041\075\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x21\x3d\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x21\x3d\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_leq_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			lessThanEquals,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"lessThanEquals",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\074\075\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x3c\x3d\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x3c\x3d\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_doubleplus_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			plusPlus,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"plusPlus",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\053\053\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x2b\x2b\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x2b\x2b\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_notequal_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			notEquals,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"notEquals",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\041\075\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x21\x3d\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x21\x3d\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_notequal_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			notEquals,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"notEquals",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\041\075\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x21\x3d\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x21\x3d\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_if_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			ifKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"ifKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\151\146\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x69\x66\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x69\x66\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_if_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			ifKwd,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"ifKwd",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\151\146\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x69\x66\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x69\x66\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_main_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			variableName,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"variableName",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\155\141\151\156\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x6d\x61\x69\x6e\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x6d\x61\x69\x6e\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_doubledot_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			dotDot,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"dotDot",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\056\056\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x2e\x2e\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x2e\x2e\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_in_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			inKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"inKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\151\156\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x69\x6e\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x69\x6e\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_main_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			variableName,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"variableName",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\155\141\151\156\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x6d\x61\x69\x6e\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x6d\x61\x69\x6e\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_doubledot_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			dotDot,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"dotDot",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\056\056\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x2e\x2e\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x2e\x2e\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_if_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			ifKwd,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"ifKwd",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\151\146\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x69\x66\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x69\x66\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_in_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			inKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"inKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\151\156\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x69\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x69\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_main_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			variableName,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"variableName",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\155\141\151\156\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x6d\x61\x69\x6e\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x6d\x61\x69\x6e\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_doubledot_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			dotDot,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"dotDot",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\056\056\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x2e\x2e\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x2e\x2e\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_else_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			elseKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"elseKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\145\154\163\145\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x65\x6c\x73\x65\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x65\x6c\x73\x65\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_print_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			printKwd,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"printKwd",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\160\162\151\156\164\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x70\x72\x69\x6e\x74\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x70\x72\x69\x6e\x74\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_else_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			elseKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"elseKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\145\154\163\145\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x65\x6c\x73\x65\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x65\x6c\x73\x65\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_then_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			thenKwd,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"thenKwd",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\164\150\145\156\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x74\x68\x65\x6e\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x74\x68\x65\x6e\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_then_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			thenKwd,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"thenKwd",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\164\150\145\156\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x74\x68\x65\x6e\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x74\x68\x65\x6e\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_else_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			elseKwd,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"elseKwd",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\145\154\163\145\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x65\x6c\x73\x65\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x65\x6c\x73\x65\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_read_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			readKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"readKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\162\145\141\144\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x72\x65\x61\x64\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x72\x65\x61\x64\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_then_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			thenKwd,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"thenKwd",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\164\150\145\156\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x74\x68\x65\x6e\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x74\x68\x65\x6e\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_else_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			elseKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"elseKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\145\154\163\145\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x65\x6c\x73\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x65\x6c\x73\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_read_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			readKwd,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"readKwd",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\162\145\141\144\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x72\x65\x61\x64\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x72\x65\x61\x64\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_else_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			elseKwd,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"elseKwd",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\145\154\163\145\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x65\x6c\x73\x65\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x65\x6c\x73\x65\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_Integer_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			integerKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"integerKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\111\156\164\145\147\145\162\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_Boolean_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			booleanKwd,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"booleanKwd",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\102\157\157\154\145\141\156\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_Integer_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			integerKwd,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"integerKwd",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\111\156\164\145\147\145\162\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_Float_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			floatKwd,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"floatKwd",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\106\154\157\141\164\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x46\x6c\x6f\x61\x74\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x46\x6c\x6f\x61\x74\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_Integer_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			integerKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"integerKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\111\156\164\145\147\145\162\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_Boolean_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			booleanKwd,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"booleanKwd",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\102\157\157\154\145\141\156\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_Integer_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			integerKwd,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"integerKwd",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\111\156\164\145\147\145\162\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_Boolean_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			booleanKwd,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"booleanKwd",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\102\157\157\154\145\141\156\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_Integer_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			integerKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"integerKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\111\156\164\145\147\145\162\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_write_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			writeKwd,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"writeKwd",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\167\162\151\164\145\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x77\x72\x69\x74\x65\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x77\x72\x69\x74\x65\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_Boolean_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			booleanKwd,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"booleanKwd",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\102\157\157\154\145\141\156\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_String_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			stringKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"stringKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\123\164\162\151\156\147\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x53\x74\x72\x69\x6e\x67\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x53\x74\x72\x69\x6e\x67\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_false_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			falseKwd,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"falseKwd",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\146\141\154\163\145\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x66\x61\x6c\x73\x65\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x66\x61\x6c\x73\x65\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_String_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			stringKwd,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"stringKwd",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\123\164\162\151\156\147\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x53\x74\x72\x69\x6e\x67\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x53\x74\x72\x69\x6e\x67\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_true_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			trueKwd,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"trueKwd",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\164\162\165\145\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x74\x72\x75\x65\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x74\x72\x75\x65\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_false_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			falseKwd,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"falseKwd",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\146\141\154\163\145\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x66\x61\x6c\x73\x65\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x66\x61\x6c\x73\x65\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_false_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			falseKwd,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"falseKwd",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\146\141\154\163\145\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x66\x61\x6c\x73\x65\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x66\x61\x6c\x73\x65\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_String_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			stringKwd,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"stringKwd",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\123\164\162\151\156\147\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x53\x74\x72\x69\x6e\x67\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x53\x74\x72\x69\x6e\x67\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_true_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			trueKwd,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"trueKwd",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\164\162\165\145\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x74\x72\x75\x65\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x74\x72\x75\x65\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_false_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			falseKwd,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"falseKwd",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\146\141\154\163\145\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x66\x61\x6c\x73\x65\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x66\x61\x6c\x73\x65\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_true_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			trueKwd,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"trueKwd",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\164\162\165\145\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x74\x72\x75\x65\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x74\x72\x75\x65\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_false_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			falseKwd,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"falseKwd",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\146\141\154\163\145\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x66\x61\x6c\x73\x65\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x66\x61\x6c\x73\x65\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_tail_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			tailKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"tailKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\164\141\151\154\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x74\x61\x69\x6c\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x74\x61\x69\x6c\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_null_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			nullKwd,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"nullKwd",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\156\165\154\154\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x6e\x75\x6c\x6c\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x6e\x75\x6c\x6c\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_filter_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			filterKwd,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"filterKwd",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\146\151\154\164\145\162\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x66\x69\x6c\x74\x65\x72\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x66\x69\x6c\x74\x65\x72\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_null_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			nullKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"nullKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\156\165\154\154\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x6e\x75\x6c\x6c\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x6e\x75\x6c\x6c\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_if_null_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			ifKwd,
			nullKwd,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"ifKwd",
			"nullKwd",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\146\000",
			"\156\165\154\154\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x66\x20\x6e\x75\x6c\x6c\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x66\x20\x6e\x75\x6c\x6c\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_map_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			mapKwd,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"mapKwd",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\155\141\160\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x6d\x61\x70\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x6d\x61\x70\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_doubledot_null_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			nullKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"nullKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\156\165\154\154\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x2e\x2e\x20\x6e\x75\x6c\x6c\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x2e\x20\x6e\x75\x6c\x6c\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_in_filter_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			inKwd,
			filterKwd,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"inKwd",
			"filterKwd",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\156\000",
			"\146\151\154\164\145\162\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x69\x6e\x20\x66\x69\x6c\x74\x65\x72\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6e\x20\x66\x69\x6c\x74\x65\x72\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_map_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			mapKwd,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"mapKwd",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\155\141\160\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x6d\x61\x70\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x6d\x61\x70\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_tail_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			tailKwd,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"tailKwd",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\164\141\151\154\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x74\x61\x69\x6c\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x74\x61\x69\x6c\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_main_tail_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			tailKwd,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"tailKwd",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\151\156\000",
			"\164\141\151\154\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x69\x6e\x20\x74\x61\x69\x6c\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x69\x6e\x20\x74\x61\x69\x6c\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_rbrace_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			rightParen,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"rightParen",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\051\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x29\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x29\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_lbrace_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			leftParen,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"leftParen",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\050\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x28\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x28\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_rbrace_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			rightParen,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"rightParen",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\051\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x29\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x29\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_lbrace_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			leftParen,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"leftParen",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\050\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x28\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x28\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_rbrace_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			rightParen,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"rightParen",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\051\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x29\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x29\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_rbrace_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			rightParen,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"rightParen",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\051\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x29\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x29\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_lparen_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			leftParen,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"leftParen",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\050\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x28\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x28\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_lparen_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			leftParen,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"leftParen",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\050\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x28\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x28\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_rparen_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			rightParen,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"rightParen",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\051\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x29\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x29\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_rbrace_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			rightParen,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"rightParen",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\051\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x29\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x29\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_lbrace_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			leftParen,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"leftParen",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\050\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x28\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x28\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_rbracket_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			rightSquare,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"rightSquare",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\135\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x5d\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x5d\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_lessthan_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			leftAngle,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"leftAngle",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\074\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x3c\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x3c\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_lbracket_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			leftSquare,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"leftSquare",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\133\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x5b\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x5b\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_rbracket_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			rightSquare,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"rightSquare",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\135\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x5d\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x5d\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_lessthan_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			leftAngle,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"leftAngle",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\074\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x3c\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x3c\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_greaterthan_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			rightAngle,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"rightAngle",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\076\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x3e\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x3e\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_greaterthan_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			rightAngle,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"rightAngle",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\076\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x3e\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x3e\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_lbracket_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			leftSquare,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"leftSquare",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\133\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x5b\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x5b\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_rbracket_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			rightSquare,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"rightSquare",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\135\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x5d\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x5d\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_lbracket_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			leftSquare,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"leftSquare",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\133\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x5b\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x5b\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_lbracket_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			leftSquare,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"leftSquare",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\133\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x5b\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x5b\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_semicolon_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			semiColon,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"semiColon",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\073\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x3b\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x3b\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_colon_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			colon,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"colon",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\072\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x3a\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x3a\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_comma_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			comma,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"comma",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\054\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x2c\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x2c\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_semicolon_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			semiColon,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"semiColon",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\073\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x3b\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x3b\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_doublecolon_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			colonColon,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"colonColon",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\072\072\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x3a\x3a\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x3a\x3a\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_colon_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			colon,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"colon",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\072\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x3a\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x3a\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_colon_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			colon,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"colon",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\072\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x3a\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x3a\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_colon_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			colon,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"colon",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\072\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x3a\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x3a\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_doublecolon_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			colonColon,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"colonColon",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\072\072\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x3a\x3a\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x3a\x3a\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_semicolon_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			semiColon,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"semiColon",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\073\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x3b\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x3b\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_semicolon_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			semiColon,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"semiColon",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\073\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x3b\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x3b\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_subtraction_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			dash,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"dash",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\055\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x2d\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x2d\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_subtraction_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			dash,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"dash",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\055\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x2d\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x2d\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_multiplication_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			star,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"star",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\052\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x2a\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x2a\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_plus_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			plusSign,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"plusSign",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\053\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x2b\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x2b\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_assignment_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			equalsSign,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"equalsSign",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\075\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x3d\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x3d\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_multiplication_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			star,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"star",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\052\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x2a\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x2a\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_plus_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			plusSign,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"plusSign",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\053\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x2b\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x2b\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_subtraction_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			dash,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"dash",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\055\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x2d\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x2d\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_assignment_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			equalsSign,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"equalsSign",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\075\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x3d\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x3d\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_multiplication_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			star,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"star",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\052\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x2a\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x2a\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_plus_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			plusSign,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"plusSign",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\053\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x2b\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x2b\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_division_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			forwardSlash,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"forwardSlash",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\057\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x2f\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x2f\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_division_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			forwardSlash,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"forwardSlash",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\057\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x2f\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x2f\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_doublebackslash_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			backSlash,
			backSlash,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"backSlash",
			"backSlash",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\134\000",
			"\134\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x5c\x5c\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x5c\x5c\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_arrow_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			arrow,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"arrow",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\055\076\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x2d\x3e\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x2d\x3e\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_division_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			forwardSlash,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"forwardSlash",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\057\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x2f\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x2f\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_doublebackslash_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			backSlash,
			backSlash,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"backSlash",
			"backSlash",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\134\000",
			"\134\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x5c\x5c\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x5c\x5c\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_division_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			forwardSlash,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"forwardSlash",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\057\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x2f\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x2f\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_arrow_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			arrow,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"arrow",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\055\076\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x2d\x3e\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x2d\x3e\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_division_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			forwardSlash,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"forwardSlash",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\057\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x2f\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x2f\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_equals_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			equalsEquals,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"equalsEquals",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\075\075\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x3d\x3d\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x3d\x3d\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_division_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			forwardSlash,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"forwardSlash",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\057\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x2f\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x2f\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_leq_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			lessThanEquals,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"lessThanEquals",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\074\075\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x3c\x3d\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x3c\x3d\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_geq_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			greaterThanEquals,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"greaterThanEquals",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\076\075\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x3e\x3d\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x3e\x3d\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_doubleplus_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			plusPlus,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"plusPlus",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\053\053\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x2b\x2b\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x2b\x2b\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_notequal_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			notEquals,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"notEquals",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\041\075\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x21\x3d\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x21\x3d\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_geq_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			greaterThanEquals,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"greaterThanEquals",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\076\075\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x3e\x3d\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x3e\x3d\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_geq_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			greaterThanEquals,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"greaterThanEquals",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\076\075\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x3e\x3d\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x3e\x3d\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_notequal_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			notEquals,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"notEquals",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\041\075\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x21\x3d\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x21\x3d\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_geq_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			greaterThanEquals,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"greaterThanEquals",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\076\075\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x3e\x3d\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x3e\x3d\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_leq_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			lessThanEquals,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"lessThanEquals",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\074\075\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x3c\x3d\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x3c\x3d\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_notequal_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			notEquals,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"notEquals",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\041\075\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x21\x3d\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x21\x3d\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_geq_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			greaterThanEquals,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"greaterThanEquals",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\076\075\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x3e\x3d\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x3e\x3d\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_in_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			inKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"inKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\151\156\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x69\x6e\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x69\x6e\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_main_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			variableName,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"variableName",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\155\141\151\156\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x6d\x61\x69\x6e\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x6d\x61\x69\x6e\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_in_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			inKwd,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"inKwd",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\151\156\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x69\x6e\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x69\x6e\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_main_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			variableName,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"variableName",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\155\141\151\156\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x6d\x61\x69\x6e\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x6d\x61\x69\x6e\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_doubledot_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			dotDot,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"dotDot",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\056\056\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x2e\x2e\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x2e\x2e\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_doubledot_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			dotDot,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"dotDot",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\056\056\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x2e\x2e\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x2e\x2e\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_in_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			inKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"inKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\151\156\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x69\x6e\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x69\x6e\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_if_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			ifKwd,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"ifKwd",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\151\146\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x69\x66\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x69\x66\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_main_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			variableName,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"variableName",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\155\141\151\156\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x6d\x61\x69\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x6d\x61\x69\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_doubledot_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			dotDot,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"dotDot",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\056\056\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x2e\x2e\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x2e\x2e\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_in_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			inKwd,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"inKwd",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\151\156\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x69\x6e\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x69\x6e\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_then_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			thenKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"thenKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\164\150\145\156\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x74\x68\x65\x6e\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x74\x68\x65\x6e\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_print_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			printKwd,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"printKwd",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\160\162\151\156\164\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x70\x72\x69\x6e\x74\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x70\x72\x69\x6e\x74\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_else_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			elseKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"elseKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\145\154\163\145\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x65\x6c\x73\x65\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x65\x6c\x73\x65\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_else_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			elseKwd,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"elseKwd",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\145\154\163\145\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x65\x6c\x73\x65\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x65\x6c\x73\x65\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_then_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			thenKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"thenKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\164\150\145\156\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x74\x68\x65\x6e\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x74\x68\x65\x6e\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_print_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			printKwd,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"printKwd",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\160\162\151\156\164\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x70\x72\x69\x6e\x74\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x70\x72\x69\x6e\x74\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_then_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			thenKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"thenKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\164\150\145\156\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x74\x68\x65\x6e\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x74\x68\x65\x6e\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_then_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			thenKwd,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"thenKwd",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\164\150\145\156\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x74\x68\x65\x6e\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x74\x68\x65\x6e\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_else_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			elseKwd,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"elseKwd",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\145\154\163\145\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x65\x6c\x73\x65\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x65\x6c\x73\x65\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_read_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			readKwd,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"readKwd",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\162\145\141\144\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x72\x65\x61\x64\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x72\x65\x61\x64\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_then_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			thenKwd,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"thenKwd",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\164\150\145\156\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x74\x68\x65\x6e\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x74\x68\x65\x6e\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_Float_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			floatKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"floatKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\106\154\157\141\164\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x46\x6c\x6f\x61\x74\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x46\x6c\x6f\x61\x74\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_write_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			writeKwd,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"writeKwd",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\167\162\151\164\145\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x77\x72\x69\x74\x65\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x77\x72\x69\x74\x65\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_write_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			writeKwd,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"writeKwd",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\167\162\151\164\145\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x77\x72\x69\x74\x65\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x77\x72\x69\x74\x65\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_Boolean_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			booleanKwd,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"booleanKwd",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\102\157\157\154\145\141\156\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_Boolean_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			booleanKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"booleanKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\102\157\157\154\145\141\156\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_Float_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			floatKwd,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"floatKwd",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\106\154\157\141\164\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x46\x6c\x6f\x61\x74\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x46\x6c\x6f\x61\x74\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_Integer_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			integerKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"integerKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\111\156\164\145\147\145\162\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_Boolean_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			booleanKwd,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"booleanKwd",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\102\157\157\154\145\141\156\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_Integer_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			integerKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"integerKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\111\156\164\145\147\145\162\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_write_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			writeKwd,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"writeKwd",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\167\162\151\164\145\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x77\x72\x69\x74\x65\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x77\x72\x69\x74\x65\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_Boolean_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			booleanKwd,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"booleanKwd",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\102\157\157\154\145\141\156\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_false_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			falseKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"falseKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\146\141\154\163\145\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x66\x61\x6c\x73\x65\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x66\x61\x6c\x73\x65\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_head_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			headKwd,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"headKwd",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\150\145\141\144\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x68\x65\x61\x64\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x68\x65\x61\x64\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_true_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			trueKwd,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"trueKwd",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\164\162\165\145\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x74\x72\x75\x65\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x74\x72\x75\x65\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_head_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			headKwd,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"headKwd",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\150\145\141\144\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x68\x65\x61\x64\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x68\x65\x61\x64\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_String_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			stringKwd,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"stringKwd",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\123\164\162\151\156\147\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x53\x74\x72\x69\x6e\x67\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x53\x74\x72\x69\x6e\x67\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_true_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			trueKwd,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"trueKwd",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\164\162\165\145\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x74\x72\x75\x65\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x74\x72\x75\x65\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_false_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			falseKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"falseKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\146\141\154\163\145\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x66\x61\x6c\x73\x65\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x66\x61\x6c\x73\x65\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_false_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			falseKwd,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"falseKwd",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\146\141\154\163\145\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x66\x61\x6c\x73\x65\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x66\x61\x6c\x73\x65\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_false_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			falseKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"falseKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\146\141\154\163\145\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x66\x61\x6c\x73\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x66\x61\x6c\x73\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_true_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			trueKwd,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"trueKwd",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\164\162\165\145\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x74\x72\x75\x65\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x74\x72\x75\x65\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_head_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			headKwd,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"headKwd",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\150\145\141\144\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x68\x65\x61\x64\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x68\x65\x61\x64\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_map_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			mapKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"mapKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\155\141\160\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x6d\x61\x70\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x6d\x61\x70\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_null_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			nullKwd,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"nullKwd",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\156\165\154\154\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x6e\x75\x6c\x6c\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x6e\x75\x6c\x6c\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_print_tail_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			printKwd,
			tailKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"printKwd",
			"tailKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\162\151\156\164\000",
			"\164\141\151\154\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x70\x72\x69\x6e\x74\x20\x74\x61\x69\x6c\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x72\x69\x6e\x74\x20\x74\x61\x69\x6c\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_tail_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			tailKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"tailKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\164\141\151\154\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x74\x61\x69\x6c\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x74\x61\x69\x6c\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_filter_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			filterKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"filterKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\146\151\154\164\145\162\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x66\x69\x6c\x74\x65\x72\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x66\x69\x6c\x74\x65\x72\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_null_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			nullKwd,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"nullKwd",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\156\165\154\154\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x6e\x75\x6c\x6c\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x6e\x75\x6c\x6c\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_null_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			nullKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"nullKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\156\165\154\154\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x6e\x75\x6c\x6c\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x6e\x75\x6c\x6c\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_else_null_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			elseKwd,
			nullKwd,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"elseKwd",
			"nullKwd",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\154\163\145\000",
			"\156\165\154\154\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x65\x6c\x73\x65\x20\x6e\x75\x6c\x6c\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x6c\x73\x65\x20\x6e\x75\x6c\x6c\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_tail_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			tailKwd,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"tailKwd",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\164\141\151\154\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x74\x61\x69\x6c\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x74\x61\x69\x6c\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_read_filter_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			readKwd,
			filterKwd,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"readKwd",
			"filterKwd",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\145\141\144\000",
			"\146\151\154\164\145\162\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x72\x65\x61\x64\x20\x66\x69\x6c\x74\x65\x72\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x65\x61\x64\x20\x66\x69\x6c\x74\x65\x72\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_then_null_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			thenKwd,
			nullKwd,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"thenKwd",
			"nullKwd",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\145\156\000",
			"\156\165\154\154\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x68\x65\x6e\x20\x6e\x75\x6c\x6c\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x68\x65\x6e\x20\x6e\x75\x6c\x6c\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_rbrace_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			rightParen,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"rightParen",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\051\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x29\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x29\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_lbrace_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			leftParen,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"leftParen",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\050\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x28\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x28\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_lbrace_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			leftParen,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"leftParen",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\050\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x28\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x28\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_lbrace_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			leftParen,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"leftParen",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\050\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x28\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x28\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_rparen_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			rightParen,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"rightParen",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\051\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x29\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x29\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_rparen_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			rightParen,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"rightParen",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\051\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x29\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x29\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_rparen_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			rightParen,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"rightParen",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\051\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x29\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x29\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_lparen_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			leftParen,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"leftParen",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\050\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x28\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x28\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_rbrace_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			rightParen,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"rightParen",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\051\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x29\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x29\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_lbrace_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			leftParen,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"leftParen",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\050\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x28\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x28\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_lbrace_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			leftParen,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"leftParen",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\050\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x28\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x28\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_greaterthan_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			rightAngle,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"rightAngle",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\076\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x3e\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x3e\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_lbracket_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			leftSquare,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"leftSquare",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\133\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x5b\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x5b\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_lessthan_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			leftAngle,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"leftAngle",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\074\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x3c\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x3c\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_greaterthan_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			rightAngle,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"rightAngle",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\076\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x3e\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x3e\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_rbracket_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			rightSquare,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"rightSquare",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\135\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x5d\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x5d\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_lessthan_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			leftAngle,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"leftAngle",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\074\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x3c\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x3c\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_rbracket_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			rightSquare,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"rightSquare",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\135\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x5d\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x5d\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_lessthan_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			leftAngle,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"leftAngle",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\074\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3c\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3c\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_greaterthan_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			rightAngle,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"rightAngle",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\076\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x3e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x3e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_lbracket_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			leftSquare,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"leftSquare",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\133\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x5b\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x5b\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_greaterthan_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			rightAngle,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"rightAngle",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\076\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x3e\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x3e\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_colon_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			colon,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"colon",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\072\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x3a\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x3a\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_comma_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			comma,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"comma",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\054\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x2c\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x2c\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_doublecolon_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			colonColon,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"colonColon",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\072\072\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x3a\x3a\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x3a\x3a\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_doublecolon_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			colonColon,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"colonColon",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\072\072\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x3a\x3a\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x3a\x3a\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_comma_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			comma,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"comma",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\054\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x2c\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x2c\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_doublecolon_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			colonColon,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"colonColon",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\072\072\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3a\x3a\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3a\x3a\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_colon_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			colon,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"colon",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\072\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x3a\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x3a\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_semicolon_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			semiColon,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"semiColon",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\073\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x3b\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x3b\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_doublecolon_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			colonColon,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"colonColon",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\072\072\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x3a\x3a\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x3a\x3a\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_semicolon_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			semiColon,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"semiColon",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\073\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x3b\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x3b\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_comma_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			comma,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"comma",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\054\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x2c\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x2c\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_assignment_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			equalsSign,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"equalsSign",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\075\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x3d\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x3d\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_subtraction_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			dash,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"dash",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\055\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x2d\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x2d\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_subtraction_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			dash,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"dash",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\055\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x2d\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x2d\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_subtraction_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			dash,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"dash",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\055\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x2d\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x2d\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_multiplication_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			star,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"star",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\052\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x2a\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x2a\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_assignment_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			equalsSign,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"equalsSign",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\075\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x3d\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x3d\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_plus_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			plusSign,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"plusSign",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\053\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x2b\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x2b\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_multiplication_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			star,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"star",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\052\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x2a\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x2a\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_assignment_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			equalsSign,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"equalsSign",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\075\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3d\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3d\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_plus_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			plusSign,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"plusSign",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\053\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x2b\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x2b\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_multiplication_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			star,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"star",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\052\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x2a\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x2a\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_doublebackslash_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			backSlash,
			backSlash,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"backSlash",
			"backSlash",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\134\000",
			"\134\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x5c\x5c\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x5c\x5c\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_division_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			forwardSlash,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"forwardSlash",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\057\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x2f\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x2f\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_doublebackslash_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			backSlash,
			backSlash,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"backSlash",
			"backSlash",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\134\000",
			"\134\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x5c\x5c\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x5c\x5c\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_equals_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			equalsEquals,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"equalsEquals",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\075\075\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x3d\x3d\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x3d\x3d\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_equals_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			equalsEquals,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"equalsEquals",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\075\075\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x3d\x3d\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x3d\x3d\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_division_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			forwardSlash,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"forwardSlash",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\057\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2f\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2f\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_equals_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			equalsEquals,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"equalsEquals",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\075\075\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x3d\x3d\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x3d\x3d\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_equals_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			equalsEquals,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"equalsEquals",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\075\075\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x3d\x3d\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x3d\x3d\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_division_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			forwardSlash,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"forwardSlash",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\057\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x2f\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x2f\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_division_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			forwardSlash,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"forwardSlash",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\057\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x2f\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x2f\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_division_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			forwardSlash,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"forwardSlash",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\057\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x2f\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x2f\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_notequal_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			notEquals,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"notEquals",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\041\075\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x21\x3d\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x21\x3d\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_notequal_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			notEquals,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"notEquals",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\041\075\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x21\x3d\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x21\x3d\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_notequal_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			notEquals,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"notEquals",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\041\075\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x21\x3d\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x21\x3d\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_notequal_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			notEquals,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"notEquals",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\041\075\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x21\x3d\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x21\x3d\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_doubleplus_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			plusPlus,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"plusPlus",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\053\053\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x2b\x2b\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x2b\x2b\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_leq_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			lessThanEquals,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"lessThanEquals",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\074\075\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x3c\x3d\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x3c\x3d\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_doubleplus_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			plusPlus,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"plusPlus",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\053\053\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x2b\x2b\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x2b\x2b\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_geq_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			greaterThanEquals,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"greaterThanEquals",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\076\075\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x3e\x3d\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x3e\x3d\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_geq_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			greaterThanEquals,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"greaterThanEquals",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\076\075\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3e\x3d\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3e\x3d\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_doubleplus_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			plusPlus,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"plusPlus",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\053\053\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x2b\x2b\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x2b\x2b\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_leq_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			lessThanEquals,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"lessThanEquals",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\074\075\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3c\x3d\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3c\x3d\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_doubledot_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			dotDot,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"dotDot",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\056\056\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2e\x2e\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2e\x2e\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_main_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			variableName,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"variableName",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\155\141\151\156\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x6d\x61\x69\x6e\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x6d\x61\x69\x6e\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_if_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			ifKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"ifKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\151\146\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x69\x66\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x69\x66\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_main_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			variableName,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"variableName",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\155\141\151\156\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x6d\x61\x69\x6e\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x6d\x61\x69\x6e\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_if_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			ifKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"ifKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\151\146\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x69\x66\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x69\x66\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_if_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			ifKwd,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"ifKwd",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\151\146\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x69\x66\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x69\x66\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_in_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			inKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"inKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\151\156\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x69\x6e\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x69\x6e\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_main_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			variableName,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"variableName",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\155\141\151\156\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x6d\x61\x69\x6e\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x6d\x61\x69\x6e\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_doubledot_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			dotDot,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"dotDot",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\056\056\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x2e\x2e\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x2e\x2e\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_main_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			variableName,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"variableName",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\155\141\151\156\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x6d\x61\x69\x6e\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x6d\x61\x69\x6e\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_doubledot_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			dotDot,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"dotDot",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\056\056\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x2e\x2e\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x2e\x2e\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_read_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			readKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"readKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\162\145\141\144\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x72\x65\x61\x64\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x72\x65\x61\x64\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_read_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			readKwd,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"readKwd",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\162\145\141\144\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x72\x65\x61\x64\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x72\x65\x61\x64\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_then_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			thenKwd,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"thenKwd",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\164\150\145\156\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x74\x68\x65\x6e\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x74\x68\x65\x6e\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_print_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			printKwd,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"printKwd",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\160\162\151\156\164\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x70\x72\x69\x6e\x74\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x70\x72\x69\x6e\x74\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_print_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			printKwd,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"printKwd",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\160\162\151\156\164\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x70\x72\x69\x6e\x74\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x70\x72\x69\x6e\x74\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_print_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			printKwd,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"printKwd",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\160\162\151\156\164\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x70\x72\x69\x6e\x74\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x70\x72\x69\x6e\x74\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_then_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			thenKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"thenKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\164\150\145\156\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x74\x68\x65\x6e\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x74\x68\x65\x6e\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_then_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			thenKwd,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"thenKwd",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\164\150\145\156\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x74\x68\x65\x6e\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x74\x68\x65\x6e\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_print_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			printKwd,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"printKwd",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\160\162\151\156\164\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x70\x72\x69\x6e\x74\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x70\x72\x69\x6e\x74\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_print_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			printKwd,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"printKwd",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\160\162\151\156\164\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x70\x72\x69\x6e\x74\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x70\x72\x69\x6e\x74\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_else_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			elseKwd,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"elseKwd",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\145\154\163\145\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x65\x6c\x73\x65\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x65\x6c\x73\x65\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_Float_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			floatKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"floatKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\106\154\157\141\164\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x46\x6c\x6f\x61\x74\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x46\x6c\x6f\x61\x74\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_write_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			writeKwd,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"writeKwd",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\167\162\151\164\145\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x77\x72\x69\x74\x65\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x77\x72\x69\x74\x65\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_write_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			writeKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"writeKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\167\162\151\164\145\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x77\x72\x69\x74\x65\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x77\x72\x69\x74\x65\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_Boolean_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			booleanKwd,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"booleanKwd",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\102\157\157\154\145\141\156\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_Float_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			floatKwd,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"floatKwd",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\106\154\157\141\164\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x46\x6c\x6f\x61\x74\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x46\x6c\x6f\x61\x74\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_Boolean_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			booleanKwd,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"booleanKwd",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\102\157\157\154\145\141\156\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_Float_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			floatKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"floatKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\106\154\157\141\164\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x46\x6c\x6f\x61\x74\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x46\x6c\x6f\x61\x74\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_Float_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			floatKwd,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"floatKwd",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\106\154\157\141\164\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x46\x6c\x6f\x61\x74\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x46\x6c\x6f\x61\x74\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_Boolean_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			booleanKwd,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"booleanKwd",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\102\157\157\154\145\141\156\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_write_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			writeKwd,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"writeKwd",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\167\162\151\164\145\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x77\x72\x69\x74\x65\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x77\x72\x69\x74\x65\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_write_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			writeKwd,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"writeKwd",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\167\162\151\164\145\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x77\x72\x69\x74\x65\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x77\x72\x69\x74\x65\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_true_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			trueKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"trueKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\164\162\165\145\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x74\x72\x75\x65\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x74\x72\x75\x65\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_head_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			headKwd,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"headKwd",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\150\145\141\144\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x68\x65\x61\x64\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x68\x65\x61\x64\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_true_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			trueKwd,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"trueKwd",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\164\162\165\145\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x72\x75\x65\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x72\x75\x65\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_true_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			trueKwd,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"trueKwd",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\164\162\165\145\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x74\x72\x75\x65\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x74\x72\x75\x65\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_String_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			stringKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"stringKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\123\164\162\151\156\147\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x53\x74\x72\x69\x6e\x67\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x53\x74\x72\x69\x6e\x67\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_String_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			stringKwd,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"stringKwd",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\123\164\162\151\156\147\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x53\x74\x72\x69\x6e\x67\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x53\x74\x72\x69\x6e\x67\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_true_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			trueKwd,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"trueKwd",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\164\162\165\145\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x74\x72\x75\x65\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x74\x72\x75\x65\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_head_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			headKwd,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"headKwd",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\150\145\141\144\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x68\x65\x61\x64\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x68\x65\x61\x64\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_true_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			trueKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"trueKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\164\162\165\145\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x74\x72\x75\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x74\x72\x75\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_true_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			trueKwd,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"trueKwd",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\164\162\165\145\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x72\x75\x65\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x72\x75\x65\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_head_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			headKwd,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"headKwd",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\150\145\141\144\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x68\x65\x61\x64\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x68\x65\x61\x64\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_tail_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			tailKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"tailKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\164\141\151\154\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x61\x69\x6c\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x61\x69\x6c\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_write_map_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			writeKwd,
			mapKwd,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"writeKwd",
			"mapKwd",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\162\151\164\145\000",
			"\155\141\160\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x77\x72\x69\x74\x65\x20\x6d\x61\x70\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x72\x69\x74\x65\x20\x6d\x61\x70\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_filter_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			filterKwd,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"filterKwd",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\146\151\154\164\145\162\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x66\x69\x6c\x74\x65\x72\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x66\x69\x6c\x74\x65\x72\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Integer_filter_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			integerKwd,
			filterKwd,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"integerKwd",
			"filterKwd",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\156\164\145\147\145\162\000",
			"\146\151\154\164\145\162\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x49\x6e\x74\x65\x67\x65\x72\x20\x66\x69\x6c\x74\x65\x72\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x6e\x74\x65\x67\x65\x72\x20\x66\x69\x6c\x74\x65\x72\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_tail_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			tailKwd,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"tailKwd",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\164\141\151\154\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x74\x61\x69\x6c\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x74\x61\x69\x6c\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_map_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			mapKwd,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"mapKwd",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\155\141\160\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x6d\x61\x70\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x6d\x61\x70\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_null_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			nullKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"nullKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\156\165\154\154\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x6e\x75\x6c\x6c\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x6e\x75\x6c\x6c\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_map_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			mapKwd,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"mapKwd",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\155\141\160\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x6d\x61\x70\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x6d\x61\x70\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_tail_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			tailKwd,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"tailKwd",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\164\141\151\154\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x61\x69\x6c\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x74\x61\x69\x6c\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Boolean_null_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			booleanKwd,
			nullKwd,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"booleanKwd",
			"nullKwd",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\157\157\154\145\141\156\000",
			"\156\165\154\154\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x6e\x75\x6c\x6c\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x6e\x75\x6c\x6c\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_Float_tail_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatKwd,
			tailKwd,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatKwd",
			"tailKwd",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\154\157\141\164\000",
			"\164\141\151\154\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x46\x6c\x6f\x61\x74\x20\x74\x61\x69\x6c\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x6c\x6f\x61\x74\x20\x74\x61\x69\x6c\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_rparen_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			rightParen,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"rightParen",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\051\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x29\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x29\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_rbrace_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			rightParen,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"rightParen",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\051\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x29\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x29\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_lbrace_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			leftParen,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"leftParen",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\050\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x28\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x28\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_rparen_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			rightParen,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"rightParen",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\051\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x29\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x29\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_lbrace_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			leftParen,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"leftParen",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\050\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x28\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x28\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_rbrace_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			rightParen,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"rightParen",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\051\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x29\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x29\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_lbrace_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			leftParen,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"leftParen",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\050\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x28\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x28\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_rparen_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			rightParen,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"rightParen",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\051\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x29\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x29\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_lparen_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			leftParen,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"leftParen",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\050\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x28\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x28\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_rbrace_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			rightParen,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"rightParen",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\051\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x29\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x29\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_lparen_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			leftParen,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"leftParen",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\050\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x28\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x28\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_rbracket_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			rightSquare,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"rightSquare",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\135\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x5d\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x5d\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_greaterthan_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			rightAngle,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"rightAngle",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\076\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x3e\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x3e\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_lbracket_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			leftSquare,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"leftSquare",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\133\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x5b\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x5b\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_lessthan_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			leftAngle,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"leftAngle",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\074\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x3c\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x3c\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_rbracket_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			rightSquare,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"rightSquare",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\135\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x5d\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x5d\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_lbracket_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			leftSquare,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"leftSquare",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\133\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x5b\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x5b\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_lessthan_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			leftAngle,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"leftAngle",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\074\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x3c\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x3c\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_lbracket_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			leftSquare,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"leftSquare",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\133\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x5b\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x5b\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_lbracket_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			leftSquare,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"leftSquare",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\133\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x5b\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x5b\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_greaterthan_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			rightAngle,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"rightAngle",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\076\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x3e\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x3e\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_rbracket_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			rightSquare,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"rightSquare",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\135\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x5d\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x5d\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_doublecolon_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			colonColon,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"colonColon",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\072\072\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x3a\x3a\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x3a\x3a\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_comma_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			comma,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"comma",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\054\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x2c\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x2c\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_comma_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			comma,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"comma",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\054\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x2c\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x2c\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_comma_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			comma,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"comma",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\054\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x2c\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x2c\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_doublecolon_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			colonColon,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"colonColon",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\072\072\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x3a\x3a\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x3a\x3a\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_semicolon_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			semiColon,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"semiColon",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\073\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x3b\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x3b\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_doublecolon_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			colonColon,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"colonColon",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\072\072\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x3a\x3a\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x3a\x3a\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_colon_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			colon,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"colon",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\072\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x3a\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x3a\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_colon_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			colon,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"colon",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\072\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x3a\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x3a\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_semicolon_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			semiColon,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"semiColon",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\073\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x3b\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x3b\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_colon_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			colon,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"colon",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\072\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x3a\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x3a\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_subtraction_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			dash,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"dash",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\055\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x2d\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x2d\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_assignment_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			equalsSign,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"equalsSign",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\075\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x3d\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x3d\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_multiplication_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			star,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"star",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\052\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x2a\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x2a\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_multiplication_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			star,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"star",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\052\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x2a\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x2a\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_assignment_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			equalsSign,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"equalsSign",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\075\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x3d\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x3d\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_multiplication_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			star,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"star",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\052\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x2a\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x2a\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_multiplication_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			star,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"star",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\052\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x2a\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x2a\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_assignment_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			equalsSign,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"equalsSign",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\075\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x3d\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x3d\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_plus_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			plusSign,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"plusSign",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\053\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x2b\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x2b\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_plus_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			plusSign,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"plusSign",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\053\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x2b\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x2b\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_plus_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			plusSign,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"plusSign",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\053\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x2b\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x2b\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_doublebackslash_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			backSlash,
			backSlash,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"backSlash",
			"backSlash",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\134\000",
			"\134\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x5c\x5c\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x5c\x5c\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_division_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			forwardSlash,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"forwardSlash",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\057\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x2f\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x2f\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_doublebackslash_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			backSlash,
			backSlash,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"backSlash",
			"backSlash",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\134\000",
			"\134\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x5c\x5c\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x5c\x5c\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_equals_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			equalsEquals,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"equalsEquals",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\075\075\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x3d\x3d\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x3d\x3d\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_doublebackslash_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			backSlash,
			backSlash,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"backSlash",
			"backSlash",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\134\000",
			"\134\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x5c\x5c\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x5c\x5c\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_equals_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			equalsEquals,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"equalsEquals",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\075\075\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x3d\x3d\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x3d\x3d\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_equals_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			equalsEquals,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"equalsEquals",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\075\075\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x3d\x3d\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x3d\x3d\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_equals_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			equalsEquals,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"equalsEquals",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\075\075\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x3d\x3d\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x3d\x3d\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_division_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			forwardSlash,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"forwardSlash",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\057\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x2f\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x2f\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_arrow_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			arrow,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"arrow",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\055\076\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x2d\x3e\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x2d\x3e\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_arrow_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			arrow,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"arrow",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\055\076\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x2d\x3e\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x2d\x3e\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_leq_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			lessThanEquals,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"lessThanEquals",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\074\075\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x3c\x3d\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x3c\x3d\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_geq_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			greaterThanEquals,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"greaterThanEquals",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\076\075\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x3e\x3d\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x3e\x3d\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_leq_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			lessThanEquals,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"lessThanEquals",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\074\075\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x3c\x3d\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x3c\x3d\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_geq_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			greaterThanEquals,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"greaterThanEquals",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\076\075\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x3e\x3d\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x3e\x3d\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_geq_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			greaterThanEquals,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"greaterThanEquals",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\076\075\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x3e\x3d\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x3e\x3d\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_notequal_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			notEquals,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"notEquals",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\041\075\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x21\x3d\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x21\x3d\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_geq_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			greaterThanEquals,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"greaterThanEquals",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\076\075\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x3e\x3d\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x3e\x3d\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_notequal_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			notEquals,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"notEquals",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\041\075\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x21\x3d\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x21\x3d\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_doubleplus_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			plusPlus,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"plusPlus",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\053\053\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x2b\x2b\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x2b\x2b\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_leq_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			lessThanEquals,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"lessThanEquals",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\074\075\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x3c\x3d\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x3c\x3d\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_notequal_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			notEquals,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"notEquals",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\041\075\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x21\x3d\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x21\x3d\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_in_lbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			inKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"inKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\151\156\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x69\x6e\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x69\x6e\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_if_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			ifKwd,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"ifKwd",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\151\146\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x69\x66\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x69\x66\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_doubledot_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			dotDot,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"dotDot",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\056\056\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x2e\x2e\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x2e\x2e\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_main_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			variableName,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"variableName",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\155\141\151\156\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x6d\x61\x69\x6e\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x6d\x61\x69\x6e\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_doubledot_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			dotDot,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"dotDot",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\056\056\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x2e\x2e\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x2e\x2e\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_in_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			inKwd,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"inKwd",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\151\156\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x69\x6e\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x69\x6e\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_doubledot_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			dotDot,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"dotDot",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\056\056\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x2e\x2e\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x2e\x2e\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_in_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			inKwd,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"inKwd",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\151\156\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x69\x6e\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x69\x6e\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_in_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			inKwd,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"inKwd",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\151\156\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x69\x6e\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x69\x6e\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_main_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			variableName,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"variableName",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\155\141\151\156\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x6d\x61\x69\x6e\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x6d\x61\x69\x6e\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_main_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			variableName,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"variableName",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\155\141\151\156\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x6d\x61\x69\x6e\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x6d\x61\x69\x6e\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_read_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			readKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"readKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\162\145\141\144\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x72\x65\x61\x64\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x72\x65\x61\x64\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_then_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			thenKwd,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"thenKwd",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\164\150\145\156\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x74\x68\x65\x6e\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x74\x68\x65\x6e\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_read_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			readKwd,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"readKwd",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\162\145\141\144\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x72\x65\x61\x64\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x72\x65\x61\x64\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_else_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			elseKwd,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"elseKwd",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\145\154\163\145\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x65\x6c\x73\x65\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x65\x6c\x73\x65\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_then_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			thenKwd,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"thenKwd",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\164\150\145\156\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x74\x68\x65\x6e\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x74\x68\x65\x6e\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_then_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			thenKwd,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"thenKwd",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\164\150\145\156\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x74\x68\x65\x6e\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x74\x68\x65\x6e\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_else_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			elseKwd,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"elseKwd",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\145\154\163\145\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x65\x6c\x73\x65\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x65\x6c\x73\x65\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_read_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			readKwd,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"readKwd",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\162\145\141\144\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x72\x65\x61\x64\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x72\x65\x61\x64\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_print_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			printKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"printKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\160\162\151\156\164\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x70\x72\x69\x6e\x74\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x70\x72\x69\x6e\x74\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_read_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			readKwd,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"readKwd",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\162\145\141\144\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x72\x65\x61\x64\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x72\x65\x61\x64\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_else_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			elseKwd,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"elseKwd",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\145\154\163\145\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x65\x6c\x73\x65\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x65\x6c\x73\x65\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_Integer_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			integerKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"integerKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\111\156\164\145\147\145\162\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_Integer_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			integerKwd,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"integerKwd",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\111\156\164\145\147\145\162\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_Boolean_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			booleanKwd,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"booleanKwd",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\102\157\157\154\145\141\156\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_Boolean_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			booleanKwd,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"booleanKwd",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\102\157\157\154\145\141\156\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_Integer_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			integerKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"integerKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\111\156\164\145\147\145\162\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_Boolean_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			booleanKwd,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"booleanKwd",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\102\157\157\154\145\141\156\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_Integer_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			integerKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"integerKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\111\156\164\145\147\145\162\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_Boolean_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			booleanKwd,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"booleanKwd",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\102\157\157\154\145\141\156\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_write_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			writeKwd,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"writeKwd",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\167\162\151\164\145\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x77\x72\x69\x74\x65\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x77\x72\x69\x74\x65\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_Boolean_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			booleanKwd,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"booleanKwd",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\102\157\157\154\145\141\156\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_Boolean_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			booleanKwd,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"booleanKwd",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\102\157\157\154\145\141\156\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_true_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			trueKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"trueKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\164\162\165\145\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x74\x72\x75\x65\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x74\x72\x75\x65\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_true_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			trueKwd,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"trueKwd",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\164\162\165\145\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x74\x72\x75\x65\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x74\x72\x75\x65\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_false_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			falseKwd,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"falseKwd",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\146\141\154\163\145\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x66\x61\x6c\x73\x65\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x66\x61\x6c\x73\x65\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_false_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			falseKwd,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"falseKwd",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\146\141\154\163\145\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x66\x61\x6c\x73\x65\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x66\x61\x6c\x73\x65\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_false_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			falseKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"falseKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\146\141\154\163\145\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x66\x61\x6c\x73\x65\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x66\x61\x6c\x73\x65\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_String_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			stringKwd,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"stringKwd",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\123\164\162\151\156\147\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x53\x74\x72\x69\x6e\x67\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x53\x74\x72\x69\x6e\x67\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_false_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			falseKwd,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"falseKwd",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\146\141\154\163\145\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x66\x61\x6c\x73\x65\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x66\x61\x6c\x73\x65\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_head_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			headKwd,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"headKwd",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\150\145\141\144\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x68\x65\x61\x64\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x68\x65\x61\x64\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_String_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			stringKwd,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"stringKwd",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\123\164\162\151\156\147\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x53\x74\x72\x69\x6e\x67\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x53\x74\x72\x69\x6e\x67\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_true_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			trueKwd,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"trueKwd",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\164\162\165\145\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x74\x72\x75\x65\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x74\x72\x75\x65\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_true_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			trueKwd,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"trueKwd",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\164\162\165\145\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x74\x72\x75\x65\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x74\x72\x75\x65\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_false_null_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			falseKwd,
			nullKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"falseKwd",
			"nullKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\154\163\145\000",
			"\156\165\154\154\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x61\x6c\x73\x65\x20\x6e\x75\x6c\x6c\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x61\x6c\x73\x65\x20\x6e\x75\x6c\x6c\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_null_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			nullKwd,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"nullKwd",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\156\165\154\154\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x6e\x75\x6c\x6c\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x6e\x75\x6c\x6c\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_tail_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			tailKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"tailKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\164\141\151\154\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x74\x61\x69\x6c\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x74\x61\x69\x6c\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_map_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			mapKwd,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"mapKwd",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\155\141\160\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x6d\x61\x70\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x6d\x61\x70\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_filter_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			filterKwd,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"filterKwd",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\146\151\154\164\145\162\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x66\x69\x6c\x74\x65\x72\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x66\x69\x6c\x74\x65\x72\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_tail_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			tailKwd,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"tailKwd",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\164\141\151\154\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x74\x61\x69\x6c\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x74\x61\x69\x6c\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_head_null_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			headKwd,
			nullKwd,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"headKwd",
			"nullKwd",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\145\141\144\000",
			"\156\165\154\154\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x68\x65\x61\x64\x20\x6e\x75\x6c\x6c\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x65\x61\x64\x20\x6e\x75\x6c\x6c\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_tail_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			tailKwd,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"tailKwd",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\164\141\151\154\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x74\x61\x69\x6c\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x74\x61\x69\x6c\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_tail_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			tailKwd,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"tailKwd",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\164\141\151\154\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x74\x61\x69\x6c\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x74\x61\x69\x6c\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_true_null_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			trueKwd,
			nullKwd,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"trueKwd",
			"nullKwd",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\162\165\145\000",
			"\156\165\154\154\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x72\x75\x65\x20\x6e\x75\x6c\x6c\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x72\x75\x65\x20\x6e\x75\x6c\x6c\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_String_tail_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			stringKwd,
			tailKwd,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"stringKwd",
			"tailKwd",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\164\162\151\156\147\000",
			"\164\141\151\154\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x53\x74\x72\x69\x6e\x67\x20\x74\x61\x69\x6c\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x74\x72\x69\x6e\x67\x20\x74\x61\x69\x6c\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_rbrace_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			rightParen,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"rightParen",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\051\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x29\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x29\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_rparen_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			rightParen,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"rightParen",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\051\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x29\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x29\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_lbrace_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			leftParen,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"leftParen",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\050\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x28\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x28\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_rparen_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			rightParen,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"rightParen",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\051\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x29\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x29\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_rparen_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			rightParen,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"rightParen",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\051\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x29\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x29\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_rbrace_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			rightParen,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"rightParen",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\051\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x29\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x29\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_rparen_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			rightParen,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"rightParen",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\051\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x29\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x29\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_lbrace_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			leftParen,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"leftParen",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\050\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x28\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x28\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_rparen_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			rightParen,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"rightParen",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\051\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x29\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x29\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_rparen_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			rightParen,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"rightParen",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\051\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x29\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x29\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_rbrace_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			rightParen,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"rightParen",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\051\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x29\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x29\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_lbracket_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			leftSquare,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"leftSquare",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\133\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x5b\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x5b\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_greaterthan_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			rightAngle,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"rightAngle",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\076\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x3e\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x3e\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_lbracket_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			leftSquare,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"leftSquare",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\133\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x5b\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x5b\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_rbracket_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			rightSquare,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"rightSquare",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\135\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x5d\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x5d\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_lbracket_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			leftSquare,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"leftSquare",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\133\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x5b\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x5b\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_rbracket_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			rightSquare,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"rightSquare",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\135\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x5d\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x5d\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_lessthan_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			leftAngle,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"leftAngle",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\074\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x3c\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x3c\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_lessthan_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			leftAngle,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"leftAngle",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\074\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x3c\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x3c\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_greaterthan_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			rightAngle,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"rightAngle",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\076\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x3e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x3e\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_lbracket_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			leftSquare,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"leftSquare",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\133\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x5b\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x5b\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_lbracket_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			leftSquare,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"leftSquare",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\133\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x5b\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x5b\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_comma_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			comma,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"comma",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\054\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x2c\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x2c\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_colon_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			colon,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"colon",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\072\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x3a\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x3a\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_doublecolon_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			colonColon,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"colonColon",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\072\072\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x3a\x3a\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x3a\x3a\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_doublecolon_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			colonColon,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"colonColon",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\072\072\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x3a\x3a\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x3a\x3a\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_doublecolon_equals( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			colonColon,
			equalsEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"colonColon",
			"equalsEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\072\072\000",
			"\075\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x3a\x3a\x20\x3d\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x3a\x3a\x20\x3d\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_comma_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			comma,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"comma",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\054\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x2c\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x2c\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_semicolon_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			semiColon,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"semiColon",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\073\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x3b\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x3b\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_semicolon_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			semiColon,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"semiColon",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\073\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x3b\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x3b\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_comma_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			comma,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"comma",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\054\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x2c\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x2c\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_doublecolon_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			colonColon,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"colonColon",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\072\072\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x3a\x3a\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x3a\x3a\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_colon_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			colon,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"colon",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\072\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x3a\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x3a\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_subtraction_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			dash,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"dash",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\055\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x2d\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x2d\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_multiplication_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			star,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"star",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\052\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x2a\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x2a\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_assignment_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			equalsSign,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"equalsSign",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\075\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x3d\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x3d\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_multiplication_plus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			star,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"star",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\052\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x2a\x20\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x2a\x20\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_multiplication_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			star,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"star",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\052\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x2a\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x2a\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_subtraction_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			dash,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"dash",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\055\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x2d\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x2d\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_assignment_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			equalsSign,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"equalsSign",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\075\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x3d\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x3d\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_assignment_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			equalsSign,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"equalsSign",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\075\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x3d\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x3d\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_subtraction_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			dash,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"dash",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\055\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x2d\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x2d\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_multiplication_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			star,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"star",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\052\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x2a\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x2a\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_plus_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			plusSign,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"plusSign",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\053\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x2b\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x2b\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_division_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			forwardSlash,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"forwardSlash",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\057\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x2f\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x2f\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_doublebackslash_rbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			backSlash,
			backSlash,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"backSlash",
			"backSlash",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\134\000",
			"\134\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x5c\x5c\x20\x5d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x5c\x5c\x20\x5d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_arrow_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			arrow,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"arrow",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\055\076\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x2d\x3e\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x2d\x3e\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_equals_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			equalsEquals,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"equalsEquals",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\075\075\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x3d\x3d\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x3d\x3d\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_arrow_division( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			arrow,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"arrow",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\055\076\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x2d\x3e\x20\x2f\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x2d\x3e\x20\x2f\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_doublebackslash_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			backSlash,
			backSlash,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"backSlash",
			"backSlash",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\134\000",
			"\134\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x5c\x5c\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x5c\x5c\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_doublebackslash_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			backSlash,
			backSlash,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"backSlash",
			"backSlash",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\134\000",
			"\134\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x5c\x5c\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x5c\x5c\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_equals_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			equalsEquals,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"equalsEquals",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\075\075\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x3d\x3d\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x3d\x3d\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_doublebackslash_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			backSlash,
			backSlash,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"backSlash",
			"backSlash",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\134\000",
			"\134\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x5c\x5c\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x5c\x5c\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_division_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			forwardSlash,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"forwardSlash",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\057\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x2f\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x2f\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_equals_filter( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			equalsEquals,
			filterKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"equalsEquals",
			"filterKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\075\075\000",
			"\146\151\154\164\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x3d\x3d\x20\x66\x69\x6c\x74\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x3d\x3d\x20\x66\x69\x6c\x74\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_doubleplus_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			plusPlus,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"plusPlus",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\053\053\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x2b\x2b\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x2b\x2b\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_leq_lbracket( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			lessThanEquals,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"lessThanEquals",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\074\075\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x3c\x3d\x20\x5b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x3c\x3d\x20\x5b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_notequal_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			notEquals,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"notEquals",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\041\075\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x21\x3d\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x21\x3d\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_leq_subtraction( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			lessThanEquals,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"lessThanEquals",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\074\075\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x3c\x3d\x20\x2d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x3c\x3d\x20\x2d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_notequal_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			notEquals,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"notEquals",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\041\075\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x21\x3d\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x21\x3d\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_doubleplus_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			plusPlus,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"plusPlus",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\053\053\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x2b\x2b\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x2b\x2b\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_doubleplus_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			plusPlus,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"plusPlus",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\053\053\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x2b\x2b\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x2b\x2b\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_geq_else( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			greaterThanEquals,
			elseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"greaterThanEquals",
			"elseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\076\075\000",
			"\145\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x3e\x3d\x20\x65\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x3e\x3d\x20\x65\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_doubleplus_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			plusPlus,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"plusPlus",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\053\053\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x2b\x2b\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x2b\x2b\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_geq_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			greaterThanEquals,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"greaterThanEquals",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\076\075\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x3e\x3d\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x3e\x3d\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_doubleplus_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			plusPlus,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"plusPlus",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\053\053\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x2b\x2b\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x2b\x2b\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_in_rbrace( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			inKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"inKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\151\156\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x69\x6e\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x69\x6e\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_main_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			variableName,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"variableName",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\155\141\151\156\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x6d\x61\x69\x6e\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x6d\x61\x69\x6e\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_doubledot_semicolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			dotDot,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"dotDot",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\056\056\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x2e\x2e\x20\x3b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x2e\x2e\x20\x3b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_if_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			ifKwd,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"ifKwd",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\151\146\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x69\x66\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x69\x66\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_main_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			variableName,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"variableName",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\155\141\151\156\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x6d\x61\x69\x6e\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x6d\x61\x69\x6e\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_main_notequal( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			variableName,
			notEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"variableName",
			"notEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\155\141\151\156\000",
			"\041\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x6d\x61\x69\x6e\x20\x21\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x6d\x61\x69\x6e\x20\x21\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_if_doubledot( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			ifKwd,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"ifKwd",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\151\146\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x69\x66\x20\x2e\x2e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x69\x66\x20\x2e\x2e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_doubledot_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			dotDot,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"dotDot",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\056\056\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x2e\x2e\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x2e\x2e\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_doubledot_Float( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			dotDot,
			floatKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"dotDot",
			"floatKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\056\056\000",
			"\106\154\157\141\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x2e\x2e\x20\x46\x6c\x6f\x61\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x2e\x2e\x20\x46\x6c\x6f\x61\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_if_true( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			ifKwd,
			trueKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"ifKwd",
			"trueKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\151\146\000",
			"\164\162\165\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x69\x66\x20\x74\x72\x75\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x69\x66\x20\x74\x72\x75\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_doubledot_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			dotDot,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"dotDot",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\056\056\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x2e\x2e\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x2e\x2e\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_read_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			readKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"readKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\162\145\141\144\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x72\x65\x61\x64\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x72\x65\x61\x64\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_read_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			readKwd,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"readKwd",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\162\145\141\144\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x72\x65\x61\x64\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x72\x65\x61\x64\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_print_doublecolon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			printKwd,
			colonColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"printKwd",
			"colonColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\160\162\151\156\164\000",
			"\072\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x70\x72\x69\x6e\x74\x20\x3a\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x70\x72\x69\x6e\x74\x20\x3a\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_print_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			printKwd,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"printKwd",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\160\162\151\156\164\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x70\x72\x69\x6e\x74\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x70\x72\x69\x6e\x74\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_else_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			elseKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"elseKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\145\154\163\145\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x65\x6c\x73\x65\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x65\x6c\x73\x65\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_print_doubleplus( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			printKwd,
			plusPlus,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"printKwd",
			"plusPlus",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\160\162\151\156\164\000",
			"\053\053\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x70\x72\x69\x6e\x74\x20\x2b\x2b\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x70\x72\x69\x6e\x74\x20\x2b\x2b\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_print_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			printKwd,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"printKwd",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\160\162\151\156\164\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x70\x72\x69\x6e\x74\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x70\x72\x69\x6e\x74\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_print_then( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			printKwd,
			thenKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"printKwd",
			"thenKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\160\162\151\156\164\000",
			"\164\150\145\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x70\x72\x69\x6e\x74\x20\x74\x68\x65\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x70\x72\x69\x6e\x74\x20\x74\x68\x65\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_print_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			printKwd,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"printKwd",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\160\162\151\156\164\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x70\x72\x69\x6e\x74\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x70\x72\x69\x6e\x74\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_then_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			thenKwd,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"thenKwd",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\164\150\145\156\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x74\x68\x65\x6e\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x74\x68\x65\x6e\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_then_null( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			thenKwd,
			nullKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"thenKwd",
			"nullKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\164\150\145\156\000",
			"\156\165\154\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x74\x68\x65\x6e\x20\x6e\x75\x6c\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x74\x68\x65\x6e\x20\x6e\x75\x6c\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_Integer_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			integerKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"integerKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\111\156\164\145\147\145\162\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_write_lessthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			writeKwd,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"writeKwd",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\167\162\151\164\145\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x77\x72\x69\x74\x65\x20\x3c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x77\x72\x69\x74\x65\x20\x3c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_Integer_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			integerKwd,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"integerKwd",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\111\156\164\145\147\145\162\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_Integer_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			integerKwd,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"integerKwd",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\111\156\164\145\147\145\162\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_Integer_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			integerKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"integerKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\111\156\164\145\147\145\162\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_write_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			writeKwd,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"writeKwd",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\167\162\151\164\145\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x77\x72\x69\x74\x65\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x77\x72\x69\x74\x65\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_Integer_in( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			integerKwd,
			inKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"integerKwd",
			"inKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\111\156\164\145\147\145\162\000",
			"\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_Integer_read( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			integerKwd,
			readKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"integerKwd",
			"readKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\111\156\164\145\147\145\162\000",
			"\162\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x72\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x72\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_Integer_Integer( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			integerKwd,
			integerKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"integerKwd",
			"integerKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\111\156\164\145\147\145\162\000",
			"\111\156\164\145\147\145\162\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x49\x6e\x74\x65\x67\x65\x72\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x49\x6e\x74\x65\x67\x65\x72\x20\x49\x6e\x74\x65\x67\x65\x72\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_Boolean_false( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			booleanKwd,
			falseKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"booleanKwd",
			"falseKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\102\157\157\154\145\141\156\000",
			"\146\141\154\163\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x66\x61\x6c\x73\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x66\x61\x6c\x73\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_Boolean_map( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			booleanKwd,
			mapKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"booleanKwd",
			"mapKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\102\157\157\154\145\141\156\000",
			"\155\141\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x6d\x61\x70\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x20\x6d\x61\x70\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_String_rparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			stringKwd,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"stringKwd",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\123\164\162\151\156\147\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x53\x74\x72\x69\x6e\x67\x20\x29\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x53\x74\x72\x69\x6e\x67\x20\x29\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_false_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			falseKwd,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"falseKwd",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\146\141\154\163\145\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x66\x61\x6c\x73\x65\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x66\x61\x6c\x73\x65\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_head_comma( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			headKwd,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"headKwd",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\150\145\141\144\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x68\x65\x61\x64\x20\x2c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x68\x65\x61\x64\x20\x2c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_String_multiplication( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			stringKwd,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"stringKwd",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\123\164\162\151\156\147\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x53\x74\x72\x69\x6e\x67\x20\x2a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x53\x74\x72\x69\x6e\x67\x20\x2a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_true_doublebackslash( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			trueKwd,
			backSlash,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"trueKwd",
			"backSlash",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\164\162\165\145\000",
			"\134\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x74\x72\x75\x65\x20\x5c\x5c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x74\x72\x75\x65\x20\x5c\x5c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_head_geq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			headKwd,
			greaterThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"headKwd",
			"greaterThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\150\145\141\144\000",
			"\076\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x68\x65\x61\x64\x20\x3e\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x68\x65\x61\x64\x20\x3e\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_false_main( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			falseKwd,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"falseKwd",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\146\141\154\163\145\000",
			"\155\141\151\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x66\x61\x6c\x73\x65\x20\x6d\x61\x69\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x66\x61\x6c\x73\x65\x20\x6d\x61\x69\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_false_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			falseKwd,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"falseKwd",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\146\141\154\163\145\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x66\x61\x6c\x73\x65\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x66\x61\x6c\x73\x65\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_head_write( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			headKwd,
			writeKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"headKwd",
			"writeKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\150\145\141\144\000",
			"\167\162\151\164\145\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x68\x65\x61\x64\x20\x77\x72\x69\x74\x65\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x68\x65\x61\x64\x20\x77\x72\x69\x74\x65\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_head_head( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			headKwd,
			headKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"headKwd",
			"headKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\150\145\141\144\000",
			"\150\145\141\144\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x68\x65\x61\x64\x20\x68\x65\x61\x64\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x68\x65\x61\x64\x20\x68\x65\x61\x64\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_head_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			headKwd,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"headKwd",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\150\145\141\144\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x68\x65\x61\x64\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x68\x65\x61\x64\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_map_lparen( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			mapKwd,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"mapKwd",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\155\141\160\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x6d\x61\x70\x20\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x6d\x61\x70\x20\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_null_greaterthan( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			nullKwd,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"nullKwd",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\156\165\154\154\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x6e\x75\x6c\x6c\x20\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x6e\x75\x6c\x6c\x20\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_map_colon( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			mapKwd,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"mapKwd",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\155\141\160\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x6d\x61\x70\x20\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x6d\x61\x70\x20\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_null_assignment( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			nullKwd,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"nullKwd",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\156\165\154\154\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x6e\x75\x6c\x6c\x20\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x6e\x75\x6c\x6c\x20\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_tail_arrow( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			tailKwd,
			arrow,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"tailKwd",
			"arrow",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\164\141\151\154\000",
			"\055\076\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x74\x61\x69\x6c\x20\x2d\x3e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x74\x61\x69\x6c\x20\x2d\x3e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_tail_leq( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			tailKwd,
			lessThanEquals,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"tailKwd",
			"lessThanEquals",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\164\141\151\154\000",
			"\074\075\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x74\x61\x69\x6c\x20\x3c\x3d\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x74\x61\x69\x6c\x20\x3c\x3d\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_tail_filter_if( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			tailKwd,
			filterKwd,
			ifKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"tailKwd",
			"filterKwd",
			"ifKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\141\151\154\000",
			"\146\151\154\164\145\162\000",
			"\151\146\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x74\x61\x69\x6c\x20\x66\x69\x6c\x74\x65\x72\x20\x69\x66\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x61\x69\x6c\x20\x66\x69\x6c\x74\x65\x72\x20\x69\x66\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_null_print( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			nullKwd,
			printKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"nullKwd",
			"printKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\156\165\154\154\000",
			"\160\162\151\156\164\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x6e\x75\x6c\x6c\x20\x70\x72\x69\x6e\x74\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x6e\x75\x6c\x6c\x20\x70\x72\x69\x6e\x74\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_map_map_Boolean( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			mapKwd,
			mapKwd,
			booleanKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"mapKwd",
			"mapKwd",
			"booleanKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\141\160\000",
			"\155\141\160\000",
			"\102\157\157\154\145\141\156\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6d\x61\x70\x20\x6d\x61\x70\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x61\x70\x20\x6d\x61\x70\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_filter_tail_String( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			filterKwd,
			tailKwd,
			stringKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"filterKwd",
			"tailKwd",
			"stringKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\154\164\145\162\000",
			"\164\141\151\154\000",
			"\123\164\162\151\156\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x66\x69\x6c\x74\x65\x72\x20\x74\x61\x69\x6c\x20\x53\x74\x72\x69\x6e\x67\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x6c\x74\x65\x72\x20\x74\x61\x69\x6c\x20\x53\x74\x72\x69\x6e\x67\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_three_null_filter_tail( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			nullKwd,
			filterKwd,
			tailKwd,
			endOfFile,
		};
		string _rubric_n[] ={
			"nullKwd",
			"filterKwd",
			"tailKwd",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\165\154\154\000",
			"\146\151\154\164\145\162\000",
			"\164\141\151\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Three Test Failed\n","\x6e\x75\x6c\x6c\x20\x66\x69\x6c\x74\x65\x72\x20\x74\x61\x69\x6c\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x75\x6c\x6c\x20\x66\x69\x6c\x74\x65\x72\x20\x74\x61\x69\x6c\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_0( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			comma,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			lexicalError,
			rightAngle,
			variableName,
			colon,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"comma",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"rightAngle",
			"variableName",
			"colon",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\047\000",
			"\150\121\000",
			"\054\000",
			"\122\000",
			"\113\000",
			"\130\000",
			"\150\000",
			"\050\000",
			"\112\000",
			"\104\000",
			"\076\000",
			"\152\000",
			"\072\000",
			"\156\062\000",
			"\000",
		};
		int _rubric_s = 15;
      sprintf(str,"'%s' Random String Failed\n","\x27\x09\x68\x51\x2c\x52\x4b\x58\x68\x28\x4a\x44\x3e\x6a\x3a\x6e\x32");
      TSM_ASSERT(str,checkAgainstRubric("\x27\x09\x68\x51\x2c\x52\x4b\x58\x68\x28\x4a\x44\x3e\x6a\x3a\x6e\x32",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_1( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			leftAngle,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"leftAngle",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\147\157\121\000",
			"\044\000",
			"\101\000",
			"\112\000",
			"\063\000",
			"\161\131\125\000",
			"\047\000",
			"\046\000",
			"\074\000",
			"\174\000",
			"\174\000",
			"\174\000",
			"\122\000",
			"\062\000",
			"\127\000",
			"\157\066\157\000",
			"\000",
		};
		int _rubric_s = 17;
      sprintf(str,"'%s' Random String Failed\n","\x77\x67\x6f\x51\x24\x41\x4a\x33\x0a\x71\x59\x55\x27\x26\x3c\x7c\x7c\x7c\x52\x32\x57\x6f\x36\x6f");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x67\x6f\x51\x24\x41\x4a\x33\x0a\x71\x59\x55\x27\x26\x3c\x7c\x7c\x7c\x52\x32\x57\x6f\x36\x6f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_2( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			forwardSlash,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			leftAngle,
			variableName,
			notEquals,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			backSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			leftSquare,
			lexicalError,
			lexicalError,
			leftAngle,
			leftParen,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"forwardSlash",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftAngle",
			"variableName",
			"notEquals",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"leftSquare",
			"lexicalError",
			"lexicalError",
			"leftAngle",
			"leftParen",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\107\000",
			"\057\000",
			"\060\000",
			"\043\000",
			"\043\000",
			"\176\000",
			"\156\121\164\061\000",
			"\041\000",
			"\132\000",
			"\043\000",
			"\104\000",
			"\124\000",
			"\074\000",
			"\145\127\061\131\132\061\116\141\000",
			"\041\075\000",
			"\125\000",
			"\120\000",
			"\120\000",
			"\041\000",
			"\162\000",
			"\134\000",
			"\123\000",
			"\116\000",
			"\077\000",
			"\061\000",
			"\151\161\000",
			"\133\000",
			"\056\000",
			"\112\000",
			"\074\000",
			"\050\000",
			"\061\000",
			"\000",
		};
		int _rubric_s = 33;
      sprintf(str,"'%s' Random String Failed\n","\x47\x2f\x30\x23\x23\x7e\x6e\x51\x74\x31\x21\x5a\x23\x44\x54\x3c\x65\x57\x31\x59\x5a\x31\x4e\x61\x21\x3d\x55\x50\x50\x21\x72\x5c\x53\x4e\x3f\x31\x69\x71\x5b\x20\x2e\x4a\x3c\x28\x31");
      TSM_ASSERT(str,checkAgainstRubric("\x47\x2f\x30\x23\x23\x7e\x6e\x51\x74\x31\x21\x5a\x23\x44\x54\x3c\x65\x57\x31\x59\x5a\x31\x4e\x61\x21\x3d\x55\x50\x50\x21\x72\x5c\x53\x4e\x3f\x31\x69\x71\x5b\x20\x2e\x4a\x3c\x28\x31",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_3( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			rightSquare,
			star,
			variableName,
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			variableName,
			rightAngle,
			comma,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			comma,
			variableName,
			leftParen,
			leftSquare,
			lexicalError,
			lexicalError,
			lexicalError,
			notEquals,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			colon,
			lexicalError,
			lexicalError,
			variableName,
			comma,
			comma,
			lexicalError,
			lexicalError,
			semiColon,
			lexicalError,
			lexicalError,
			variableName,
			forwardSlash,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightSquare",
			"star",
			"variableName",
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"variableName",
			"rightAngle",
			"comma",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"comma",
			"variableName",
			"leftParen",
			"leftSquare",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"notEquals",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"colon",
			"lexicalError",
			"lexicalError",
			"variableName",
			"comma",
			"comma",
			"lexicalError",
			"lexicalError",
			"semiColon",
			"lexicalError",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\144\164\172\000",
			"\047\000",
			"\125\000",
			"\044\000",
			"\172\000",
			"\135\000",
			"\052\000",
			"\172\000",
			"\174\000",
			"\145\126\000",
			"\073\000",
			"\101\000",
			"\063\000",
			"\176\000",
			"\120\000",
			"\141\000",
			"\154\000",
			"\076\000",
			"\054\000",
			"\043\000",
			"\147\000",
			"\174\000",
			"\117\000",
			"\054\000",
			"\153\000",
			"\050\000",
			"\133\000",
			"\122\000",
			"\110\000",
			"\110\000",
			"\041\075\000",
			"\102\000",
			"\104\000",
			"\136\000",
			"\114\000",
			"\072\000",
			"\100\000",
			"\102\000",
			"\142\000",
			"\054\000",
			"\054\000",
			"\110\000",
			"\043\000",
			"\073\000",
			"\122\000",
			"\117\000",
			"\161\130\161\114\147\000",
			"\057\000",
			"\067\000",
			"\152\124\000",
			"\000",
		};
		int _rubric_s = 51;
      sprintf(str,"'%s' Random String Failed\n","\x64\x74\x7a\x27\x55\x24\x7a\x5d\x2a\x7a\x7c\x65\x56\x3b\x41\x33\x7e\x50\x61\x20\x6c\x3e\x2c\x23\x67\x7c\x4f\x2c\x6b\x28\x5b\x52\x48\x48\x21\x3d\x42\x44\x5e\x4c\x3a\x40\x42\x62\x2c\x2c\x48\x23\x3b\x52\x4f\x71\x58\x71\x4c\x67\x2f\x37\x6a\x54");
      TSM_ASSERT(str,checkAgainstRubric("\x64\x74\x7a\x27\x55\x24\x7a\x5d\x2a\x7a\x7c\x65\x56\x3b\x41\x33\x7e\x50\x61\x20\x6c\x3e\x2c\x23\x67\x7c\x4f\x2c\x6b\x28\x5b\x52\x48\x48\x21\x3d\x42\x44\x5e\x4c\x3a\x40\x42\x62\x2c\x2c\x48\x23\x3b\x52\x4f\x71\x58\x71\x4c\x67\x2f\x37\x6a\x54",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_4( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			plusSign,
			semiColon,
			backSlash,
			lexicalError,
			lexicalError,
			variableName,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			variableName,
			star,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"plusSign",
			"semiColon",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"variableName",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"variableName",
			"star",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\163\000",
			"\140\000",
			"\043\000",
			"\053\000",
			"\073\000",
			"\134\000",
			"\110\000",
			"\130\000",
			"\167\144\000",
			"\163\155\107\000",
			"\044\000",
			"\114\000",
			"\047\000",
			"\156\131\130\000",
			"\051\000",
			"\150\156\000",
			"\052\000",
			"\123\000",
			"\000",
		};
		int _rubric_s = 19;
      sprintf(str,"'%s' Random String Failed\n","\x73\x60\x23\x09\x2b\x3b\x5c\x48\x58\x77\x64\x20\x73\x6d\x47\x24\x4c\x27\x6e\x59\x58\x29\x68\x6e\x2a\x53");
      TSM_ASSERT(str,checkAgainstRubric("\x73\x60\x23\x09\x2b\x3b\x5c\x48\x58\x77\x64\x20\x73\x6d\x47\x24\x4c\x27\x6e\x59\x58\x29\x68\x6e\x2a\x53",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_5( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			rightParen,
			variableName,
			lexicalError,
			variableName,
			colon,
			variableName,
			rightParen,
			lexicalError,
			variableName,
			rightParen,
			variableName,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightParen",
			"variableName",
			"lexicalError",
			"variableName",
			"colon",
			"variableName",
			"rightParen",
			"lexicalError",
			"variableName",
			"rightParen",
			"variableName",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\000",
			"\130\000",
			"\104\000",
			"\171\000",
			"\050\000",
			"\044\000",
			"\140\000",
			"\126\000",
			"\172\071\106\000",
			"\041\000",
			"\151\000",
			"\056\000",
			"\146\123\167\145\137\121\131\061\126\000",
			"\077\000",
			"\051\000",
			"\145\113\000",
			"\046\000",
			"\142\156\000",
			"\072\000",
			"\160\162\113\172\062\000",
			"\051\000",
			"\120\000",
			"\153\000",
			"\051\000",
			"\172\000",
			"\100\000",
			"\064\070\000",
			"\000",
		};
		int _rubric_s = 28;
      sprintf(str,"'%s' Random String Failed\n","\x21\x58\x44\x79\x28\x24\x60\x56\x7a\x39\x46\x21\x69\x2e\x66\x53\x77\x65\x5f\x51\x59\x31\x56\x3f\x29\x65\x4b\x26\x62\x6e\x3a\x70\x72\x4b\x7a\x32\x29\x50\x6b\x29\x7a\x40\x34\x38");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x58\x44\x79\x28\x24\x60\x56\x7a\x39\x46\x21\x69\x2e\x66\x53\x77\x65\x5f\x51\x59\x31\x56\x3f\x29\x65\x4b\x26\x62\x6e\x3a\x70\x72\x4b\x7a\x32\x29\x50\x6b\x29\x7a\x40\x34\x38",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_6( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			dash,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			plusSign,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			forwardSlash,
			variableName,
			lexicalError,
			dash,
			lexicalError,
			intConst,
			variableName,
			leftSquare,
			intConst,
			variableName,
			dash,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"dash",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"plusSign",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"forwardSlash",
			"variableName",
			"lexicalError",
			"dash",
			"lexicalError",
			"intConst",
			"variableName",
			"leftSquare",
			"intConst",
			"variableName",
			"dash",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\000",
			"\122\000",
			"\120\000",
			"\046\000",
			"\125\000",
			"\055\000",
			"\132\000",
			"\171\000",
			"\046\000",
			"\071\061\066\000",
			"\053\000",
			"\066\000",
			"\047\000",
			"\151\110\000",
			"\077\000",
			"\043\000",
			"\151\132\163\112\000",
			"\077\000",
			"\062\060\000",
			"\057\000",
			"\161\000",
			"\042\000",
			"\055\000",
			"\112\000",
			"\065\000",
			"\152\065\066\000",
			"\133\000",
			"\066\000",
			"\160\000",
			"\055\000",
			"\061\070\000",
			"\130\000",
			"\102\000",
			"\131\000",
			"\063\000",
			"\166\125\000",
			"\136\000",
			"\152\063\144\117\000",
			"\176\000",
			"\145\115\137\164\111\172\000",
			"\000",
		};
		int _rubric_s = 41;
      sprintf(str,"'%s' Random String Failed\n","\x53\x52\x50\x26\x55\x2d\x5a\x79\x26\x39\x31\x36\x2b\x36\x27\x69\x48\x3f\x23\x69\x5a\x73\x4a\x3f\x32\x30\x2f\x71\x22\x09\x2d\x4a\x35\x6a\x35\x36\x5b\x36\x70\x2d\x31\x38\x58\x42\x59\x33\x76\x55\x5e\x6a\x33\x64\x4f\x7e\x65\x4d\x5f\x74\x49\x7a");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x52\x50\x26\x55\x2d\x5a\x79\x26\x39\x31\x36\x2b\x36\x27\x69\x48\x3f\x23\x69\x5a\x73\x4a\x3f\x32\x30\x2f\x71\x22\x09\x2d\x4a\x35\x6a\x35\x36\x5b\x36\x70\x2d\x31\x38\x58\x42\x59\x33\x76\x55\x5e\x6a\x33\x64\x4f\x7e\x65\x4d\x5f\x74\x49\x7a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_7( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			plusSign,
			equalsSign,
			intConst,
			rightSquare,
			lexicalError,
			rightAngle,
			variableName,
			backSlash,
			lexicalError,
			leftParen,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"plusSign",
			"equalsSign",
			"intConst",
			"rightSquare",
			"lexicalError",
			"rightAngle",
			"variableName",
			"backSlash",
			"lexicalError",
			"leftParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\141\000",
			"\077\000",
			"\157\127\000",
			"\041\000",
			"\137\000",
			"\111\000",
			"\116\000",
			"\067\000",
			"\151\145\000",
			"\053\000",
			"\075\000",
			"\065\000",
			"\135\000",
			"\130\000",
			"\076\000",
			"\156\123\000",
			"\134\000",
			"\117\000",
			"\050\000",
			"\160\071\000",
			"\140\000",
			"\140\000",
			"\105\000",
			"\165\000",
			"\000",
		};
		int _rubric_s = 25;
      sprintf(str,"'%s' Random String Failed\n","\x61\x3f\x6f\x57\x21\x5f\x49\x4e\x37\x69\x65\x2b\x20\x3d\x35\x5d\x58\x3e\x6e\x53\x5c\x4f\x28\x70\x39\x60\x60\x45\x75\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x61\x3f\x6f\x57\x21\x5f\x49\x4e\x37\x69\x65\x2b\x20\x3d\x35\x5d\x58\x3e\x6e\x53\x5c\x4f\x28\x70\x39\x60\x60\x45\x75\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_8( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			variableName,
			equalsSign,
			variableName,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			comma,
			intConst,
			variableName,
			lexicalError,
			intConst,
			backSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			leftSquare,
			variableName,
			plusSign,
			leftAngle,
			variableName,
			lexicalError,
			forwardSlash,
			lexicalError,
			semiColon,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"variableName",
			"equalsSign",
			"variableName",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"comma",
			"intConst",
			"variableName",
			"lexicalError",
			"intConst",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftSquare",
			"variableName",
			"plusSign",
			"leftAngle",
			"variableName",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"semiColon",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\115\000",
			"\071\000",
			"\144\113\000",
			"\075\000",
			"\143\144\000",
			"\156\172\065\000",
			"\136\000",
			"\122\000",
			"\046\000",
			"\054\000",
			"\060\000",
			"\167\060\065\061\117\170\123\156\000",
			"\100\000",
			"\060\000",
			"\134\000",
			"\101\000",
			"\100\000",
			"\140\000",
			"\041\000",
			"\136\000",
			"\041\000",
			"\133\000",
			"\165\000",
			"\053\000",
			"\074\000",
			"\170\000",
			"\100\000",
			"\057\000",
			"\127\000",
			"\073\000",
			"\150\130\137\000",
			"\000",
		};
		int _rubric_s = 32;
      sprintf(str,"'%s' Random String Failed\n","\x4d\x39\x64\x4b\x3d\x63\x64\x20\x6e\x7a\x35\x5e\x52\x26\x2c\x30\x77\x30\x35\x31\x4f\x78\x53\x6e\x09\x40\x30\x5c\x41\x40\x60\x21\x5e\x21\x5b\x75\x2b\x3c\x78\x40\x2f\x57\x3b\x68\x58\x5f");
      TSM_ASSERT(str,checkAgainstRubric("\x4d\x39\x64\x4b\x3d\x63\x64\x20\x6e\x7a\x35\x5e\x52\x26\x2c\x30\x77\x30\x35\x31\x4f\x78\x53\x6e\x09\x40\x30\x5c\x41\x40\x60\x21\x5e\x21\x5b\x75\x2b\x3c\x78\x40\x2f\x57\x3b\x68\x58\x5f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_9( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			rightParen,
			variableName,
			lexicalError,
			intConst,
			equalsSign,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			variableName,
			lexicalError,
			variableName,
			rightParen,
			intConst,
			variableName,
			rightAngle,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"rightParen",
			"variableName",
			"lexicalError",
			"intConst",
			"equalsSign",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"variableName",
			"lexicalError",
			"variableName",
			"rightParen",
			"intConst",
			"variableName",
			"rightAngle",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\140\000",
			"\141\163\000",
			"\051\000",
			"\162\151\000",
			"\132\000",
			"\065\000",
			"\075\000",
			"\171\000",
			"\140\000",
			"\140\000",
			"\162\000",
			"\051\000",
			"\164\000",
			"\043\000",
			"\172\150\061\000",
			"\051\000",
			"\070\000",
			"\165\000",
			"\076\000",
			"\163\144\070\116\160\103\061\170\000",
			"\000",
		};
		int _rubric_s = 21;
      sprintf(str,"'%s' Random String Failed\n","\x60\x61\x73\x29\x72\x69\x0a\x5a\x35\x3d\x79\x60\x60\x72\x29\x74\x23\x7a\x68\x31\x29\x38\x75\x3e\x73\x64\x38\x4e\x70\x43\x31\x78");
      TSM_ASSERT(str,checkAgainstRubric("\x60\x61\x73\x29\x72\x69\x0a\x5a\x35\x3d\x79\x60\x60\x72\x29\x74\x23\x7a\x68\x31\x29\x38\x75\x3e\x73\x64\x38\x4e\x70\x43\x31\x78",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_10( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			star,
			lexicalError,
			rightAngle,
			variableName,
			equalsSign,
			leftSquare,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			comma,
			variableName,
			rightAngle,
			lexicalError,
			variableName,
			equalsSign,
			rightParen,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			intConst,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"star",
			"lexicalError",
			"rightAngle",
			"variableName",
			"equalsSign",
			"leftSquare",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"comma",
			"variableName",
			"rightAngle",
			"lexicalError",
			"variableName",
			"equalsSign",
			"rightParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"intConst",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\124\000",
			"\167\067\127\163\166\000",
			"\052\000",
			"\121\000",
			"\076\000",
			"\162\065\141\151\151\152\000",
			"\075\000",
			"\133\000",
			"\170\000",
			"\043\000",
			"\111\000",
			"\147\171\000",
			"\054\000",
			"\166\000",
			"\076\000",
			"\115\000",
			"\142\101\113\110\067\000",
			"\075\000",
			"\051\000",
			"\114\000",
			"\163\000",
			"\047\000",
			"\113\000",
			"\164\163\102\155\142\160\000",
			"\066\070\000",
			"\047\000",
			"\123\000",
			"\000",
		};
		int _rubric_s = 28;
      sprintf(str,"'%s' Random String Failed\n","\x54\x77\x37\x57\x73\x76\x2a\x51\x3e\x72\x35\x61\x69\x69\x6a\x3d\x5b\x78\x23\x49\x67\x79\x2c\x76\x3e\x4d\x62\x41\x4b\x48\x37\x3d\x29\x4c\x73\x27\x4b\x74\x73\x42\x6d\x62\x70\x20\x36\x38\x27\x53");
      TSM_ASSERT(str,checkAgainstRubric("\x54\x77\x37\x57\x73\x76\x2a\x51\x3e\x72\x35\x61\x69\x69\x6a\x3d\x5b\x78\x23\x49\x67\x79\x2c\x76\x3e\x4d\x62\x41\x4b\x48\x37\x3d\x29\x4c\x73\x27\x4b\x74\x73\x42\x6d\x62\x70\x20\x36\x38\x27\x53",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_11( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			comma,
			intConst,
			leftAngle,
			variableName,
			rightParen,
			intConst,
			lexicalError,
			variableName,
			forwardSlash,
			variableName,
			lexicalError,
			rightParen,
			intConst,
			leftParen,
			lexicalError,
			variableName,
			backSlash,
			lexicalError,
			lexicalError,
			leftSquare,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"comma",
			"intConst",
			"leftAngle",
			"variableName",
			"rightParen",
			"intConst",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"variableName",
			"lexicalError",
			"rightParen",
			"intConst",
			"leftParen",
			"lexicalError",
			"variableName",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"leftSquare",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\054\000",
			"\070\000",
			"\074\000",
			"\144\171\131\000",
			"\051\000",
			"\067\000",
			"\044\000",
			"\153\153\156\070\103\146\000",
			"\057\000",
			"\152\000",
			"\047\000",
			"\051\000",
			"\061\000",
			"\050\000",
			"\047\000",
			"\156\000",
			"\134\000",
			"\102\000",
			"\100\000",
			"\133\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 23;
      sprintf(str,"'%s' Random String Failed\n","\x29\x2c\x38\x3c\x64\x79\x59\x29\x37\x24\x6b\x6b\x6e\x38\x43\x66\x2f\x09\x6a\x0a\x27\x29\x31\x28\x27\x6e\x5c\x42\x40\x5b\x2d");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x2c\x38\x3c\x64\x79\x59\x29\x37\x24\x6b\x6b\x6e\x38\x43\x66\x2f\x09\x6a\x0a\x27\x29\x31\x28\x27\x6e\x5c\x42\x40\x5b\x2d",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_12( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			forwardSlash,
			leftAngle,
			intConst,
			lexicalError,
			leftSquare,
			variableName,
			rightParen,
			variableName,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			forwardSlash,
			variableName,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"forwardSlash",
			"leftAngle",
			"intConst",
			"lexicalError",
			"leftSquare",
			"variableName",
			"rightParen",
			"variableName",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"forwardSlash",
			"variableName",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\143\110\000",
			"\041\000",
			"\174\000",
			"\125\000",
			"\107\000",
			"\137\000",
			"\064\000",
			"\166\156\115\066\000",
			"\057\000",
			"\074\000",
			"\066\000",
			"\127\000",
			"\133\000",
			"\160\142\066\104\000",
			"\051\000",
			"\155\132\067\122\000",
			"\042\000",
			"\066\000",
			"\144\000",
			"\046\000",
			"\057\000",
			"\172\060\131\170\000",
			"\044\000",
			"\070\000",
			"\000",
		};
		int _rubric_s = 25;
      sprintf(str,"'%s' Random String Failed\n","\x63\x48\x21\x7c\x55\x47\x5f\x34\x76\x6e\x4d\x36\x2f\x3c\x36\x57\x5b\x70\x62\x36\x44\x29\x6d\x5a\x37\x52\x22\x36\x64\x26\x2f\x7a\x30\x59\x78\x24\x38\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x63\x48\x21\x7c\x55\x47\x5f\x34\x76\x6e\x4d\x36\x2f\x3c\x36\x57\x5b\x70\x62\x36\x44\x29\x6d\x5a\x37\x52\x22\x36\x64\x26\x2f\x7a\x30\x59\x78\x24\x38\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_13( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\127\000",
			"\123\000",
			"\077\000",
			"\156\116\107\000",
			"\042\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 7;
      sprintf(str,"'%s' Random String Failed\n","\x57\x53\x3f\x6e\x4e\x47\x22\x09\x29");
      TSM_ASSERT(str,checkAgainstRubric("\x57\x53\x3f\x6e\x4e\x47\x22\x09\x29",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_14( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\171\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","\x70\x79");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x79",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_15( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			variableName,
			colon,
			variableName,
			lexicalError,
			rightAngle,
			variableName,
			leftAngle,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"variableName",
			"colon",
			"variableName",
			"lexicalError",
			"rightAngle",
			"variableName",
			"leftAngle",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\164\000",
			"\072\000",
			"\151\143\000",
			"\100\000",
			"\076\000",
			"\153\000",
			"\074\000",
			"\114\000",
			"\130\000",
			"\044\000",
			"\151\147\163\112\000",
			"\174\000",
			"\107\000",
			"\151\163\000",
			"\000",
		};
		int _rubric_s = 16;
      sprintf(str,"'%s' Random String Failed\n","\x3c\x74\x3a\x69\x63\x40\x3e\x6b\x3c\x4c\x58\x24\x69\x67\x73\x4a\x7c\x47\x69\x73");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x74\x3a\x69\x63\x40\x3e\x6b\x3c\x4c\x58\x24\x69\x67\x73\x4a\x7c\x47\x69\x73",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_16( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			star,
			lexicalError,
			dash,
			variableName,
			lexicalError,
			colon,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"star",
			"lexicalError",
			"dash",
			"variableName",
			"lexicalError",
			"colon",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\000",
			"\052\000",
			"\140\000",
			"\055\000",
			"\150\156\157\146\117\000",
			"\041\000",
			"\072\000",
			"\140\000",
			"\056\000",
			"\114\000",
			"\101\000",
			"\113\000",
			"\174\000",
			"\116\000",
			"\120\000",
			"\000",
		};
		int _rubric_s = 16;
      sprintf(str,"'%s' Random String Failed\n","\x6e\x2a\x60\x2d\x68\x6e\x6f\x66\x4f\x21\x3a\x60\x2e\x4c\x20\x41\x4b\x7c\x4e\x09\x50");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x2a\x60\x2d\x68\x6e\x6f\x66\x4f\x21\x3a\x60\x2e\x4c\x20\x41\x4b\x7c\x4e\x09\x50",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_17( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\000",
			"\122\000",
			"\070\000",
			"\151\137\130\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","\x37\x52\x38\x69\x5f\x58");
      TSM_ASSERT(str,checkAgainstRubric("\x37\x52\x38\x69\x5f\x58",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_18( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			semiColon,
			variableName,
			rightAngle,
			lexicalError,
			variableName,
			percent,
			lexicalError,
			rightParen,
			lexicalError,
			variableName,
			forwardSlash,
			variableName,
			forwardSlash,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"semiColon",
			"variableName",
			"rightAngle",
			"lexicalError",
			"variableName",
			"percent",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"variableName",
			"forwardSlash",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\122\000",
			"\131\000",
			"\131\000",
			"\067\000",
			"\157\000",
			"\073\000",
			"\164\152\000",
			"\076\000",
			"\124\000",
			"\165\114\000",
			"\045\000",
			"\111\000",
			"\051\000",
			"\044\000",
			"\171\000",
			"\057\000",
			"\154\065\070\131\000",
			"\057\000",
			"\065\060\000",
			"\123\000",
			"\104\000",
			"\131\000",
			"\176\000",
			"\155\126\061\166\127\144\000",
			"\176\000",
			"\121\000",
			"\140\000",
			"\161\146\165\141\150\066\000",
			"\000",
		};
		int _rubric_s = 29;
      sprintf(str,"'%s' Random String Failed\n","\x52\x59\x59\x37\x6f\x3b\x74\x6a\x3e\x54\x75\x4c\x25\x49\x29\x24\x79\x2f\x6c\x35\x38\x59\x2f\x35\x30\x53\x44\x0a\x59\x7e\x6d\x56\x31\x76\x57\x64\x7e\x51\x60\x71\x66\x75\x61\x68\x36");
      TSM_ASSERT(str,checkAgainstRubric("\x52\x59\x59\x37\x6f\x3b\x74\x6a\x3e\x54\x75\x4c\x25\x49\x29\x24\x79\x2f\x6c\x35\x38\x59\x2f\x35\x30\x53\x44\x0a\x59\x7e\x6d\x56\x31\x76\x57\x64\x7e\x51\x60\x71\x66\x75\x61\x68\x36",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_19( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\000",
			"\061\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","\x53\x31");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x31",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_20( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			leftParen,
			comma,
			lexicalError,
			backSlash,
			dash,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			intConst,
			variableName,
			backSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"leftParen",
			"comma",
			"lexicalError",
			"backSlash",
			"dash",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"intConst",
			"variableName",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\105\000",
			"\050\000",
			"\054\000",
			"\112\000",
			"\134\000",
			"\055\000",
			"\112\000",
			"\140\000",
			"\167\101\000",
			"\073\000",
			"\062\000",
			"\165\120\157\000",
			"\134\000",
			"\044\000",
			"\132\000",
			"\107\000",
			"\071\000",
			"\116\000",
			"\000",
		};
		int _rubric_s = 19;
      sprintf(str,"'%s' Random String Failed\n","\x45\x28\x2c\x4a\x5c\x2d\x4a\x60\x77\x41\x3b\x32\x75\x50\x6f\x5c\x24\x5a\x47\x39\x4e");
      TSM_ASSERT(str,checkAgainstRubric("\x45\x28\x2c\x4a\x5c\x2d\x4a\x60\x77\x41\x3b\x32\x75\x50\x6f\x5c\x24\x5a\x47\x39\x4e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_21( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			star,
			variableName,
			rightAngle,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"star",
			"variableName",
			"rightAngle",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\141\105\000",
			"\056\000",
			"\052\000",
			"\150\165\105\102\000",
			"\076\000",
			"\166\153\066\110\171\106\154\112\000",
			"\077\000",
			"\000",
		};
		int _rubric_s = 8;
      sprintf(str,"'%s' Random String Failed\n","\x61\x45\x2e\x2a\x68\x75\x45\x42\x3e\x76\x6b\x36\x48\x79\x46\x6c\x4a\x3f");
      TSM_ASSERT(str,checkAgainstRubric("\x61\x45\x2e\x2a\x68\x75\x45\x42\x3e\x76\x6b\x36\x48\x79\x46\x6c\x4a\x3f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_22( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			rightSquare,
			leftParen,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			star,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			lexicalError,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"rightSquare",
			"leftParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"star",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\107\000",
			"\135\000",
			"\050\000",
			"\172\000",
			"\043\000",
			"\056\000",
			"\041\000",
			"\052\000",
			"\141\000",
			"\174\000",
			"\047\000",
			"\141\171\155\105\137\165\000",
			"\047\000",
			"\163\107\112\000",
			"\050\000",
			"\047\000",
			"\112\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 19;
      sprintf(str,"'%s' Random String Failed\n","\x47\x5d\x28\x7a\x23\x2e\x21\x2a\x61\x7c\x27\x61\x79\x6d\x45\x5f\x75\x27\x0a\x73\x47\x4a\x28\x27\x4a\x3d");
      TSM_ASSERT(str,checkAgainstRubric("\x47\x5d\x28\x7a\x23\x2e\x21\x2a\x61\x7c\x27\x61\x79\x6d\x45\x5f\x75\x27\x0a\x73\x47\x4a\x28\x27\x4a\x3d",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_23( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			percent,
			lexicalError,
			lexicalError,
			leftParen,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			percent,
			stringConst,
			lexicalError,
			forwardSlash,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			backSlash,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			plusSign,
			lexicalError,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"percent",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"percent",
			"stringConst",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"backSlash",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"plusSign",
			"lexicalError",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\165\063\126\125\060\000",
			"\045\000",
			"\117\000",
			"\043\000",
			"\050\000",
			"\165\000",
			"\044\000",
			"\122\000",
			"\127\000",
			"\117\000",
			"\115\000",
			"\045\000",
			"\042\171\110\046\100\043\147\071\167\103\057\042\000",
			"\117\000",
			"\057\000",
			"\105\000",
			"\136\000",
			"\141\000",
			"\051\000",
			"\114\000",
			"\047\000",
			"\144\163\137\000",
			"\046\000",
			"\117\000",
			"\044\000",
			"\044\000",
			"\167\000",
			"\134\000",
			"\112\000",
			"\170\131\066\167\000",
			"\042\000",
			"\146\000",
			"\053\000",
			"\047\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 36;
      sprintf(str,"'%s' Random String Failed\n","\x75\x33\x56\x55\x30\x25\x4f\x23\x28\x75\x24\x52\x57\x4f\x4d\x25\x22\x79\x48\x26\x40\x23\x67\x39\x77\x43\x2f\x22\x4f\x2f\x45\x5e\x61\x29\x4c\x20\x27\x64\x73\x5f\x26\x4f\x24\x24\x77\x5c\x4a\x78\x59\x36\x77\x22\x66\x2b\x27\x28");
      TSM_ASSERT(str,checkAgainstRubric("\x75\x33\x56\x55\x30\x25\x4f\x23\x28\x75\x24\x52\x57\x4f\x4d\x25\x22\x79\x48\x26\x40\x23\x67\x39\x77\x43\x2f\x22\x4f\x2f\x45\x5e\x61\x29\x4c\x20\x27\x64\x73\x5f\x26\x4f\x24\x24\x77\x5c\x4a\x78\x59\x36\x77\x22\x66\x2b\x27\x28",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_24( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			leftParen,
			dash,
			leftSquare,
			backSlash,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"dash",
			"leftSquare",
			"backSlash",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\112\000",
			"\101\000",
			"\106\000",
			"\163\147\000",
			"\044\000",
			"\041\000",
			"\117\000",
			"\050\000",
			"\055\000",
			"\133\000",
			"\134\000",
			"\136\000",
			"\142\000",
			"\000",
		};
		int _rubric_s = 14;
      sprintf(str,"'%s' Random String Failed\n","\x4a\x41\x46\x73\x67\x24\x21\x4f\x28\x2d\x5b\x5c\x5e\x62");
      TSM_ASSERT(str,checkAgainstRubric("\x4a\x41\x46\x73\x67\x24\x21\x4f\x28\x2d\x5b\x5c\x5e\x62",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_25( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			stringConst,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			plusSign,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"stringConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"plusSign",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\156\143\000",
			"\043\000",
			"\123\000",
			"\125\000",
			"\105\000",
			"\136\000",
			"\162\152\114\161\000",
			"\041\000",
			"\056\000",
			"\042\146\152\066\144\112\152\151\157\163\050\123\041\117\042\000",
			"\114\000",
			"\176\000",
			"\101\000",
			"\160\103\152\000",
			"\053\000",
			"\125\000",
			"\161\000",
			"\000",
		};
		int _rubric_s = 19;
      sprintf(str,"'%s' Random String Failed\n","\x2a\x6e\x63\x23\x53\x55\x45\x5e\x72\x6a\x4c\x71\x21\x2e\x22\x66\x6a\x36\x64\x4a\x6a\x69\x6f\x73\x28\x53\x21\x4f\x22\x4c\x7e\x41\x70\x43\x6a\x2b\x55\x71");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x6e\x63\x23\x53\x55\x45\x5e\x72\x6a\x4c\x71\x21\x2e\x22\x66\x6a\x36\x64\x4a\x6a\x69\x6f\x73\x28\x53\x21\x4f\x22\x4c\x7e\x41\x70\x43\x6a\x2b\x55\x71",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_26( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			forwardSlash,
			variableName,
			leftParen,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"forwardSlash",
			"variableName",
			"leftParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\047\000",
			"\057\000",
			"\172\137\156\063\132\103\117\067\153\121\146\170\064\117\000",
			"\050\000",
			"\113\000",
			"\167\146\000",
			"\174\000",
			"\171\160\105\111\123\101\000",
			"\000",
		};
		int _rubric_s = 9;
      sprintf(str,"'%s' Random String Failed\n","\x27\x20\x2f\x7a\x5f\x6e\x33\x5a\x43\x4f\x37\x6b\x51\x66\x78\x34\x4f\x28\x4b\x77\x66\x7c\x79\x70\x45\x49\x53\x41");
      TSM_ASSERT(str,checkAgainstRubric("\x27\x20\x2f\x7a\x5f\x6e\x33\x5a\x43\x4f\x37\x6b\x51\x66\x78\x34\x4f\x28\x4b\x77\x66\x7c\x79\x70\x45\x49\x53\x41",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_27( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\116\000",
			"\155\143\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","\x4e\x6d\x63");
      TSM_ASSERT(str,checkAgainstRubric("\x4e\x6d\x63",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_28( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			variableName,
			plusSign,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			colon,
			percent,
			lexicalError,
			lexicalError,
			lexicalError,
			equalsSign,
			colon,
			percent,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			dash,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			rightSquare,
			lexicalError,
			backSlash,
			equalsSign,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			leftSquare,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"variableName",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"colon",
			"percent",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"equalsSign",
			"colon",
			"percent",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"dash",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightSquare",
			"lexicalError",
			"backSlash",
			"equalsSign",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftSquare",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\000",
			"\120\000",
			"\156\154\170\000",
			"\053\000",
			"\107\000",
			"\102\000",
			"\121\000",
			"\132\000",
			"\123\000",
			"\174\000",
			"\170\171\000",
			"\073\000",
			"\072\000",
			"\045\000",
			"\044\000",
			"\106\000",
			"\115\000",
			"\075\000",
			"\072\000",
			"\045\000",
			"\167\131\000",
			"\140\000",
			"\106\000",
			"\161\103\111\000",
			"\055\000",
			"\167\110\067\152\000",
			"\056\000",
			"\113\000",
			"\170\000",
			"\135\000",
			"\110\000",
			"\134\000",
			"\075\000",
			"\151\000",
			"\043\000",
			"\101\000",
			"\143\000",
			"\133\000",
			"\124\000",
			"\176\000",
			"\107\000",
			"\000",
		};
		int _rubric_s = 42;
      sprintf(str,"'%s' Random String Failed\n","\x31\x50\x6e\x6c\x78\x2b\x47\x42\x51\x20\x5a\x53\x7c\x78\x79\x3b\x3a\x25\x24\x46\x4d\x3d\x3a\x25\x77\x59\x60\x46\x71\x43\x49\x2d\x77\x48\x37\x6a\x2e\x4b\x78\x5d\x48\x5c\x3d\x69\x23\x41\x63\x5b\x54\x7e\x20\x47");
      TSM_ASSERT(str,checkAgainstRubric("\x31\x50\x6e\x6c\x78\x2b\x47\x42\x51\x20\x5a\x53\x7c\x78\x79\x3b\x3a\x25\x24\x46\x4d\x3d\x3a\x25\x77\x59\x60\x46\x71\x43\x49\x2d\x77\x48\x37\x6a\x2e\x4b\x78\x5d\x48\x5c\x3d\x69\x23\x41\x63\x5b\x54\x7e\x20\x47",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_29( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			comma,
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			variableName,
			colon,
			variableName,
			leftParen,
			intConst,
			variableName,
			leftAngle,
			lexicalError,
			variableName,
			backSlash,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"comma",
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"variableName",
			"colon",
			"variableName",
			"leftParen",
			"intConst",
			"variableName",
			"leftAngle",
			"lexicalError",
			"variableName",
			"backSlash",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\142\155\000",
			"\047\000",
			"\111\000",
			"\152\127\062\132\000",
			"\054\000",
			"\113\000",
			"\156\167\000",
			"\073\000",
			"\041\000",
			"\153\000",
			"\072\000",
			"\156\000",
			"\050\000",
			"\066\000",
			"\152\000",
			"\074\000",
			"\042\000",
			"\163\000",
			"\134\000",
			"\064\065\000",
			"\140\000",
			"\137\000",
			"\127\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 25;
      sprintf(str,"'%s' Random String Failed\n","\x62\x6d\x09\x27\x49\x6a\x57\x32\x5a\x2c\x4b\x6e\x77\x3b\x21\x6b\x3a\x6e\x28\x36\x6a\x3c\x22\x73\x5c\x34\x35\x60\x5f\x57\x29");
      TSM_ASSERT(str,checkAgainstRubric("\x62\x6d\x09\x27\x49\x6a\x57\x32\x5a\x2c\x4b\x6e\x77\x3b\x21\x6b\x3a\x6e\x28\x36\x6a\x3c\x22\x73\x5c\x34\x35\x60\x5f\x57\x29",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_30( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			dash,
			comma,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			dash,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"dash",
			"comma",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"dash",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\000",
			"\055\000",
			"\054\000",
			"\060\000",
			"\044\000",
			"\126\000",
			"\104\000",
			"\127\000",
			"\055\000",
			"\150\137\071\113\000",
			"\000",
		};
		int _rubric_s = 11;
      sprintf(str,"'%s' Random String Failed\n","\x49\x2d\x2c\x30\x24\x56\x44\x57\x2d\x68\x5f\x39\x4b");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x2d\x2c\x30\x24\x56\x44\x57\x2d\x68\x5f\x39\x4b",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_31( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			star,
			lexicalError,
			variableName,
			equalsSign,
			variableName,
			leftAngle,
			variableName,
			rightAngle,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"star",
			"lexicalError",
			"variableName",
			"equalsSign",
			"variableName",
			"leftAngle",
			"variableName",
			"rightAngle",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\151\137\000",
			"\174\000",
			"\043\000",
			"\077\000",
			"\123\000",
			"\041\000",
			"\052\000",
			"\123\000",
			"\146\132\000",
			"\075\000",
			"\154\141\126\123\161\147\162\153\114\114\163\157\101\161\156\106\000",
			"\074\000",
			"\144\000",
			"\076\000",
			"\155\000",
			"\000",
		};
		int _rubric_s = 16;
      sprintf(str,"'%s' Random String Failed\n","\x66\x69\x5f\x7c\x23\x3f\x53\x21\x2a\x53\x66\x5a\x3d\x6c\x61\x56\x53\x71\x67\x72\x6b\x4c\x4c\x73\x6f\x41\x71\x6e\x46\x3c\x64\x3e\x6d");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x69\x5f\x7c\x23\x3f\x53\x21\x2a\x53\x66\x5a\x3d\x6c\x61\x56\x53\x71\x67\x72\x6b\x4c\x4c\x73\x6f\x41\x71\x6e\x46\x3c\x64\x3e\x6d",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_32( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			semiColon,
			lexicalError,
			leftAngle,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"semiColon",
			"lexicalError",
			"leftAngle",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\157\162\141\130\000",
			"\100\000",
			"\120\000",
			"\125\000",
			"\073\000",
			"\174\000",
			"\074\000",
			"\150\107\063\120\066\102\066\113\137\125\000",
			"\041\000",
			"\103\000",
			"\111\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 14;
      sprintf(str,"'%s' Random String Failed\n","\x3e\x6f\x72\x61\x58\x40\x50\x55\x3b\x7c\x3c\x68\x47\x33\x50\x36\x42\x36\x4b\x5f\x55\x21\x43\x49\x28");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x6f\x72\x61\x58\x40\x50\x55\x3b\x7c\x3c\x68\x47\x33\x50\x36\x42\x36\x4b\x5f\x55\x21\x43\x49\x28",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_33( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			leftSquare,
			leftParen,
			lexicalError,
			variableName,
			star,
			variableName,
			star,
			variableName,
			intConst,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			rightSquare,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftSquare",
			"leftParen",
			"lexicalError",
			"variableName",
			"star",
			"variableName",
			"star",
			"variableName",
			"intConst",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightSquare",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\121\000",
			"\077\000",
			"\047\000",
			"\133\000",
			"\050\000",
			"\140\000",
			"\164\153\113\126\131\142\120\157\000",
			"\052\000",
			"\162\153\000",
			"\052\000",
			"\143\000",
			"\071\000",
			"\132\000",
			"\104\000",
			"\070\065\000",
			"\102\000",
			"\123\000",
			"\122\000",
			"\141\000",
			"\105\000",
			"\135\000",
			"\101\000",
			"\000",
		};
		int _rubric_s = 23;
      sprintf(str,"'%s' Random String Failed\n","\x51\x3f\x27\x5b\x28\x60\x74\x6b\x4b\x56\x59\x62\x50\x6f\x2a\x72\x6b\x2a\x63\x09\x39\x5a\x44\x38\x35\x42\x53\x52\x61\x20\x45\x5d\x41");
      TSM_ASSERT(str,checkAgainstRubric("\x51\x3f\x27\x5b\x28\x60\x74\x6b\x4b\x56\x59\x62\x50\x6f\x2a\x72\x6b\x2a\x63\x09\x39\x5a\x44\x38\x35\x42\x53\x52\x61\x20\x45\x5d\x41",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_34( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			plusSign,
			lexicalError,
			leftParen,
			intConst,
			equalsSign,
			backSlash,
			lexicalError,
			lexicalError,
			comma,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			leftAngle,
			lexicalError,
			lexicalError,
			variableName,
			leftSquare,
			forwardSlash,
			variableName,
			backSlash,
			intConst,
			forwardSlash,
			forwardSlash,
			variableName,
			leftParen,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"plusSign",
			"lexicalError",
			"leftParen",
			"intConst",
			"equalsSign",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"comma",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"leftAngle",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftSquare",
			"forwardSlash",
			"variableName",
			"backSlash",
			"intConst",
			"forwardSlash",
			"forwardSlash",
			"variableName",
			"leftParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\067\105\065\113\063\163\000",
			"\056\000",
			"\046\000",
			"\127\000",
			"\146\000",
			"\047\000",
			"\174\000",
			"\060\000",
			"\111\000",
			"\170\127\103\000",
			"\053\000",
			"\174\000",
			"\050\000",
			"\070\000",
			"\075\000",
			"\134\000",
			"\140\000",
			"\056\000",
			"\054\000",
			"\125\000",
			"\132\000",
			"\066\000",
			"\043\000",
			"\105\000",
			"\074\000",
			"\131\000",
			"\042\000",
			"\157\000",
			"\133\000",
			"\057\000",
			"\152\000",
			"\134\000",
			"\062\000",
			"\057\000",
			"\057\000",
			"\156\000",
			"\050\000",
			"\170\000",
			"\044\000",
			"\116\000",
			"\153\000",
			"\043\000",
			"\141\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 45;
      sprintf(str,"'%s' Random String Failed\n","\x65\x37\x45\x35\x4b\x33\x73\x2e\x26\x57\x66\x27\x7c\x30\x49\x78\x57\x43\x2b\x7c\x28\x38\x3d\x5c\x60\x2e\x2c\x55\x5a\x36\x23\x45\x3c\x59\x22\x6f\x5b\x2f\x09\x6a\x5c\x32\x2f\x2f\x6e\x28\x78\x24\x4e\x6b\x23\x61\x2a");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x37\x45\x35\x4b\x33\x73\x2e\x26\x57\x66\x27\x7c\x30\x49\x78\x57\x43\x2b\x7c\x28\x38\x3d\x5c\x60\x2e\x2c\x55\x5a\x36\x23\x45\x3c\x59\x22\x6f\x5b\x2f\x09\x6a\x5c\x32\x2f\x2f\x6e\x28\x78\x24\x4e\x6b\x23\x61\x2a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_35( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			forwardSlash,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			colon,
			backSlash,
			lexicalError,
			forwardSlash,
			intConst,
			rightParen,
			lexicalError,
			lexicalError,
			lexicalError,
			semiColon,
			variableName,
			semiColon,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"forwardSlash",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"colon",
			"backSlash",
			"lexicalError",
			"forwardSlash",
			"intConst",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"semiColon",
			"variableName",
			"semiColon",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\057\000",
			"\071\000",
			"\145\000",
			"\176\000",
			"\125\000",
			"\166\127\150\000",
			"\124\000",
			"\114\000",
			"\171\000",
			"\072\000",
			"\134\000",
			"\041\000",
			"\057\000",
			"\061\000",
			"\051\000",
			"\105\000",
			"\115\000",
			"\122\000",
			"\073\000",
			"\171\000",
			"\073\000",
			"\104\000",
			"\000",
		};
		int _rubric_s = 24;
      sprintf(str,"'%s' Random String Failed\n","\x28\x2f\x39\x65\x0a\x7e\x55\x76\x57\x68\x09\x54\x4c\x79\x3a\x5c\x21\x2f\x31\x29\x45\x4d\x52\x3b\x79\x3b\x44");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x2f\x39\x65\x0a\x7e\x55\x76\x57\x68\x09\x54\x4c\x79\x3a\x5c\x21\x2f\x31\x29\x45\x4d\x52\x3b\x79\x3b\x44",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_36( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			intConst,
			lexicalError,
			backSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			variableName,
			lexicalError,
			dash,
			dash,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			leftParen,
			lexicalError,
			lexicalError,
			comma,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"intConst",
			"lexicalError",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"variableName",
			"lexicalError",
			"dash",
			"dash",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"comma",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\071\000",
			"\104\000",
			"\134\000",
			"\102\000",
			"\102\000",
			"\103\000",
			"\166\000",
			"\050\000",
			"\152\121\162\103\166\000",
			"\100\000",
			"\055\000",
			"\055\000",
			"\100\000",
			"\171\123\170\000",
			"\176\000",
			"\066\000",
			"\124\000",
			"\170\110\115\153\062\000",
			"\043\000",
			"\050\000",
			"\127\000",
			"\115\000",
			"\054\000",
			"\151\071\165\000",
			"\077\000",
			"\000",
		};
		int _rubric_s = 27;
      sprintf(str,"'%s' Random String Failed\n","\x2d\x39\x44\x5c\x42\x42\x43\x76\x28\x6a\x51\x72\x43\x76\x40\x2d\x2d\x40\x79\x53\x78\x7e\x36\x54\x78\x48\x4d\x6b\x32\x23\x28\x57\x4d\x2c\x69\x39\x75\x3f");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x39\x44\x5c\x42\x42\x43\x76\x28\x6a\x51\x72\x43\x76\x40\x2d\x2d\x40\x79\x53\x78\x7e\x36\x54\x78\x48\x4d\x6b\x32\x23\x28\x57\x4d\x2c\x69\x39\x75\x3f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_37( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			lexicalError,
			leftParen,
			lexicalError,
			intConst,
			lexicalError,
			comma,
			lexicalError,
			intConst,
			variableName,
			leftParen,
			lexicalError,
			lexicalError,
			leftParen,
			variableName,
			rightParen,
			intConst,
			dash,
			semiColon,
			rightParen,
			variableName,
			semiColon,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			backSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"lexicalError",
			"intConst",
			"lexicalError",
			"comma",
			"lexicalError",
			"intConst",
			"variableName",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"variableName",
			"rightParen",
			"intConst",
			"dash",
			"semiColon",
			"rightParen",
			"variableName",
			"semiColon",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\064\071\065\000",
			"\043\000",
			"\136\000",
			"\050\000",
			"\126\000",
			"\071\000",
			"\106\000",
			"\054\000",
			"\111\000",
			"\071\000",
			"\150\167\162\000",
			"\050\000",
			"\041\000",
			"\100\000",
			"\050\000",
			"\144\160\000",
			"\051\000",
			"\061\000",
			"\055\000",
			"\073\000",
			"\051\000",
			"\142\000",
			"\073\000",
			"\064\000",
			"\103\000",
			"\176\000",
			"\167\000",
			"\134\000",
			"\136\000",
			"\174\000",
			"\102\000",
			"\067\000",
			"\000",
		};
		int _rubric_s = 33;
      sprintf(str,"'%s' Random String Failed\n","\x31\x34\x39\x35\x23\x5e\x28\x56\x39\x09\x46\x2c\x49\x39\x68\x77\x72\x28\x21\x40\x28\x64\x70\x29\x31\x2d\x3b\x29\x62\x3b\x34\x43\x7e\x77\x5c\x5e\x7c\x42\x37");
      TSM_ASSERT(str,checkAgainstRubric("\x31\x34\x39\x35\x23\x5e\x28\x56\x39\x09\x46\x2c\x49\x39\x68\x77\x72\x28\x21\x40\x28\x64\x70\x29\x31\x2d\x3b\x29\x62\x3b\x34\x43\x7e\x77\x5c\x5e\x7c\x42\x37",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_38( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			backSlash,
			variableName,
			variableName,
			backSlash,
			forwardSlash,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"backSlash",
			"variableName",
			"variableName",
			"backSlash",
			"forwardSlash",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\126\000",
			"\044\000",
			"\104\000",
			"\113\000",
			"\141\000",
			"\176\000",
			"\056\000",
			"\110\000",
			"\042\000",
			"\122\000",
			"\134\000",
			"\154\106\000",
			"\156\156\170\137\071\163\160\110\000",
			"\134\000",
			"\057\000",
			"\163\000",
			"\047\000",
			"\126\000",
			"\151\000",
			"\000",
		};
		int _rubric_s = 20;
      sprintf(str,"'%s' Random String Failed\n","\x68\x56\x24\x44\x4b\x61\x7e\x2e\x48\x22\x52\x5c\x6c\x46\x20\x6e\x6e\x78\x5f\x39\x73\x70\x48\x5c\x2f\x73\x27\x56\x69");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x56\x24\x44\x4b\x61\x7e\x2e\x48\x22\x52\x5c\x6c\x46\x20\x6e\x6e\x78\x5f\x39\x73\x70\x48\x5c\x2f\x73\x27\x56\x69",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_39( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			percent,
			lexicalError,
			leftParen,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"percent",
			"lexicalError",
			"leftParen",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\000",
			"\100\000",
			"\063\000",
			"\162\107\117\000",
			"\124\000",
			"\104\000",
			"\144\000",
			"\045\000",
			"\121\000",
			"\050\000",
			"\061\065\071\071\000",
			"\172\122\114\150\000",
			"\000",
		};
		int _rubric_s = 13;
      sprintf(str,"'%s' Random String Failed\n","\x6e\x40\x33\x72\x47\x4f\x20\x54\x44\x64\x25\x09\x51\x28\x31\x35\x39\x39\x7a\x52\x4c\x68");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x40\x33\x72\x47\x4f\x20\x54\x44\x64\x25\x09\x51\x28\x31\x35\x39\x39\x7a\x52\x4c\x68",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_40( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightAngle,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightAngle",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\076\000",
			"\136\000",
			"\143\110\127\154\102\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","\x3e\x5e\x63\x48\x57\x6c\x42");
      TSM_ASSERT(str,checkAgainstRubric("\x3e\x5e\x63\x48\x57\x6c\x42",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_41( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			lexicalError,
			rightParen,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			variableName,
			semiColon,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			plusSign,
			variableName,
			colon,
			lexicalError,
			rightParen,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"variableName",
			"semiColon",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"plusSign",
			"variableName",
			"colon",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\176\000",
			"\164\123\130\000",
			"\056\000",
			"\051\000",
			"\171\102\063\000",
			"\042\000",
			"\113\000",
			"\060\000",
			"\126\000",
			"\104\000",
			"\153\000",
			"\073\000",
			"\110\000",
			"\164\101\104\170\143\160\000",
			"\073\000",
			"\062\000",
			"\170\153\124\000",
			"\077\000",
			"\126\000",
			"\053\000",
			"\146\000",
			"\072\000",
			"\112\000",
			"\051\000",
			"\105\000",
			"\067\000",
			"\157\000",
			"\000",
		};
		int _rubric_s = 28;
      sprintf(str,"'%s' Random String Failed\n","\x7e\x74\x53\x58\x2e\x29\x79\x42\x33\x22\x4b\x30\x56\x44\x6b\x3b\x48\x74\x41\x44\x78\x63\x70\x3b\x32\x78\x6b\x54\x3f\x56\x2b\x66\x3a\x4a\x29\x45\x37\x6f");
      TSM_ASSERT(str,checkAgainstRubric("\x7e\x74\x53\x58\x2e\x29\x79\x42\x33\x22\x4b\x30\x56\x44\x6b\x3b\x48\x74\x41\x44\x78\x63\x70\x3b\x32\x78\x6b\x54\x3f\x56\x2b\x66\x3a\x4a\x29\x45\x37\x6f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_42( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			colon,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			backSlash,
			variableName,
			tupleOp,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"colon",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"backSlash",
			"variableName",
			"tupleOp",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\115\000",
			"\043\000",
			"\072\000",
			"\154\142\000",
			"\140\000",
			"\122\000",
			"\156\163\000",
			"\047\000",
			"\107\000",
			"\134\000",
			"\161\166\000",
			"\043\070\000",
			"\171\107\000",
			"\000",
		};
		int _rubric_s = 14;
      sprintf(str,"'%s' Random String Failed\n","\x4d\x23\x3a\x6c\x62\x60\x52\x6e\x73\x27\x47\x5c\x71\x76\x23\x38\x79\x47");
      TSM_ASSERT(str,checkAgainstRubric("\x4d\x23\x3a\x6c\x62\x60\x52\x6e\x73\x27\x47\x5c\x71\x76\x23\x38\x79\x47",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_43( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			percent,
			lexicalError,
			colon,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			percent,
			lexicalError,
			lexicalError,
			lexicalError,
			star,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"percent",
			"lexicalError",
			"colon",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"percent",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"star",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\000",
			"\045\000",
			"\103\000",
			"\072\000",
			"\160\000",
			"\174\000",
			"\122\000",
			"\123\000",
			"\127\000",
			"\167\000",
			"\045\000",
			"\112\000",
			"\140\000",
			"\105\000",
			"\052\000",
			"\174\000",
			"\063\000",
			"\167\060\000",
			"\100\000",
			"\000",
		};
		int _rubric_s = 20;
      sprintf(str,"'%s' Random String Failed\n","\x74\x25\x43\x3a\x0a\x70\x7c\x52\x53\x57\x77\x25\x4a\x60\x45\x2a\x7c\x33\x77\x30\x40");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x25\x43\x3a\x0a\x70\x7c\x52\x53\x57\x77\x25\x4a\x60\x45\x2a\x7c\x33\x77\x30\x40",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_44( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\077\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","\x5c\x3f");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x3f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_45( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			lexicalError,
			lexicalError,
			forwardSlash,
			intConst,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			backSlash,
			variableName,
			dash,
			backSlash,
			variableName,
			leftParen,
			lexicalError,
			variableName,
			star,
			stringConst,
			lexicalError,
			lexicalError,
			lexicalError,
			plusSign,
			lexicalError,
			lexicalError,
			intConst,
			comma,
			comma,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"lexicalError",
			"lexicalError",
			"forwardSlash",
			"intConst",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"backSlash",
			"variableName",
			"dash",
			"backSlash",
			"variableName",
			"leftParen",
			"lexicalError",
			"variableName",
			"star",
			"stringConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"intConst",
			"comma",
			"comma",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\110\000",
			"\111\000",
			"\057\000",
			"\066\000",
			"\112\000",
			"\111\000",
			"\062\065\000",
			"\123\000",
			"\144\000",
			"\174\000",
			"\157\137\162\000",
			"\134\000",
			"\152\155\071\161\000",
			"\055\000",
			"\134\000",
			"\141\101\163\104\144\157\163\157\000",
			"\050\000",
			"\104\000",
			"\157\000",
			"\052\000",
			"\042\050\171\106\120\073\061\053\101\133\044\042\000",
			"\120\000",
			"\176\000",
			"\124\000",
			"\053\000",
			"\056\000",
			"\106\000",
			"\070\000",
			"\054\000",
			"\054\000",
			"\150\000",
			"\000",
		};
		int _rubric_s = 33;
      sprintf(str,"'%s' Random String Failed\n","\x5b\x48\x49\x2f\x36\x4a\x49\x32\x35\x53\x64\x7c\x6f\x5f\x72\x5c\x6a\x6d\x39\x71\x2d\x5c\x61\x41\x73\x44\x64\x6f\x73\x6f\x28\x44\x6f\x2a\x22\x28\x79\x46\x50\x3b\x31\x2b\x41\x5b\x24\x22\x50\x7e\x54\x2b\x2e\x46\x38\x2c\x2c\x68");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x48\x49\x2f\x36\x4a\x49\x32\x35\x53\x64\x7c\x6f\x5f\x72\x5c\x6a\x6d\x39\x71\x2d\x5c\x61\x41\x73\x44\x64\x6f\x73\x6f\x28\x44\x6f\x2a\x22\x28\x79\x46\x50\x3b\x31\x2b\x41\x5b\x24\x22\x50\x7e\x54\x2b\x2e\x46\x38\x2c\x2c\x68",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_46( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			percent,
			lexicalError,
			lexicalError,
			lexicalError,
			leftParen,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			rightAngle,
			lexicalError,
			variableName,
			rightParen,
			dash,
			lexicalError,
			variableName,
			dash,
			lexicalError,
			lexicalError,
			rightParen,
			intConst,
			forwardSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftSquare,
			star,
			lexicalError,
			lexicalError,
			lexicalError,
			rightParen,
			variableName,
			comma,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"percent",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightAngle",
			"lexicalError",
			"variableName",
			"rightParen",
			"dash",
			"lexicalError",
			"variableName",
			"dash",
			"lexicalError",
			"lexicalError",
			"rightParen",
			"intConst",
			"forwardSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftSquare",
			"star",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"rightParen",
			"variableName",
			"comma",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\160\107\163\132\066\144\065\137\000",
			"\045\000",
			"\110\000",
			"\042\000",
			"\122\000",
			"\050\000",
			"\121\000",
			"\070\000",
			"\056\000",
			"\100\000",
			"\141\000",
			"\076\000",
			"\130\000",
			"\172\117\000",
			"\051\000",
			"\055\000",
			"\117\000",
			"\167\130\062\116\000",
			"\055\000",
			"\140\000",
			"\111\000",
			"\051\000",
			"\062\000",
			"\057\000",
			"\121\000",
			"\126\000",
			"\113\000",
			"\143\000",
			"\133\000",
			"\052\000",
			"\176\000",
			"\101\000",
			"\123\000",
			"\051\000",
			"\170\103\063\000",
			"\054\000",
			"\043\000",
			"\114\000",
			"\164\000",
			"\077\000",
			"\043\000",
			"\151\000",
			"\050\000",
			"\102\000",
			"\144\121\000",
			"\000",
		};
		int _rubric_s = 46;
      sprintf(str,"'%s' Random String Failed\n","\x66\x70\x47\x73\x5a\x36\x64\x35\x5f\x25\x48\x22\x52\x28\x51\x38\x2e\x40\x61\x3e\x58\x7a\x4f\x29\x2d\x4f\x09\x77\x58\x32\x4e\x2d\x60\x49\x29\x32\x2f\x51\x56\x4b\x63\x5b\x2a\x7e\x41\x53\x29\x78\x43\x33\x2c\x23\x4c\x74\x3f\x23\x69\x28\x42\x64\x51");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x70\x47\x73\x5a\x36\x64\x35\x5f\x25\x48\x22\x52\x28\x51\x38\x2e\x40\x61\x3e\x58\x7a\x4f\x29\x2d\x4f\x09\x77\x58\x32\x4e\x2d\x60\x49\x29\x32\x2f\x51\x56\x4b\x63\x5b\x2a\x7e\x41\x53\x29\x78\x43\x33\x2c\x23\x4c\x74\x3f\x23\x69\x28\x42\x64\x51",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_47( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			variableName,
			lexicalError,
			lexicalError,
			plusSign,
			variableName,
			plusSign,
			lexicalError,
			variableName,
			semiColon,
			leftAngle,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"variableName",
			"lexicalError",
			"lexicalError",
			"plusSign",
			"variableName",
			"plusSign",
			"lexicalError",
			"variableName",
			"semiColon",
			"leftAngle",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\172\145\164\127\000",
			"\163\063\000",
			"\077\000",
			"\113\000",
			"\053\000",
			"\145\126\127\000",
			"\053\000",
			"\105\000",
			"\150\000",
			"\073\000",
			"\074\000",
			"\147\151\162\000",
			"\000",
		};
		int _rubric_s = 13;
      sprintf(str,"'%s' Random String Failed\n","\x7a\x65\x74\x57\x20\x73\x33\x3f\x4b\x2b\x65\x56\x57\x2b\x45\x68\x3b\x3c\x67\x69\x72");
      TSM_ASSERT(str,checkAgainstRubric("\x7a\x65\x74\x57\x20\x73\x33\x3f\x4b\x2b\x65\x56\x57\x2b\x45\x68\x3b\x3c\x67\x69\x72",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_48( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			colon,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			comma,
			variableName,
			leftAngle,
			lexicalError,
			lexicalError,
			percent,
			lexicalError,
			variableName,
			lexicalError,
			leftSquare,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"colon",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"comma",
			"variableName",
			"leftAngle",
			"lexicalError",
			"lexicalError",
			"percent",
			"lexicalError",
			"variableName",
			"lexicalError",
			"leftSquare",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\101\000",
			"\072\000",
			"\167\000",
			"\056\000",
			"\130\000",
			"\070\000",
			"\102\000",
			"\054\000",
			"\171\112\120\000",
			"\074\000",
			"\114\000",
			"\110\000",
			"\045\000",
			"\131\000",
			"\145\130\000",
			"\047\000",
			"\133\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 19;
      sprintf(str,"'%s' Random String Failed\n","\x74\x41\x3a\x77\x2e\x58\x38\x42\x2c\x79\x4a\x50\x3c\x4c\x48\x25\x59\x09\x65\x58\x27\x5b\x28");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x41\x3a\x77\x2e\x58\x38\x42\x2c\x79\x4a\x50\x3c\x4c\x48\x25\x59\x09\x65\x58\x27\x5b\x28",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_49( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			variableName,
			rightParen,
			rightAngle,
			variableName,
			forwardSlash,
			intConst,
			backSlash,
			semiColon,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			semiColon,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"variableName",
			"rightParen",
			"rightAngle",
			"variableName",
			"forwardSlash",
			"intConst",
			"backSlash",
			"semiColon",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"semiColon",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\000",
			"\042\000",
			"\160\067\130\171\121\000",
			"\051\000",
			"\076\000",
			"\142\155\155\000",
			"\057\000",
			"\064\000",
			"\134\000",
			"\073\000",
			"\174\000",
			"\113\000",
			"\157\147\161\160\000",
			"\174\000",
			"\155\111\142\000",
			"\073\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 18;
      sprintf(str,"'%s' Random String Failed\n","\x39\x22\x70\x37\x58\x79\x51\x29\x3e\x62\x6d\x6d\x2f\x34\x5c\x3b\x7c\x4b\x6f\x67\x71\x70\x7c\x6d\x49\x62\x3b\x2f");
      TSM_ASSERT(str,checkAgainstRubric("\x39\x22\x70\x37\x58\x79\x51\x29\x3e\x62\x6d\x6d\x2f\x34\x5c\x3b\x7c\x4b\x6f\x67\x71\x70\x7c\x6d\x49\x62\x3b\x2f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_50( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\000",
			"\147\146\127\117\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","\x46\x67\x66\x57\x4f");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x67\x66\x57\x4f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_51( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			rightParen,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"rightParen",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\104\000",
			"\051\000",
			"\152\066\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","\x44\x29\x6a\x36");
      TSM_ASSERT(str,checkAgainstRubric("\x44\x29\x6a\x36",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_52( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			equalsSign,
			rightParen,
			intConst,
			variableName,
			leftAngle,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			percent,
			lexicalError,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"equalsSign",
			"rightParen",
			"intConst",
			"variableName",
			"leftAngle",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"percent",
			"lexicalError",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\136\000",
			"\075\000",
			"\051\000",
			"\070\000",
			"\172\063\110\114\000",
			"\074\000",
			"\102\000",
			"\131\000",
			"\077\000",
			"\167\062\000",
			"\045\000",
			"\103\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 14;
      sprintf(str,"'%s' Random String Failed\n","\x5e\x3d\x29\x38\x7a\x33\x48\x4c\x3c\x42\x59\x3f\x77\x32\x25\x43\x3e");
      TSM_ASSERT(str,checkAgainstRubric("\x5e\x3d\x29\x38\x7a\x33\x48\x4c\x3c\x42\x59\x3f\x77\x32\x25\x43\x3e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_53( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			backSlash,
			lexicalError,
			intConst,
			variableName,
			leftParen,
			percent,
			variableName,
			leftAngle,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			leftParen,
			leftAngle,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"backSlash",
			"lexicalError",
			"intConst",
			"variableName",
			"leftParen",
			"percent",
			"variableName",
			"leftAngle",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"leftParen",
			"leftAngle",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\056\000",
			"\101\000",
			"\134\000",
			"\127\000",
			"\065\000",
			"\153\171\132\124\150\145\000",
			"\050\000",
			"\045\000",
			"\164\114\107\103\172\125\126\000",
			"\074\000",
			"\171\000",
			"\077\000",
			"\144\104\154\000",
			"\047\000",
			"\156\125\000",
			"\050\000",
			"\074\000",
			"\141\000",
			"\000",
		};
		int _rubric_s = 20;
      sprintf(str,"'%s' Random String Failed\n","\x2e\x09\x2e\x41\x5c\x57\x35\x6b\x79\x5a\x54\x68\x65\x28\x25\x74\x4c\x47\x43\x7a\x55\x56\x3c\x79\x3f\x64\x44\x6c\x27\x6e\x55\x28\x3c\x61");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x09\x2e\x41\x5c\x57\x35\x6b\x79\x5a\x54\x68\x65\x28\x25\x74\x4c\x47\x43\x7a\x55\x56\x3c\x79\x3f\x64\x44\x6c\x27\x6e\x55\x28\x3c\x61",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_54( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			variableName,
			star,
			variableName,
			lexicalError,
			lexicalError,
			comma,
			star,
			lexicalError,
			variableName,
			plusSign,
			intConst,
			variableName,
			forwardSlash,
			variableName,
			equalsSign,
			lexicalError,
			lexicalError,
			leftParen,
			variableName,
			equalsSign,
			semiColon,
			variableName,
			lexicalError,
			lexicalError,
			backSlash,
			lexicalError,
			variableName,
			rightSquare,
			lexicalError,
			variableName,
			dash,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"variableName",
			"star",
			"variableName",
			"lexicalError",
			"lexicalError",
			"comma",
			"star",
			"lexicalError",
			"variableName",
			"plusSign",
			"intConst",
			"variableName",
			"forwardSlash",
			"variableName",
			"equalsSign",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"variableName",
			"equalsSign",
			"semiColon",
			"variableName",
			"lexicalError",
			"lexicalError",
			"backSlash",
			"lexicalError",
			"variableName",
			"rightSquare",
			"lexicalError",
			"variableName",
			"dash",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\110\000",
			"\156\115\126\000",
			"\125\000",
			"\065\000",
			"\120\000",
			"\066\000",
			"\141\000",
			"\052\000",
			"\142\070\000",
			"\174\000",
			"\174\000",
			"\054\000",
			"\052\000",
			"\103\000",
			"\161\000",
			"\053\000",
			"\067\000",
			"\141\120\000",
			"\057\000",
			"\167\144\162\170\000",
			"\075\000",
			"\114\000",
			"\100\000",
			"\050\000",
			"\146\000",
			"\075\000",
			"\073\000",
			"\152\000",
			"\056\000",
			"\120\000",
			"\134\000",
			"\105\000",
			"\144\141\111\000",
			"\135\000",
			"\123\000",
			"\144\000",
			"\055\000",
			"\062\000",
			"\000",
		};
		int _rubric_s = 40;
      sprintf(str,"'%s' Random String Failed\n","\x2a\x48\x6e\x4d\x56\x09\x55\x35\x50\x36\x61\x2a\x62\x38\x7c\x7c\x2c\x2a\x43\x71\x2b\x37\x61\x50\x2f\x77\x64\x72\x78\x3d\x4c\x40\x28\x66\x3d\x3b\x6a\x2e\x50\x5c\x45\x64\x61\x49\x5d\x53\x64\x2d\x32");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x48\x6e\x4d\x56\x09\x55\x35\x50\x36\x61\x2a\x62\x38\x7c\x7c\x2c\x2a\x43\x71\x2b\x37\x61\x50\x2f\x77\x64\x72\x78\x3d\x4c\x40\x28\x66\x3d\x3b\x6a\x2e\x50\x5c\x45\x64\x61\x49\x5d\x53\x64\x2d\x32",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_55( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			leftParen,
			variableName,
			rightParen,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			plusSign,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"leftParen",
			"variableName",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\137\000",
			"\142\000",
			"\050\000",
			"\156\000",
			"\051\000",
			"\116\000",
			"\121\000",
			"\113\000",
			"\136\000",
			"\144\000",
			"\053\000",
			"\112\000",
			"\131\000",
			"\116\000",
			"\162\000",
			"\050\000",
			"\121\000",
			"\113\000",
			"\042\000",
			"\000",
		};
		int _rubric_s = 20;
      sprintf(str,"'%s' Random String Failed\n","\x5f\x62\x28\x6e\x29\x4e\x51\x4b\x20\x5e\x64\x2b\x0a\x4a\x59\x4e\x72\x28\x51\x4b\x22");
      TSM_ASSERT(str,checkAgainstRubric("\x5f\x62\x28\x6e\x29\x4e\x51\x4b\x20\x5e\x64\x2b\x0a\x4a\x59\x4e\x72\x28\x51\x4b\x22",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_56( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			colon,
			variableName,
			plusSign,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			rightAngle,
			intConst,
			leftAngle,
			lexicalError,
			leftAngle,
			lexicalError,
			rightParen,
			variableName,
			colon,
			lexicalError,
			intConst,
			star,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			variableName,
			dash,
			dash,
			plusSign,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"colon",
			"variableName",
			"plusSign",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightAngle",
			"intConst",
			"leftAngle",
			"lexicalError",
			"leftAngle",
			"lexicalError",
			"rightParen",
			"variableName",
			"colon",
			"lexicalError",
			"intConst",
			"star",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"variableName",
			"dash",
			"dash",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\130\000",
			"\042\000",
			"\072\000",
			"\155\061\000",
			"\053\000",
			"\067\000",
			"\056\000",
			"\137\000",
			"\155\065\154\164\063\126\163\000",
			"\076\000",
			"\065\000",
			"\074\000",
			"\130\000",
			"\074\000",
			"\122\000",
			"\051\000",
			"\162\000",
			"\072\000",
			"\107\000",
			"\071\000",
			"\052\000",
			"\107\000",
			"\162\110\121\000",
			"\044\000",
			"\070\000",
			"\163\150\110\070\070\000",
			"\055\000",
			"\055\000",
			"\053\000",
			"\120\000",
			"\122\000",
			"\061\000",
			"\161\000",
			"\136\000",
			"\146\172\167\112\000",
			"\073\000",
			"\047\000",
			"\120\000",
			"\146\127\000",
			"\000",
		};
		int _rubric_s = 40;
      sprintf(str,"'%s' Random String Failed\n","\x58\x22\x3a\x6d\x31\x2b\x37\x2e\x5f\x6d\x35\x6c\x74\x33\x56\x73\x3e\x35\x3c\x58\x3c\x52\x29\x09\x72\x3a\x47\x39\x2a\x47\x72\x48\x51\x24\x09\x38\x73\x68\x48\x38\x38\x2d\x2d\x2b\x50\x52\x31\x71\x5e\x66\x7a\x77\x4a\x3b\x27\x50\x66\x57");
      TSM_ASSERT(str,checkAgainstRubric("\x58\x22\x3a\x6d\x31\x2b\x37\x2e\x5f\x6d\x35\x6c\x74\x33\x56\x73\x3e\x35\x3c\x58\x3c\x52\x29\x09\x72\x3a\x47\x39\x2a\x47\x72\x48\x51\x24\x09\x38\x73\x68\x48\x38\x38\x2d\x2d\x2b\x50\x52\x31\x71\x5e\x66\x7a\x77\x4a\x3b\x27\x50\x66\x57",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_57( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			lexicalError,
			lexicalError,
			arrow,
			lexicalError,
			variableName,
			lexicalError,
			rightParen,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"lexicalError",
			"lexicalError",
			"arrow",
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\132\000",
			"\124\000",
			"\055\076\000",
			"\103\000",
			"\156\000",
			"\140\000",
			"\051\000",
			"\111\000",
			"\112\000",
			"\107\000",
			"\172\132\060\000",
			"\050\000",
			"\127\000",
			"\121\000",
			"\143\163\000",
			"\050\000",
			"\110\000",
			"\070\000",
			"\171\000",
			"\000",
		};
		int _rubric_s = 21;
      sprintf(str,"'%s' Random String Failed\n","\x2a\x09\x5a\x54\x2d\x3e\x09\x43\x6e\x60\x29\x49\x4a\x47\x7a\x5a\x30\x28\x57\x51\x63\x73\x28\x48\x38\x79");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x09\x5a\x54\x2d\x3e\x09\x43\x6e\x60\x29\x49\x4a\x47\x7a\x5a\x30\x28\x57\x51\x63\x73\x28\x48\x38\x79",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_58( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			comma,
			intConst,
			leftParen,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			percent,
			lexicalError,
			leftAngle,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"comma",
			"intConst",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"percent",
			"lexicalError",
			"leftAngle",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\054\000",
			"\065\000",
			"\050\000",
			"\136\000",
			"\044\000",
			"\137\000",
			"\062\065\000",
			"\107\000",
			"\042\000",
			"\123\000",
			"\065\000",
			"\045\000",
			"\136\000",
			"\074\000",
			"\117\000",
			"\125\000",
			"\101\000",
			"\121\000",
			"\065\000",
			"\077\000",
			"\124\000",
			"\047\000",
			"\120\000",
			"\063\000",
			"\164\125\130\000",
			"\000",
		};
		int _rubric_s = 26;
      sprintf(str,"'%s' Random String Failed\n","\x2c\x35\x28\x5e\x24\x5f\x32\x35\x47\x22\x53\x35\x25\x5e\x3c\x4f\x55\x41\x51\x35\x3f\x54\x27\x50\x33\x74\x55\x58");
      TSM_ASSERT(str,checkAgainstRubric("\x2c\x35\x28\x5e\x24\x5f\x32\x35\x47\x22\x53\x35\x25\x5e\x3c\x4f\x55\x41\x51\x35\x3f\x54\x27\x50\x33\x74\x55\x58",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_59( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			variableName,
			forwardSlash,
			intConst,
			lexicalError,
			star,
			variableName,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			lexicalError,
			variableName,
			comma,
			variableName,
			rightAngle,
			leftParen,
			lexicalError,
			star,
			variableName,
			lexicalError,
			leftParen,
			variableName,
			lexicalError,
			leftParen,
			lexicalError,
			lexicalError,
			lexicalError,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"variableName",
			"forwardSlash",
			"intConst",
			"lexicalError",
			"star",
			"variableName",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"comma",
			"variableName",
			"rightAngle",
			"leftParen",
			"lexicalError",
			"star",
			"variableName",
			"lexicalError",
			"leftParen",
			"variableName",
			"lexicalError",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\115\000",
			"\106\000",
			"\041\000",
			"\162\000",
			"\050\000",
			"\161\000",
			"\057\000",
			"\060\000",
			"\112\000",
			"\052\000",
			"\165\106\107\147\065\121\144\110\104\000",
			"\121\000",
			"\143\105\132\172\125\142\124\067\000",
			"\051\000",
			"\130\000",
			"\136\000",
			"\171\156\122\130\124\000",
			"\054\000",
			"\167\123\000",
			"\076\000",
			"\050\000",
			"\115\000",
			"\052\000",
			"\150\000",
			"\136\000",
			"\050\000",
			"\153\146\000",
			"\043\000",
			"\050\000",
			"\122\000",
			"\042\000",
			"\127\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 35;
      sprintf(str,"'%s' Random String Failed\n","\x3b\x4d\x46\x21\x72\x28\x71\x2f\x30\x20\x4a\x2a\x75\x46\x47\x67\x35\x51\x64\x48\x44\x20\x51\x63\x45\x5a\x7a\x55\x62\x54\x37\x29\x58\x5e\x79\x6e\x52\x58\x54\x2c\x77\x53\x3e\x28\x4d\x2a\x68\x5e\x28\x6b\x66\x23\x28\x52\x22\x57\x5c");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x4d\x46\x21\x72\x28\x71\x2f\x30\x20\x4a\x2a\x75\x46\x47\x67\x35\x51\x64\x48\x44\x20\x51\x63\x45\x5a\x7a\x55\x62\x54\x37\x29\x58\x5e\x79\x6e\x52\x58\x54\x2c\x77\x53\x3e\x28\x4d\x2a\x68\x5e\x28\x6b\x66\x23\x28\x52\x22\x57\x5c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_60( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			colon,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"colon",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\000",
			"\072\000",
			"\146\116\165\151\160\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","\x66\x3a\x66\x4e\x75\x69\x70");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x3a\x66\x4e\x75\x69\x70",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_61( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			rightParen,
			variableName,
			star,
			lexicalError,
			lexicalError,
			lexicalError,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"rightParen",
			"variableName",
			"star",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\000",
			"\062\000",
			"\051\000",
			"\153\000",
			"\052\000",
			"\116\000",
			"\101\000",
			"\127\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 10;
      sprintf(str,"'%s' Random String Failed\n","\x46\x32\x29\x6b\x2a\x4e\x41\x57\x3e");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x32\x29\x6b\x2a\x4e\x41\x57\x3e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_62( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			rightSquare,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightSquare",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\124\000",
			"\141\000",
			"\174\000",
			"\117\000",
			"\065\062\000",
			"\101\000",
			"\152\000",
			"\047\000",
			"\104\000",
			"\163\000",
			"\056\000",
			"\135\000",
			"\110\000",
			"\170\145\163\000",
			"\077\000",
			"\160\000",
			"\000",
		};
		int _rubric_s = 17;
      sprintf(str,"'%s' Random String Failed\n","\x54\x61\x7c\x20\x4f\x35\x32\x41\x6a\x27\x44\x73\x2e\x5d\x48\x78\x65\x73\x3f\x70");
      TSM_ASSERT(str,checkAgainstRubric("\x54\x61\x7c\x20\x4f\x35\x32\x41\x6a\x27\x44\x73\x2e\x5d\x48\x78\x65\x73\x3f\x70",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_63( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			equalsSign,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"equalsSign",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\000",
			"\102\000",
			"\056\000",
			"\070\000",
			"\075\000",
			"\067\000",
			"\103\000",
			"\105\000",
			"\160\155\152\000",
			"\077\000",
			"\162\000",
			"\000",
		};
		int _rubric_s = 12;
      sprintf(str,"'%s' Random String Failed\n","\x21\x42\x2e\x38\x3d\x37\x43\x45\x70\x6d\x6a\x09\x3f\x72");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x42\x2e\x38\x3d\x37\x43\x45\x70\x6d\x6a\x09\x3f\x72",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_64( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			lexicalError,
			backSlash,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			percent,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			backSlash,
			percent,
			lexicalError,
			variableName,
			lexicalError,
			leftAngle,
			lexicalError,
			lexicalError,
			lexicalError,
			dash,
			lexicalError,
			lexicalError,
			star,
			lexicalError,
			intConst,
			variableName,
			star,
			variableName,
			percent,
			variableName,
			dash,
			star,
			lexicalError,
			lexicalError,
			leftSquare,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			leftAngle,
			leftSquare,
			lexicalError,
			variableName,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"lexicalError",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"percent",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"backSlash",
			"percent",
			"lexicalError",
			"variableName",
			"lexicalError",
			"leftAngle",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"dash",
			"lexicalError",
			"lexicalError",
			"star",
			"lexicalError",
			"intConst",
			"variableName",
			"star",
			"variableName",
			"percent",
			"variableName",
			"dash",
			"star",
			"lexicalError",
			"lexicalError",
			"leftSquare",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftAngle",
			"leftSquare",
			"lexicalError",
			"variableName",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\000",
			"\162\161\000",
			"\056\000",
			"\134\000",
			"\111\000",
			"\131\000",
			"\167\000",
			"\051\000",
			"\115\000",
			"\140\000",
			"\140\000",
			"\166\156\141\000",
			"\045\000",
			"\151\067\106\000",
			"\047\000",
			"\113\000",
			"\110\000",
			"\077\000",
			"\147\000",
			"\134\000",
			"\045\000",
			"\101\000",
			"\154\000",
			"\047\000",
			"\074\000",
			"\101\000",
			"\136\000",
			"\126\000",
			"\055\000",
			"\105\000",
			"\140\000",
			"\052\000",
			"\107\000",
			"\071\000",
			"\153\000",
			"\052\000",
			"\167\000",
			"\045\000",
			"\144\115\000",
			"\055\000",
			"\052\000",
			"\123\000",
			"\140\000",
			"\133\000",
			"\142\147\000",
			"\046\000",
			"\112\000",
			"\140\000",
			"\074\000",
			"\133\000",
			"\102\000",
			"\172\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 54;
      sprintf(str,"'%s' Random String Failed\n","\x49\x72\x71\x2e\x5c\x49\x59\x77\x29\x4d\x60\x60\x76\x6e\x61\x25\x69\x37\x46\x27\x4b\x48\x3f\x67\x5c\x25\x41\x6c\x27\x3c\x41\x5e\x56\x2d\x45\x60\x2a\x47\x39\x6b\x2a\x77\x25\x64\x4d\x2d\x2a\x53\x60\x5b\x62\x67\x26\x4a\x60\x3c\x5b\x42\x7a\x3b");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x72\x71\x2e\x5c\x49\x59\x77\x29\x4d\x60\x60\x76\x6e\x61\x25\x69\x37\x46\x27\x4b\x48\x3f\x67\x5c\x25\x41\x6c\x27\x3c\x41\x5e\x56\x2d\x45\x60\x2a\x47\x39\x6b\x2a\x77\x25\x64\x4d\x2d\x2a\x53\x60\x5b\x62\x67\x26\x4a\x60\x3c\x5b\x42\x7a\x3b",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_65( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			percent,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			leftAngle,
			rightSquare,
			variableName,
			lexicalError,
			lexicalError,
			percent,
			lexicalError,
			variableName,
			backSlash,
			lexicalError,
			lexicalError,
			plusSign,
			rightSquare,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			dash,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			plusSign,
			lexicalError,
			lexicalError,
			semiColon,
			variableName,
			comma,
			variableName,
			lexicalError,
			comma,
			variableName,
			percent,
			lexicalError,
			percent,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"percent",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftAngle",
			"rightSquare",
			"variableName",
			"lexicalError",
			"lexicalError",
			"percent",
			"lexicalError",
			"variableName",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"plusSign",
			"rightSquare",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"dash",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"semiColon",
			"variableName",
			"comma",
			"variableName",
			"lexicalError",
			"comma",
			"variableName",
			"percent",
			"lexicalError",
			"percent",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\132\000",
			"\101\000",
			"\045\000",
			"\130\000",
			"\150\000",
			"\174\000",
			"\106\000",
			"\107\000",
			"\074\000",
			"\135\000",
			"\162\000",
			"\176\000",
			"\124\000",
			"\045\000",
			"\130\000",
			"\145\000",
			"\134\000",
			"\132\000",
			"\042\000",
			"\053\000",
			"\135\000",
			"\102\000",
			"\146\154\000",
			"\043\000",
			"\043\000",
			"\113\000",
			"\127\000",
			"\171\000",
			"\055\000",
			"\100\000",
			"\166\120\116\000",
			"\100\000",
			"\100\000",
			"\053\000",
			"\176\000",
			"\056\000",
			"\073\000",
			"\161\124\103\000",
			"\054\000",
			"\154\000",
			"\041\000",
			"\054\000",
			"\162\000",
			"\045\000",
			"\127\000",
			"\045\000",
			"\147\000",
			"\000",
		};
		int _rubric_s = 48;
      sprintf(str,"'%s' Random String Failed\n","\x5a\x41\x25\x58\x68\x7c\x0a\x46\x47\x3c\x5d\x72\x7e\x54\x25\x58\x65\x0a\x5c\x5a\x22\x2b\x5d\x42\x66\x6c\x23\x23\x4b\x57\x79\x2d\x40\x76\x50\x4e\x40\x40\x2b\x7e\x2e\x3b\x71\x54\x43\x2c\x6c\x21\x2c\x72\x25\x57\x25\x67");
      TSM_ASSERT(str,checkAgainstRubric("\x5a\x41\x25\x58\x68\x7c\x0a\x46\x47\x3c\x5d\x72\x7e\x54\x25\x58\x65\x0a\x5c\x5a\x22\x2b\x5d\x42\x66\x6c\x23\x23\x4b\x57\x79\x2d\x40\x76\x50\x4e\x40\x40\x2b\x7e\x2e\x3b\x71\x54\x43\x2c\x6c\x21\x2c\x72\x25\x57\x25\x67",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_66( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			intConst,
			lexicalError,
			lexicalError,
			rightSquare,
			variableName,
			rightAngle,
			lexicalError,
			variableName,
			plusSign,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"intConst",
			"lexicalError",
			"lexicalError",
			"rightSquare",
			"variableName",
			"rightAngle",
			"lexicalError",
			"variableName",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\065\000",
			"\126\000",
			"\120\000",
			"\135\000",
			"\154\150\000",
			"\076\000",
			"\105\000",
			"\156\153\160\116\000",
			"\053\000",
			"\122\000",
			"\115\000",
			"\176\000",
			"\144\123\000",
			"\042\000",
			"\000",
		};
		int _rubric_s = 16;
      sprintf(str,"'%s' Random String Failed\n","\x2b\x35\x56\x50\x5d\x6c\x68\x3e\x45\x6e\x6b\x70\x4e\x2b\x52\x4d\x7e\x64\x53\x22");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x35\x56\x50\x5d\x6c\x68\x3e\x45\x6e\x6b\x70\x4e\x2b\x52\x4d\x7e\x64\x53\x22",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_67( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			variableName,
			backSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			rightAngle,
			variableName,
			plusSign,
			lexicalError,
			variableName,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"variableName",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"rightAngle",
			"variableName",
			"plusSign",
			"lexicalError",
			"variableName",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\147\147\106\112\145\151\000",
			"\116\000",
			"\145\154\101\131\147\000",
			"\134\000",
			"\125\000",
			"\127\000",
			"\100\000",
			"\131\000",
			"\101\000",
			"\144\132\000",
			"\042\000",
			"\115\000",
			"\041\000",
			"\112\000",
			"\110\000",
			"\100\000",
			"\062\000",
			"\130\000",
			"\163\123\000",
			"\076\000",
			"\171\145\000",
			"\053\000",
			"\115\000",
			"\165\000",
			"\145\117\066\137\062\000",
			"\000",
		};
		int _rubric_s = 26;
      sprintf(str,"'%s' Random String Failed\n","\x67\x67\x46\x4a\x65\x69\x09\x4e\x65\x6c\x41\x59\x67\x5c\x55\x57\x40\x59\x41\x64\x5a\x22\x09\x4d\x21\x4a\x48\x40\x32\x58\x73\x53\x3e\x0a\x79\x65\x2b\x4d\x75\x0a\x65\x4f\x36\x5f\x32");
      TSM_ASSERT(str,checkAgainstRubric("\x67\x67\x46\x4a\x65\x69\x09\x4e\x65\x6c\x41\x59\x67\x5c\x55\x57\x40\x59\x41\x64\x5a\x22\x09\x4d\x21\x4a\x48\x40\x32\x58\x73\x53\x3e\x0a\x79\x65\x2b\x4d\x75\x0a\x65\x4f\x36\x5f\x32",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_68( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			comma,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"comma",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\125\000",
			"\116\000",
			"\103\000",
			"\145\141\067\151\166\147\062\000",
			"\054\000",
			"\066\000",
			"\155\167\106\137\000",
			"\113\000",
			"\113\000",
			"\130\000",
			"\000",
		};
		int _rubric_s = 11;
      sprintf(str,"'%s' Random String Failed\n","\x55\x4e\x43\x65\x61\x37\x69\x76\x67\x32\x2c\x36\x6d\x77\x46\x5f\x0a\x4b\x4b\x58");
      TSM_ASSERT(str,checkAgainstRubric("\x55\x4e\x43\x65\x61\x37\x69\x76\x67\x32\x2c\x36\x6d\x77\x46\x5f\x0a\x4b\x4b\x58",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_69( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			rightSquare,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			variableName,
			plusSign,
			intConst,
			lexicalError,
			variableName,
			backSlash,
			variableName,
			rightParen,
			variableName,
			equalsSign,
			colonColon,
			variableName,
			semiColon,
			leftParen,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			forwardSlash,
			semiColon,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"rightSquare",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"variableName",
			"plusSign",
			"intConst",
			"lexicalError",
			"variableName",
			"backSlash",
			"variableName",
			"rightParen",
			"variableName",
			"equalsSign",
			"colonColon",
			"variableName",
			"semiColon",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"forwardSlash",
			"semiColon",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\140\000",
			"\047\000",
			"\043\000",
			"\135\000",
			"\122\000",
			"\046\000",
			"\152\124\000",
			"\073\000",
			"\144\141\125\071\000",
			"\053\000",
			"\060\000",
			"\101\000",
			"\170\130\000",
			"\134\000",
			"\143\117\071\143\165\105\000",
			"\051\000",
			"\141\061\123\000",
			"\075\000",
			"\072\072\000",
			"\164\137\107\110\163\061\141\000",
			"\073\000",
			"\050\000",
			"\120\000",
			"\042\000",
			"\117\000",
			"\041\000",
			"\125\000",
			"\057\000",
			"\073\000",
			"\105\000",
			"\000",
		};
		int _rubric_s = 31;
      sprintf(str,"'%s' Random String Failed\n","\x60\x27\x23\x5d\x52\x26\x6a\x54\x3b\x64\x61\x55\x39\x2b\x30\x41\x78\x58\x5c\x63\x4f\x39\x63\x75\x45\x29\x61\x31\x53\x3d\x3a\x3a\x74\x5f\x47\x48\x73\x31\x61\x3b\x28\x50\x22\x4f\x21\x55\x2f\x3b\x45");
      TSM_ASSERT(str,checkAgainstRubric("\x60\x27\x23\x5d\x52\x26\x6a\x54\x3b\x64\x61\x55\x39\x2b\x30\x41\x78\x58\x5c\x63\x4f\x39\x63\x75\x45\x29\x61\x31\x53\x3d\x3a\x3a\x74\x5f\x47\x48\x73\x31\x61\x3b\x28\x50\x22\x4f\x21\x55\x2f\x3b\x45",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_70( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			star,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"star",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\170\000",
			"\052\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","\x78\x2a\x5b");
      TSM_ASSERT(str,checkAgainstRubric("\x78\x2a\x5b",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_71( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			plusSign,
			backSlash,
			lexicalError,
			star,
			variableName,
			rightParen,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"plusSign",
			"backSlash",
			"lexicalError",
			"star",
			"variableName",
			"rightParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\042\000",
			"\150\164\070\125\000",
			"\053\000",
			"\134\000",
			"\077\000",
			"\052\000",
			"\153\000",
			"\051\000",
			"\136\000",
			"\146\067\162\062\000",
			"\046\000",
			"\120\000",
			"\161\065\161\112\166\000",
			"\000",
		};
		int _rubric_s = 14;
      sprintf(str,"'%s' Random String Failed\n","\x22\x68\x74\x38\x55\x2b\x5c\x3f\x2a\x6b\x29\x5e\x66\x37\x72\x32\x26\x50\x09\x71\x35\x71\x4a\x76");
      TSM_ASSERT(str,checkAgainstRubric("\x22\x68\x74\x38\x55\x2b\x5c\x3f\x2a\x6b\x29\x5e\x66\x37\x72\x32\x26\x50\x09\x71\x35\x71\x4a\x76",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_72( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			dash,
			backSlash,
			intConst,
			variableName,
			leftAngle,
			plusSign,
			lexicalError,
			variableName,
			rightParen,
			leftAngle,
			lexicalError,
			variableName,
			comma,
			star,
			intConst,
			variableName,
			rightAngle,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"dash",
			"backSlash",
			"intConst",
			"variableName",
			"leftAngle",
			"plusSign",
			"lexicalError",
			"variableName",
			"rightParen",
			"leftAngle",
			"lexicalError",
			"variableName",
			"comma",
			"star",
			"intConst",
			"variableName",
			"rightAngle",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\172\122\000",
			"\055\000",
			"\134\000",
			"\070\000",
			"\146\165\000",
			"\074\000",
			"\053\000",
			"\102\000",
			"\156\172\000",
			"\051\000",
			"\074\000",
			"\120\000",
			"\165\125\160\132\000",
			"\054\000",
			"\052\000",
			"\066\000",
			"\155\000",
			"\076\000",
			"\060\000",
			"\122\000",
			"\112\000",
			"\176\000",
			"\107\000",
			"\126\000",
			"\066\000",
			"\107\000",
			"\152\142\144\161\125\106\171\171\106\000",
			"\000",
		};
		int _rubric_s = 28;
      sprintf(str,"'%s' Random String Failed\n","\x7a\x52\x2d\x5c\x38\x66\x75\x3c\x2b\x42\x6e\x7a\x29\x3c\x50\x75\x55\x70\x5a\x2c\x2a\x36\x6d\x3e\x30\x52\x4a\x7e\x47\x56\x36\x47\x6a\x62\x64\x71\x55\x46\x79\x79\x46");
      TSM_ASSERT(str,checkAgainstRubric("\x7a\x52\x2d\x5c\x38\x66\x75\x3c\x2b\x42\x6e\x7a\x29\x3c\x50\x75\x55\x70\x5a\x2c\x2a\x36\x6d\x3e\x30\x52\x4a\x7e\x47\x56\x36\x47\x6a\x62\x64\x71\x55\x46\x79\x79\x46",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_73( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\110\000",
			"\064\000",
			"\132\000",
			"\070\000",
			"\155\131\110\000",
			"\000",
		};
		int _rubric_s = 7;
      sprintf(str,"'%s' Random String Failed\n","\x2d\x48\x34\x5a\x38\x6d\x59\x48");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x48\x34\x5a\x38\x6d\x59\x48",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_74( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			backSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			leftAngle,
			variableName,
			lexicalError,
			variableName,
			leftAngle,
			percent,
			lexicalError,
			variableName,
			rightParen,
			comma,
			rightParen,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			leftParen,
			colon,
			lexicalError,
			lexicalError,
			rightSquare,
			rightSquare,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			percent,
			variableName,
			comma,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"leftAngle",
			"variableName",
			"lexicalError",
			"variableName",
			"leftAngle",
			"percent",
			"lexicalError",
			"variableName",
			"rightParen",
			"comma",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"leftParen",
			"colon",
			"lexicalError",
			"lexicalError",
			"rightSquare",
			"rightSquare",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"percent",
			"variableName",
			"comma",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\170\000",
			"\134\000",
			"\117\000",
			"\120\000",
			"\106\000",
			"\046\000",
			"\132\000",
			"\113\000",
			"\140\000",
			"\070\000",
			"\074\000",
			"\150\000",
			"\056\000",
			"\165\154\000",
			"\074\000",
			"\045\000",
			"\106\000",
			"\162\147\103\000",
			"\051\000",
			"\054\000",
			"\051\000",
			"\111\000",
			"\117\000",
			"\060\000",
			"\116\000",
			"\165\000",
			"\050\000",
			"\072\000",
			"\056\000",
			"\111\000",
			"\135\000",
			"\135\000",
			"\070\000",
			"\142\000",
			"\174\000",
			"\136\000",
			"\045\000",
			"\152\071\171\000",
			"\054\000",
			"\127\000",
			"\166\170\000",
			"\041\000",
			"\141\000",
			"\046\000",
			"\070\000",
			"\043\000",
			"\047\000",
			"\111\000",
			"\172\144\112\062\120\123\141\000",
			"\000",
		};
		int _rubric_s = 50;
      sprintf(str,"'%s' Random String Failed\n","\x78\x5c\x4f\x50\x46\x26\x5a\x4b\x60\x38\x3c\x68\x20\x2e\x75\x6c\x3c\x25\x46\x72\x67\x43\x29\x2c\x29\x49\x4f\x09\x30\x4e\x75\x28\x3a\x2e\x49\x5d\x5d\x38\x62\x7c\x5e\x25\x6a\x39\x79\x2c\x57\x76\x78\x21\x61\x26\x38\x23\x27\x49\x7a\x64\x4a\x32\x50\x53\x61");
      TSM_ASSERT(str,checkAgainstRubric("\x78\x5c\x4f\x50\x46\x26\x5a\x4b\x60\x38\x3c\x68\x20\x2e\x75\x6c\x3c\x25\x46\x72\x67\x43\x29\x2c\x29\x49\x4f\x09\x30\x4e\x75\x28\x3a\x2e\x49\x5d\x5d\x38\x62\x7c\x5e\x25\x6a\x39\x79\x2c\x57\x76\x78\x21\x61\x26\x38\x23\x27\x49\x7a\x64\x4a\x32\x50\x53\x61",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_75( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			leftParen,
			rightParen,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			leftAngle,
			variableName,
			leftParen,
			star,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			backSlash,
			intConst,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"leftParen",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"leftAngle",
			"variableName",
			"leftParen",
			"star",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"backSlash",
			"intConst",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\000",
			"\145\116\123\000",
			"\050\000",
			"\051\000",
			"\106\000",
			"\044\000",
			"\157\117\172\114\151\110\144\101\163\103\000",
			"\136\000",
			"\155\150\121\145\164\110\124\000",
			"\074\000",
			"\162\137\114\107\161\000",
			"\050\000",
			"\052\000",
			"\107\000",
			"\105\000",
			"\107\000",
			"\160\151\065\000",
			"\176\000",
			"\134\000",
			"\066\066\000",
			"\145\000",
			"\042\000",
			"\000",
		};
		int _rubric_s = 23;
      sprintf(str,"'%s' Random String Failed\n","\x53\x65\x4e\x53\x28\x29\x46\x24\x6f\x4f\x7a\x4c\x69\x48\x64\x41\x73\x43\x5e\x6d\x68\x51\x65\x74\x48\x54\x3c\x72\x5f\x4c\x47\x71\x28\x2a\x47\x45\x47\x70\x69\x35\x7e\x5c\x36\x36\x65\x22");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x65\x4e\x53\x28\x29\x46\x24\x6f\x4f\x7a\x4c\x69\x48\x64\x41\x73\x43\x5e\x6d\x68\x51\x65\x74\x48\x54\x3c\x72\x5f\x4c\x47\x71\x28\x2a\x47\x45\x47\x70\x69\x35\x7e\x5c\x36\x36\x65\x22",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_76( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			equalsSign,
			intConst,
			lexicalError,
			lexicalError,
			forwardSlash,
			intConst,
			equalsSign,
			percent,
			variableName,
			star,
			variableName,
			tupleOp,
			leftParen,
			rightParen,
			variableName,
			leftParen,
			variableName,
			backSlash,
			variableName,
			comma,
			lexicalError,
			intConst,
			forwardSlash,
			intConst,
			equalsSign,
			intConst,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			comma,
			lexicalError,
			lexicalError,
			backSlash,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"equalsSign",
			"intConst",
			"lexicalError",
			"lexicalError",
			"forwardSlash",
			"intConst",
			"equalsSign",
			"percent",
			"variableName",
			"star",
			"variableName",
			"tupleOp",
			"leftParen",
			"rightParen",
			"variableName",
			"leftParen",
			"variableName",
			"backSlash",
			"variableName",
			"comma",
			"lexicalError",
			"intConst",
			"forwardSlash",
			"intConst",
			"equalsSign",
			"intConst",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"comma",
			"lexicalError",
			"lexicalError",
			"backSlash",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\000",
			"\075\000",
			"\063\000",
			"\122\000",
			"\117\000",
			"\057\000",
			"\065\000",
			"\075\000",
			"\045\000",
			"\161\162\171\000",
			"\052\000",
			"\160\127\172\000",
			"\043\061\000",
			"\050\000",
			"\051\000",
			"\146\102\112\000",
			"\050\000",
			"\150\172\000",
			"\134\000",
			"\165\000",
			"\054\000",
			"\127\000",
			"\065\000",
			"\057\000",
			"\063\000",
			"\075\000",
			"\071\000",
			"\125\000",
			"\136\000",
			"\066\000",
			"\137\000",
			"\161\126\000",
			"\056\000",
			"\054\000",
			"\123\000",
			"\104\000",
			"\134\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 39;
      sprintf(str,"'%s' Random String Failed\n","\x74\x3d\x33\x52\x4f\x2f\x35\x3d\x25\x71\x72\x79\x2a\x70\x57\x7a\x23\x31\x28\x29\x66\x42\x4a\x28\x68\x7a\x5c\x75\x2c\x57\x35\x2f\x33\x3d\x39\x55\x5e\x36\x5f\x71\x56\x2e\x2c\x53\x44\x5c\x2e");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x3d\x33\x52\x4f\x2f\x35\x3d\x25\x71\x72\x79\x2a\x70\x57\x7a\x23\x31\x28\x29\x66\x42\x4a\x28\x68\x7a\x5c\x75\x2c\x57\x35\x2f\x33\x3d\x39\x55\x5e\x36\x5f\x71\x56\x2e\x2c\x53\x44\x5c\x2e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_77( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			lexicalError,
			variableName,
			leftAngle,
			variableName,
			rightParen,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			percent,
			lexicalError,
			leftSquare,
			variableName,
			lexicalError,
			variableName,
			rightSquare,
			lexicalError,
			variableName,
			percent,
			variableName,
			rightAngle,
			star,
			comma,
			lexicalError,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftAngle",
			"variableName",
			"rightParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"percent",
			"lexicalError",
			"leftSquare",
			"variableName",
			"lexicalError",
			"variableName",
			"rightSquare",
			"lexicalError",
			"variableName",
			"percent",
			"variableName",
			"rightAngle",
			"star",
			"comma",
			"lexicalError",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\126\000",
			"\137\000",
			"\046\000",
			"\162\155\000",
			"\073\000",
			"\115\000",
			"\043\000",
			"\145\000",
			"\074\000",
			"\171\106\171\000",
			"\051\000",
			"\100\000",
			"\146\060\144\062\147\000",
			"\077\000",
			"\116\000",
			"\144\111\154\000",
			"\176\000",
			"\045\000",
			"\120\000",
			"\133\000",
			"\166\000",
			"\044\000",
			"\143\131\152\164\000",
			"\135\000",
			"\102\000",
			"\154\151\000",
			"\045\000",
			"\154\146\121\164\106\117\000",
			"\076\000",
			"\052\000",
			"\054\000",
			"\126\000",
			"\107\000",
			"\067\000",
			"\000",
		};
		int _rubric_s = 35;
      sprintf(str,"'%s' Random String Failed\n","\x56\x5f\x26\x72\x6d\x3b\x4d\x23\x65\x3c\x79\x46\x79\x29\x40\x66\x30\x64\x32\x67\x3f\x4e\x64\x49\x6c\x7e\x25\x50\x5b\x76\x24\x63\x59\x6a\x74\x5d\x42\x6c\x69\x25\x6c\x66\x51\x74\x46\x4f\x3e\x2a\x2c\x56\x47\x37");
      TSM_ASSERT(str,checkAgainstRubric("\x56\x5f\x26\x72\x6d\x3b\x4d\x23\x65\x3c\x79\x46\x79\x29\x40\x66\x30\x64\x32\x67\x3f\x4e\x64\x49\x6c\x7e\x25\x50\x5b\x76\x24\x63\x59\x6a\x74\x5d\x42\x6c\x69\x25\x6c\x66\x51\x74\x46\x4f\x3e\x2a\x2c\x56\x47\x37",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_78( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			rightParen,
			backSlash,
			leftSquare,
			rightParen,
			variableName,
			backSlash,
			variableName,
			backSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"rightParen",
			"backSlash",
			"leftSquare",
			"rightParen",
			"variableName",
			"backSlash",
			"variableName",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\120\000",
			"\064\000",
			"\107\000",
			"\051\000",
			"\134\000",
			"\133\000",
			"\051\000",
			"\167\000",
			"\134\000",
			"\167\112\000",
			"\134\000",
			"\176\000",
			"\140\000",
			"\137\000",
			"\151\102\144\000",
			"\073\000",
			"\125\000",
			"\176\000",
			"\113\000",
			"\000",
		};
		int _rubric_s = 20;
      sprintf(str,"'%s' Random String Failed\n","\x50\x34\x47\x29\x5c\x5b\x29\x77\x5c\x77\x4a\x5c\x7e\x60\x5f\x69\x42\x64\x3b\x55\x7e\x4b");
      TSM_ASSERT(str,checkAgainstRubric("\x50\x34\x47\x29\x5c\x5b\x29\x77\x5c\x77\x4a\x5c\x7e\x60\x5f\x69\x42\x64\x3b\x55\x7e\x4b",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_79( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			colon,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			dash,
			lexicalError,
			backSlash,
			variableName,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"colon",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"dash",
			"lexicalError",
			"backSlash",
			"variableName",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\144\000",
			"\072\000",
			"\067\000",
			"\041\000",
			"\174\000",
			"\130\000",
			"\160\172\121\000",
			"\051\000",
			"\105\000",
			"\065\000",
			"\161\164\150\130\132\000",
			"\176\000",
			"\103\000",
			"\125\000",
			"\127\000",
			"\170\000",
			"\055\000",
			"\112\000",
			"\134\000",
			"\166\126\111\171\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 22;
      sprintf(str,"'%s' Random String Failed\n","\x64\x3a\x37\x21\x7c\x58\x70\x7a\x51\x29\x45\x35\x71\x74\x68\x58\x5a\x7e\x43\x55\x57\x78\x2d\x4a\x5c\x0a\x76\x56\x49\x79\x2c");
      TSM_ASSERT(str,checkAgainstRubric("\x64\x3a\x37\x21\x7c\x58\x70\x7a\x51\x29\x45\x35\x71\x74\x68\x58\x5a\x7e\x43\x55\x57\x78\x2d\x4a\x5c\x0a\x76\x56\x49\x79\x2c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_80( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			rightAngle,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			dash,
			lexicalError,
			forwardSlash,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			lexicalError,
			variableName,
			star,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"rightAngle",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"dash",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"star",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\103\000",
			"\145\113\000",
			"\076\000",
			"\150\000",
			"\100\000",
			"\143\060\000",
			"\110\000",
			"\142\111\000",
			"\055\000",
			"\131\000",
			"\057\000",
			"\130\000",
			"\153\000",
			"\051\000",
			"\043\000",
			"\043\000",
			"\145\117\000",
			"\052\000",
			"\000",
		};
		int _rubric_s = 19;
      sprintf(str,"'%s' Random String Failed\n","\x43\x65\x4b\x3e\x68\x40\x63\x30\x09\x48\x62\x49\x2d\x59\x2f\x58\x6b\x29\x23\x23\x65\x4f\x2a");
      TSM_ASSERT(str,checkAgainstRubric("\x43\x65\x4b\x3e\x68\x40\x63\x30\x09\x48\x62\x49\x2d\x59\x2f\x58\x6b\x29\x23\x23\x65\x4f\x2a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_81( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			forwardSlash,
			variableName,
			rightParen,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			leftAngle,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			plusSign,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			leftAngle,
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"forwardSlash",
			"variableName",
			"rightParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"leftAngle",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"leftAngle",
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\140\000",
			"\057\000",
			"\163\063\121\000",
			"\051\000",
			"\044\000",
			"\163\000",
			"\044\000",
			"\146\000",
			"\074\000",
			"\120\000",
			"\130\000",
			"\132\000",
			"\143\000",
			"\053\000",
			"\131\000",
			"\117\000",
			"\064\000",
			"\141\130\000",
			"\074\000",
			"\064\000",
			"\101\000",
			"\000",
		};
		int _rubric_s = 22;
      sprintf(str,"'%s' Random String Failed\n","\x60\x2f\x73\x33\x51\x29\x24\x73\x24\x66\x3c\x50\x58\x5a\x63\x2b\x59\x4f\x34\x61\x58\x3c\x34\x41");
      TSM_ASSERT(str,checkAgainstRubric("\x60\x2f\x73\x33\x51\x29\x24\x73\x24\x66\x3c\x50\x58\x5a\x63\x2b\x59\x4f\x34\x61\x58\x3c\x34\x41",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_82( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			equalsSign,
			backSlash,
			variableName,
			star,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"equalsSign",
			"backSlash",
			"variableName",
			"star",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\043\000",
			"\077\000",
			"\061\000",
			"\166\000",
			"\136\000",
			"\103\000",
			"\064\066\000",
			"\121\000",
			"\113\000",
			"\152\000",
			"\100\000",
			"\137\000",
			"\161\000",
			"\044\000",
			"\075\000",
			"\134\000",
			"\156\102\070\000",
			"\052\000",
			"\060\000",
			"\171\000",
			"\000",
		};
		int _rubric_s = 21;
      sprintf(str,"'%s' Random String Failed\n","\x23\x3f\x31\x76\x5e\x43\x34\x36\x51\x4b\x6a\x40\x5f\x71\x24\x3d\x5c\x6e\x42\x38\x2a\x30\x79");
      TSM_ASSERT(str,checkAgainstRubric("\x23\x3f\x31\x76\x5e\x43\x34\x36\x51\x4b\x6a\x40\x5f\x71\x24\x3d\x5c\x6e\x42\x38\x2a\x30\x79",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_83( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			colon,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			leftParen,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			variableName,
			leftAngle,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"colon",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"variableName",
			"leftAngle",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\166\144\142\153\126\000",
			"\176\000",
			"\147\126\000",
			"\136\000",
			"\072\000",
			"\060\000",
			"\121\000",
			"\140\000",
			"\100\000",
			"\050\000",
			"\132\000",
			"\111\000",
			"\046\000",
			"\170\000",
			"\051\000",
			"\161\070\000",
			"\074\000",
			"\065\000",
			"\000",
		};
		int _rubric_s = 20;
      sprintf(str,"'%s' Random String Failed\n","\x28\x76\x64\x62\x6b\x56\x7e\x67\x56\x5e\x3a\x30\x51\x60\x40\x28\x5a\x0a\x49\x26\x78\x29\x71\x38\x3c\x35");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x76\x64\x62\x6b\x56\x7e\x67\x56\x5e\x3a\x30\x51\x60\x40\x28\x5a\x0a\x49\x26\x78\x29\x71\x38\x3c\x35",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_84( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			comma,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			variableName,
			leftAngle,
			rightSquare,
			lexicalError,
			variableName,
			rightSquare,
			intConst,
			variableName,
			lexicalError,
			variableName,
			forwardSlash,
			lexicalError,
			variableName,
			star,
			lexicalError,
			leftParen,
			intConst,
			lexicalError,
			leftAngle,
			rightParen,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"comma",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"variableName",
			"leftAngle",
			"rightSquare",
			"lexicalError",
			"variableName",
			"rightSquare",
			"intConst",
			"variableName",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"lexicalError",
			"variableName",
			"star",
			"lexicalError",
			"leftParen",
			"intConst",
			"lexicalError",
			"leftAngle",
			"rightParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\171\137\172\155\000",
			"\054\000",
			"\127\000",
			"\114\000",
			"\160\110\000",
			"\073\000",
			"\145\064\000",
			"\074\000",
			"\135\000",
			"\110\000",
			"\146\060\150\062\127\115\000",
			"\135\000",
			"\065\000",
			"\166\153\071\000",
			"\041\000",
			"\144\000",
			"\057\000",
			"\056\000",
			"\144\144\147\141\000",
			"\052\000",
			"\103\000",
			"\050\000",
			"\067\067\000",
			"\110\000",
			"\074\000",
			"\051\000",
			"\047\000",
			"\151\141\160\161\000",
			"\176\000",
			"\170\147\000",
			"\000",
		};
		int _rubric_s = 31;
      sprintf(str,"'%s' Random String Failed\n","\x79\x5f\x7a\x6d\x2c\x57\x4c\x70\x48\x3b\x65\x34\x3c\x5d\x48\x66\x30\x68\x32\x57\x4d\x5d\x35\x76\x6b\x39\x21\x64\x2f\x2e\x64\x64\x67\x61\x2a\x43\x28\x37\x37\x48\x3c\x29\x27\x69\x61\x70\x71\x7e\x78\x67");
      TSM_ASSERT(str,checkAgainstRubric("\x79\x5f\x7a\x6d\x2c\x57\x4c\x70\x48\x3b\x65\x34\x3c\x5d\x48\x66\x30\x68\x32\x57\x4d\x5d\x35\x76\x6b\x39\x21\x64\x2f\x2e\x64\x64\x67\x61\x2a\x43\x28\x37\x37\x48\x3c\x29\x27\x69\x61\x70\x71\x7e\x78\x67",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_85( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			rightParen,
			star,
			variableName,
			comma,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			stringConst,
			variableName,
			star,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"rightParen",
			"star",
			"variableName",
			"comma",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"stringConst",
			"variableName",
			"star",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\104\000",
			"\051\000",
			"\052\000",
			"\141\122\153\101\147\143\062\166\161\156\000",
			"\054\000",
			"\140\000",
			"\101\000",
			"\047\000",
			"\067\000",
			"\042\076\063\047\104\072\114\135\176\136\056\155\143\151\052\147\162\157\061\100\123\131\146\154\053\136\067\042\000",
			"\161\000",
			"\052\000",
			"\124\000",
			"\000",
		};
		int _rubric_s = 14;
      sprintf(str,"'%s' Random String Failed\n","\x44\x29\x2a\x61\x52\x6b\x41\x67\x63\x32\x76\x71\x6e\x2c\x60\x41\x27\x37\x22\x3e\x33\x27\x44\x3a\x4c\x5d\x7e\x5e\x2e\x6d\x63\x69\x2a\x67\x72\x6f\x31\x40\x53\x59\x66\x6c\x2b\x5e\x37\x22\x71\x2a\x54");
      TSM_ASSERT(str,checkAgainstRubric("\x44\x29\x2a\x61\x52\x6b\x41\x67\x63\x32\x76\x71\x6e\x2c\x60\x41\x27\x37\x22\x3e\x33\x27\x44\x3a\x4c\x5d\x7e\x5e\x2e\x6d\x63\x69\x2a\x67\x72\x6f\x31\x40\x53\x59\x66\x6c\x2b\x5e\x37\x22\x71\x2a\x54",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_86( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			stringConst,
			lexicalError,
			variableName,
			leftParen,
			intConst,
			lexicalError,
			leftSquare,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"stringConst",
			"lexicalError",
			"variableName",
			"leftParen",
			"intConst",
			"lexicalError",
			"leftSquare",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\137\000",
			"\160\152\000",
			"\042\102\126\041\066\077\064\170\103\131\071\153\100\124\126\063\012\170\143\101\050\071\146\056\174\137\042\000",
			"\136\000",
			"\155\141\000",
			"\050\000",
			"\067\000",
			"\137\000",
			"\133\000",
			"\047\000",
			"\162\171\157\132\152\062\160\061\060\120\150\063\062\137\000",
			"\000",
		};
		int _rubric_s = 12;
      sprintf(str,"'%s' Random String Failed\n","\x5f\x70\x6a\x22\x42\x56\x21\x36\x3f\x34\x78\x43\x59\x39\x6b\x40\x54\x56\x33\x0a\x78\x63\x41\x28\x39\x66\x2e\x7c\x5f\x22\x5e\x6d\x61\x28\x37\x5f\x5b\x27\x72\x79\x6f\x5a\x6a\x32\x70\x31\x30\x50\x68\x33\x32\x5f");
      TSM_ASSERT(str,checkAgainstRubric("\x5f\x70\x6a\x22\x42\x56\x21\x36\x3f\x34\x78\x43\x59\x39\x6b\x40\x54\x56\x33\x0a\x78\x63\x41\x28\x39\x66\x2e\x7c\x5f\x22\x5e\x6d\x61\x28\x37\x5f\x5b\x27\x72\x79\x6f\x5a\x6a\x32\x70\x31\x30\x50\x68\x33\x32\x5f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_87( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			lexicalError,
			variableName,
			plusSign,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			rightAngle,
			intConst,
			lexicalError,
			variableName,
			comma,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			forwardSlash,
			lexicalError,
			comma,
			lexicalError,
			variableName,
			dash,
			lexicalError,
			comma,
			variableName,
			variableName,
			plusSign,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			equalsSign,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"lexicalError",
			"variableName",
			"plusSign",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightAngle",
			"intConst",
			"lexicalError",
			"variableName",
			"comma",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"comma",
			"lexicalError",
			"variableName",
			"dash",
			"lexicalError",
			"comma",
			"variableName",
			"variableName",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"equalsSign",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\103\000",
			"\152\064\000",
			"\053\000",
			"\060\000",
			"\132\000",
			"\127\000",
			"\130\000",
			"\153\000",
			"\056\000",
			"\076\000",
			"\060\000",
			"\123\000",
			"\154\144\150\062\167\105\126\161\000",
			"\054\000",
			"\126\000",
			"\041\000",
			"\172\070\165\000",
			"\044\000",
			"\163\000",
			"\136\000",
			"\057\000",
			"\113\000",
			"\054\000",
			"\137\000",
			"\147\000",
			"\055\000",
			"\106\000",
			"\054\000",
			"\153\127\000",
			"\167\171\000",
			"\053\000",
			"\042\000",
			"\105\000",
			"\112\000",
			"\170\000",
			"\075\000",
			"\154\131\117\157\124\000",
			"\000",
		};
		int _rubric_s = 39;
      sprintf(str,"'%s' Random String Failed\n","\x3b\x43\x6a\x34\x2b\x30\x5a\x57\x58\x6b\x2e\x0a\x3e\x30\x53\x6c\x64\x68\x32\x77\x45\x56\x71\x2c\x56\x21\x7a\x38\x75\x24\x73\x5e\x2f\x4b\x2c\x5f\x67\x2d\x46\x2c\x6b\x57\x0a\x77\x79\x2b\x22\x45\x4a\x78\x3d\x6c\x59\x4f\x6f\x54");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x43\x6a\x34\x2b\x30\x5a\x57\x58\x6b\x2e\x0a\x3e\x30\x53\x6c\x64\x68\x32\x77\x45\x56\x71\x2c\x56\x21\x7a\x38\x75\x24\x73\x5e\x2f\x4b\x2c\x5f\x67\x2d\x46\x2c\x6b\x57\x0a\x77\x79\x2b\x22\x45\x4a\x78\x3d\x6c\x59\x4f\x6f\x54",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_88( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			backSlash,
			lexicalError,
			variableName,
			leftAngle,
			leftAngle,
			lexicalError,
			variableName,
			rightParen,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"backSlash",
			"lexicalError",
			"variableName",
			"leftAngle",
			"leftAngle",
			"lexicalError",
			"variableName",
			"rightParen",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\176\000",
			"\134\000",
			"\125\000",
			"\164\155\125\000",
			"\074\000",
			"\074\000",
			"\056\000",
			"\143\165\000",
			"\051\000",
			"\172\147\000",
			"\000",
		};
		int _rubric_s = 11;
      sprintf(str,"'%s' Random String Failed\n","\x7e\x5c\x55\x74\x6d\x55\x3c\x3c\x2e\x63\x75\x29\x7a\x67");
      TSM_ASSERT(str,checkAgainstRubric("\x7e\x5c\x55\x74\x6d\x55\x3c\x3c\x2e\x63\x75\x29\x7a\x67",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_89( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			lexicalError,
			lexicalError,
			intConst,
			leftParen,
			intConst,
			lexicalError,
			variableName,
			semiColon,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			dash,
			variableName,
			lexicalError,
			colon,
			lexicalError,
			variableName,
			forwardSlash,
			semiColon,
			variableName,
			lexicalError,
			plusSign,
			rightParen,
			variableName,
			forwardSlash,
			rightSquare,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			dash,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			backSlash,
			lexicalError,
			plusSign,
			leftParen,
			lexicalError,
			leftParen,
			backSlash,
			variableName,
			plusSign,
			leftSquare,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"lexicalError",
			"lexicalError",
			"intConst",
			"leftParen",
			"intConst",
			"lexicalError",
			"variableName",
			"semiColon",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"dash",
			"variableName",
			"lexicalError",
			"colon",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"semiColon",
			"variableName",
			"lexicalError",
			"plusSign",
			"rightParen",
			"variableName",
			"forwardSlash",
			"rightSquare",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"dash",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"backSlash",
			"lexicalError",
			"plusSign",
			"leftParen",
			"lexicalError",
			"leftParen",
			"backSlash",
			"variableName",
			"plusSign",
			"leftSquare",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\125\000",
			"\130\000",
			"\060\000",
			"\050\000",
			"\067\000",
			"\102\000",
			"\156\000",
			"\073\000",
			"\166\130\000",
			"\056\000",
			"\047\000",
			"\147\000",
			"\055\000",
			"\165\000",
			"\126\000",
			"\072\000",
			"\041\000",
			"\171\064\000",
			"\057\000",
			"\073\000",
			"\144\131\144\000",
			"\043\000",
			"\053\000",
			"\051\000",
			"\161\112\000",
			"\057\000",
			"\135\000",
			"\065\000",
			"\136\000",
			"\131\000",
			"\156\000",
			"\055\000",
			"\143\065\000",
			"\047\000",
			"\077\000",
			"\106\000",
			"\134\000",
			"\127\000",
			"\053\000",
			"\050\000",
			"\102\000",
			"\050\000",
			"\134\000",
			"\162\000",
			"\053\000",
			"\133\000",
			"\113\000",
			"\046\000",
			"\117\000",
			"\115\000",
			"\105\000",
			"\117\000",
			"\000",
		};
		int _rubric_s = 54;
      sprintf(str,"'%s' Random String Failed\n","\x3a\x55\x58\x30\x28\x37\x42\x6e\x3b\x76\x58\x2e\x27\x67\x2d\x75\x0a\x56\x3a\x21\x79\x34\x2f\x3b\x64\x59\x64\x23\x2b\x29\x71\x4a\x2f\x5d\x35\x5e\x59\x6e\x2d\x63\x35\x27\x3f\x46\x5c\x57\x2b\x28\x42\x28\x5c\x72\x2b\x5b\x4b\x26\x4f\x4d\x45\x4f");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x55\x58\x30\x28\x37\x42\x6e\x3b\x76\x58\x2e\x27\x67\x2d\x75\x0a\x56\x3a\x21\x79\x34\x2f\x3b\x64\x59\x64\x23\x2b\x29\x71\x4a\x2f\x5d\x35\x5e\x59\x6e\x2d\x63\x35\x27\x3f\x46\x5c\x57\x2b\x28\x42\x28\x5c\x72\x2b\x5b\x4b\x26\x4f\x4d\x45\x4f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_90( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			leftParen,
			semiColon,
			rightSquare,
			variableName,
			dash,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			rightParen,
			lexicalError,
			lexicalError,
			equalsSign,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"leftParen",
			"semiColon",
			"rightSquare",
			"variableName",
			"dash",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"equalsSign",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\000",
			"\050\000",
			"\073\000",
			"\135\000",
			"\162\120\164\125\154\122\000",
			"\055\000",
			"\062\000",
			"\122\000",
			"\122\000",
			"\140\000",
			"\051\000",
			"\174\000",
			"\130\000",
			"\075\000",
			"\065\000",
			"\131\000",
			"\141\000",
			"\176\000",
			"\111\000",
			"\136\000",
			"\160\115\060\000",
			"\000",
		};
		int _rubric_s = 22;
      sprintf(str,"'%s' Random String Failed\n","\x34\x28\x3b\x5d\x0a\x72\x50\x74\x55\x6c\x52\x0a\x2d\x32\x52\x52\x60\x29\x7c\x58\x3d\x35\x59\x61\x7e\x49\x5e\x70\x4d\x30");
      TSM_ASSERT(str,checkAgainstRubric("\x34\x28\x3b\x5d\x0a\x72\x50\x74\x55\x6c\x52\x0a\x2d\x32\x52\x52\x60\x29\x7c\x58\x3d\x35\x59\x61\x7e\x49\x5e\x70\x4d\x30",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_91( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			equalsSign,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			rightAngle,
			rightSquare,
			intConst,
			variableName,
			plusSign,
			lexicalError,
			backSlash,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"equalsSign",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"rightAngle",
			"rightSquare",
			"intConst",
			"variableName",
			"plusSign",
			"lexicalError",
			"backSlash",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\117\000",
			"\132\000",
			"\075\000",
			"\042\000",
			"\111\000",
			"\150\000",
			"\050\000",
			"\076\000",
			"\135\000",
			"\061\000",
			"\163\000",
			"\053\000",
			"\110\000",
			"\134\000",
			"\077\000",
			"\000",
		};
		int _rubric_s = 16;
      sprintf(str,"'%s' Random String Failed\n","\x4f\x5a\x3d\x22\x49\x68\x28\x3e\x5d\x31\x73\x2b\x48\x5c\x3f");
      TSM_ASSERT(str,checkAgainstRubric("\x4f\x5a\x3d\x22\x49\x68\x28\x3e\x5d\x31\x73\x2b\x48\x5c\x3f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_92( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			percent,
			lexicalError,
			lexicalError,
			leftSquare,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			leftAngle,
			dash,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"percent",
			"lexicalError",
			"lexicalError",
			"leftSquare",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"leftAngle",
			"dash",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\000",
			"\125\000",
			"\042\000",
			"\101\000",
			"\171\152\064\155\000",
			"\045\000",
			"\107\000",
			"\112\000",
			"\133\000",
			"\176\000",
			"\064\000",
			"\136\000",
			"\104\000",
			"\176\000",
			"\131\000",
			"\167\064\000",
			"\136\000",
			"\074\000",
			"\055\000",
			"\147\000",
			"\000",
		};
		int _rubric_s = 21;
      sprintf(str,"'%s' Random String Failed\n","\x53\x55\x22\x41\x79\x6a\x34\x6d\x25\x47\x4a\x5b\x7e\x34\x5e\x44\x7e\x59\x77\x34\x5e\x3c\x2d\x67");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x55\x22\x41\x79\x6a\x34\x6d\x25\x47\x4a\x5b\x7e\x34\x5e\x44\x7e\x59\x77\x34\x5e\x3c\x2d\x67",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_93( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			rightParen,
			variableName,
			leftParen,
			dash,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"rightParen",
			"variableName",
			"leftParen",
			"dash",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\132\000",
			"\051\000",
			"\157\142\160\122\120\000",
			"\050\000",
			"\055\000",
			"\047\000",
			"\041\000",
			"\000",
		};
		int _rubric_s = 8;
      sprintf(str,"'%s' Random String Failed\n","\x5a\x29\x6f\x62\x70\x52\x50\x28\x2d\x27\x21");
      TSM_ASSERT(str,checkAgainstRubric("\x5a\x29\x6f\x62\x70\x52\x50\x28\x2d\x27\x21",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_94( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			lexicalError,
			lexicalError,
			semiColon,
			leftParen,
			intConst,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"lexicalError",
			"lexicalError",
			"semiColon",
			"leftParen",
			"intConst",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\104\000",
			"\114\000",
			"\073\000",
			"\050\000",
			"\066\000",
			"\121\000",
			"\066\000",
			"\077\000",
			"\104\000",
			"\000",
		};
		int _rubric_s = 11;
      sprintf(str,"'%s' Random String Failed\n","\x29\x44\x4c\x3b\x28\x36\x51\x36\x3f\x44");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x44\x4c\x3b\x28\x36\x51\x36\x3f\x44",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_95( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			rightSquare,
			variableName,
			star,
			intConst,
			lexicalError,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"rightSquare",
			"variableName",
			"star",
			"intConst",
			"lexicalError",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\047\000",
			"\107\000",
			"\161\150\000",
			"\121\000",
			"\157\000",
			"\135\000",
			"\147\000",
			"\052\000",
			"\063\000",
			"\122\000",
			"\124\000",
			"\066\000",
			"\000",
		};
		int _rubric_s = 13;
      sprintf(str,"'%s' Random String Failed\n","\x27\x47\x71\x68\x20\x51\x6f\x5d\x67\x2a\x33\x52\x54\x36");
      TSM_ASSERT(str,checkAgainstRubric("\x27\x47\x71\x68\x20\x51\x6f\x5d\x67\x2a\x33\x52\x54\x36",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_96( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			percent,
			variableName,
			comma,
			rightSquare,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			dash,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			comma,
			intConst,
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			equalsSign,
			intConst,
			lexicalError,
			comma,
			leftSquare,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			colon,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"percent",
			"variableName",
			"comma",
			"rightSquare",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"dash",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"comma",
			"intConst",
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"equalsSign",
			"intConst",
			"lexicalError",
			"comma",
			"leftSquare",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"colon",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\153\106\117\132\000",
			"\045\000",
			"\153\000",
			"\054\000",
			"\135\000",
			"\110\000",
			"\100\000",
			"\105\000",
			"\164\110\062\000",
			"\055\000",
			"\110\000",
			"\165\000",
			"\051\000",
			"\107\000",
			"\054\000",
			"\071\000",
			"\114\000",
			"\071\061\000",
			"\103\000",
			"\065\000",
			"\075\000",
			"\062\000",
			"\056\000",
			"\054\000",
			"\133\000",
			"\157\102\000",
			"\047\000",
			"\063\067\000",
			"\044\000",
			"\072\000",
			"\065\000",
			"\000",
		};
		int _rubric_s = 32;
      sprintf(str,"'%s' Random String Failed\n","\x74\x6b\x46\x4f\x5a\x25\x6b\x2c\x5d\x48\x40\x45\x74\x48\x32\x2d\x48\x75\x29\x47\x2c\x39\x4c\x39\x31\x43\x35\x3d\x32\x2e\x2c\x5b\x6f\x42\x27\x33\x37\x24\x3a\x35");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x6b\x46\x4f\x5a\x25\x6b\x2c\x5d\x48\x40\x45\x74\x48\x32\x2d\x48\x75\x29\x47\x2c\x39\x4c\x39\x31\x43\x35\x3d\x32\x2e\x2c\x5b\x6f\x42\x27\x33\x37\x24\x3a\x35",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_97( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftParen,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\142\120\137\000",
			"\050\000",
			"\127\000",
			"\166\126\132\000",
			"\042\000",
			"\112\000",
			"\122\000",
			"\141\164\000",
			"\000",
		};
		int _rubric_s = 9;
      sprintf(str,"'%s' Random String Failed\n","\x62\x50\x5f\x28\x57\x76\x56\x5a\x22\x4a\x52\x61\x74");
      TSM_ASSERT(str,checkAgainstRubric("\x62\x50\x5f\x28\x57\x76\x56\x5a\x22\x4a\x52\x61\x74",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_98( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			equalsSign,
			lexicalError,
			comma,
			variableName,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftAngle,
			lexicalError,
			variableName,
			semiColon,
			plusSign,
			rightParen,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			comma,
			rightSquare,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			leftParen,
			variableName,
			comma,
			variableName,
			lexicalError,
			lexicalError,
			rightAngle,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"equalsSign",
			"lexicalError",
			"comma",
			"variableName",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftAngle",
			"lexicalError",
			"variableName",
			"semiColon",
			"plusSign",
			"rightParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"comma",
			"rightSquare",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"variableName",
			"comma",
			"variableName",
			"lexicalError",
			"lexicalError",
			"rightAngle",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\000",
			"\075\000",
			"\107\000",
			"\054\000",
			"\165\000",
			"\162\066\000",
			"\056\000",
			"\110\000",
			"\116\000",
			"\163\144\137\151\000",
			"\074\000",
			"\137\000",
			"\153\000",
			"\073\000",
			"\053\000",
			"\051\000",
			"\171\000",
			"\100\000",
			"\111\000",
			"\070\000",
			"\125\000",
			"\161\000",
			"\054\000",
			"\135\000",
			"\154\161\066\000",
			"\176\000",
			"\126\000",
			"\174\000",
			"\117\000",
			"\050\000",
			"\161\061\000",
			"\054\000",
			"\164\000",
			"\043\000",
			"\123\000",
			"\076\000",
			"\146\110\120\103\066\164\165\123\152\000",
			"\077\000",
			"\000",
		};
		int _rubric_s = 39;
      sprintf(str,"'%s' Random String Failed\n","\x6d\x3d\x47\x2c\x75\x20\x72\x36\x2e\x48\x4e\x73\x64\x5f\x69\x3c\x5f\x6b\x3b\x2b\x29\x79\x40\x49\x38\x55\x71\x2c\x5d\x6c\x71\x36\x7e\x56\x7c\x4f\x28\x71\x31\x2c\x74\x23\x53\x3e\x66\x48\x50\x43\x36\x74\x75\x53\x6a\x3f");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x3d\x47\x2c\x75\x20\x72\x36\x2e\x48\x4e\x73\x64\x5f\x69\x3c\x5f\x6b\x3b\x2b\x29\x79\x40\x49\x38\x55\x71\x2c\x5d\x6c\x71\x36\x7e\x56\x7c\x4f\x28\x71\x31\x2c\x74\x23\x53\x3e\x66\x48\x50\x43\x36\x74\x75\x53\x6a\x3f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_99( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			backSlash,
			leftSquare,
			variableName,
			star,
			lexicalError,
			equalsSign,
			lexicalError,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"backSlash",
			"leftSquare",
			"variableName",
			"star",
			"lexicalError",
			"equalsSign",
			"lexicalError",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\140\000",
			"\064\065\000",
			"\042\000",
			"\152\164\000",
			"\134\000",
			"\133\000",
			"\163\146\000",
			"\052\000",
			"\125\000",
			"\075\000",
			"\137\000",
			"\141\166\000",
			"\136\000",
			"\000",
		};
		int _rubric_s = 14;
      sprintf(str,"'%s' Random String Failed\n","\x60\x34\x35\x22\x6a\x74\x5c\x5b\x73\x66\x2a\x55\x3d\x5f\x61\x76\x5e");
      TSM_ASSERT(str,checkAgainstRubric("\x60\x34\x35\x22\x6a\x74\x5c\x5b\x73\x66\x2a\x55\x3d\x5f\x61\x76\x5e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_100( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			lexicalError,
			variableName,
			percent,
			rightAngle,
			variableName,
			comma,
			variableName,
			equalsSign,
			backSlash,
			intConst,
			comma,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"lexicalError",
			"variableName",
			"percent",
			"rightAngle",
			"variableName",
			"comma",
			"variableName",
			"equalsSign",
			"backSlash",
			"intConst",
			"comma",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\101\000",
			"\147\000",
			"\073\000",
			"\117\000",
			"\136\000",
			"\157\163\061\146\154\000",
			"\045\000",
			"\076\000",
			"\164\065\000",
			"\054\000",
			"\156\171\162\131\122\145\070\165\000",
			"\075\000",
			"\134\000",
			"\065\000",
			"\054\000",
			"\144\000",
			"\125\000",
			"\101\000",
			"\120\000",
			"\126\000",
			"\112\000",
			"\113\000",
			"\153\000",
			"\073\000",
			"\142\106\103\143\122\142\166\000",
			"\000",
		};
		int _rubric_s = 26;
      sprintf(str,"'%s' Random String Failed\n","\x41\x67\x3b\x4f\x5e\x6f\x73\x31\x66\x6c\x25\x3e\x74\x35\x2c\x6e\x79\x72\x59\x52\x65\x38\x75\x3d\x5c\x35\x2c\x64\x20\x55\x41\x50\x56\x4a\x4b\x6b\x3b\x62\x46\x43\x63\x52\x62\x76");
      TSM_ASSERT(str,checkAgainstRubric("\x41\x67\x3b\x4f\x5e\x6f\x73\x31\x66\x6c\x25\x3e\x74\x35\x2c\x6e\x79\x72\x59\x52\x65\x38\x75\x3d\x5c\x35\x2c\x64\x20\x55\x41\x50\x56\x4a\x4b\x6b\x3b\x62\x46\x43\x63\x52\x62\x76",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_101( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			percent,
			variableName,
			plusSign,
			leftParen,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			dash,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftAngle,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			leftSquare,
			lexicalError,
			leftSquare,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			equalsSign,
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			backSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"percent",
			"variableName",
			"plusSign",
			"leftParen",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"dash",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftAngle",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"leftSquare",
			"lexicalError",
			"leftSquare",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"equalsSign",
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\044\000",
			"\045\000",
			"\145\060\131\116\163\000",
			"\053\000",
			"\050\000",
			"\070\061\000",
			"\157\104\110\144\120\110\000",
			"\047\000",
			"\112\000",
			"\061\060\000",
			"\055\000",
			"\060\000",
			"\171\127\106\000",
			"\056\000",
			"\103\000",
			"\176\000",
			"\162\000",
			"\074\000",
			"\100\000",
			"\047\000",
			"\160\000",
			"\046\000",
			"\142\000",
			"\127\000",
			"\133\000",
			"\126\000",
			"\133\000",
			"\123\000",
			"\042\000",
			"\100\000",
			"\131\000",
			"\071\000",
			"\167\141\000",
			"\174\000",
			"\075\000",
			"\136\000",
			"\154\000",
			"\073\000",
			"\116\000",
			"\134\000",
			"\114\000",
			"\123\000",
			"\110\000",
			"\144\130\111\120\000",
			"\000",
		};
		int _rubric_s = 45;
      sprintf(str,"'%s' Random String Failed\n","\x24\x25\x65\x30\x59\x4e\x73\x2b\x28\x38\x31\x6f\x44\x48\x64\x50\x48\x27\x4a\x31\x30\x2d\x30\x79\x57\x46\x2e\x43\x7e\x72\x3c\x40\x27\x70\x26\x62\x09\x57\x5b\x56\x5b\x53\x20\x22\x40\x59\x39\x77\x61\x7c\x3d\x5e\x6c\x3b\x4e\x5c\x4c\x53\x48\x64\x58\x49\x50");
      TSM_ASSERT(str,checkAgainstRubric("\x24\x25\x65\x30\x59\x4e\x73\x2b\x28\x38\x31\x6f\x44\x48\x64\x50\x48\x27\x4a\x31\x30\x2d\x30\x79\x57\x46\x2e\x43\x7e\x72\x3c\x40\x27\x70\x26\x62\x09\x57\x5b\x56\x5b\x53\x20\x22\x40\x59\x39\x77\x61\x7c\x3d\x5e\x6c\x3b\x4e\x5c\x4c\x53\x48\x64\x58\x49\x50",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_102( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			lexicalError,
			leftAngle,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			leftSquare,
			intConst,
			variableName,
			backSlash,
			variableName,
			leftAngle,
			forwardSlash,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"lexicalError",
			"leftAngle",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"leftSquare",
			"intConst",
			"variableName",
			"backSlash",
			"variableName",
			"leftAngle",
			"forwardSlash",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\112\000",
			"\116\000",
			"\103\000",
			"\113\000",
			"\102\000",
			"\106\000",
			"\152\000",
			"\136\000",
			"\176\000",
			"\114\000",
			"\065\000",
			"\140\000",
			"\066\000",
			"\131\000",
			"\074\000",
			"\110\000",
			"\153\160\067\000",
			"\047\000",
			"\142\130\141\071\147\142\107\107\000",
			"\133\000",
			"\063\000",
			"\150\000",
			"\134\000",
			"\144\000",
			"\074\000",
			"\057\000",
			"\046\000",
			"\131\000",
			"\155\146\131\105\000",
			"\115\000",
			"\125\000",
			"\117\000",
			"\151\000",
			"\100\000",
			"\041\000",
			"\000",
		};
		int _rubric_s = 36;
      sprintf(str,"'%s' Random String Failed\n","\x4a\x4e\x43\x4b\x42\x46\x6a\x5e\x7e\x4c\x35\x60\x36\x59\x3c\x48\x6b\x70\x37\x27\x62\x58\x61\x39\x67\x62\x47\x47\x5b\x33\x68\x5c\x64\x3c\x2f\x26\x59\x6d\x66\x59\x45\x20\x4d\x55\x4f\x69\x40\x21");
      TSM_ASSERT(str,checkAgainstRubric("\x4a\x4e\x43\x4b\x42\x46\x6a\x5e\x7e\x4c\x35\x60\x36\x59\x3c\x48\x6b\x70\x37\x27\x62\x58\x61\x39\x67\x62\x47\x47\x5b\x33\x68\x5c\x64\x3c\x2f\x26\x59\x6d\x66\x59\x45\x20\x4d\x55\x4f\x69\x40\x21",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_103( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			percent,
			semiColon,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			backSlash,
			lexicalError,
			variableName,
			leftSquare,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"percent",
			"semiColon",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"backSlash",
			"lexicalError",
			"variableName",
			"leftSquare",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\154\137\145\110\000",
			"\045\000",
			"\073\000",
			"\042\000",
			"\150\000",
			"\046\000",
			"\141\121\000",
			"\056\000",
			"\102\000",
			"\154\000",
			"\134\000",
			"\136\000",
			"\142\000",
			"\133\000",
			"\137\000",
			"\062\000",
			"\161\000",
			"\042\000",
			"\046\000",
			"\071\070\000",
			"\103\000",
			"\047\000",
			"\170\000",
			"\136\000",
			"\000",
		};
		int _rubric_s = 25;
      sprintf(str,"'%s' Random String Failed\n","\x6c\x5f\x65\x48\x25\x3b\x22\x68\x26\x61\x51\x2e\x42\x6c\x5c\x5e\x62\x5b\x5f\x0a\x32\x71\x22\x26\x39\x38\x43\x27\x78\x5e");
      TSM_ASSERT(str,checkAgainstRubric("\x6c\x5f\x65\x48\x25\x3b\x22\x68\x26\x61\x51\x2e\x42\x6c\x5c\x5e\x62\x5b\x5f\x0a\x32\x71\x22\x26\x39\x38\x43\x27\x78\x5e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_104( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			backSlash,
			lexicalError,
			variableName,
			rightSquare,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			rightAngle,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			rightSquare,
			intConst,
			lexicalError,
			lexicalError,
			colon,
			variableName,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			lexicalError,
			variableName,
			variableName,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"backSlash",
			"lexicalError",
			"variableName",
			"rightSquare",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightAngle",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightSquare",
			"intConst",
			"lexicalError",
			"lexicalError",
			"colon",
			"variableName",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"variableName",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\147\154\000",
			"\134\000",
			"\140\000",
			"\167\000",
			"\135\000",
			"\164\121\172\000",
			"\056\000",
			"\136\000",
			"\157\103\112\000",
			"\076\000",
			"\130\000",
			"\126\000",
			"\120\000",
			"\125\000",
			"\143\162\137\157\000",
			"\135\000",
			"\067\000",
			"\132\000",
			"\101\000",
			"\072\000",
			"\162\154\000",
			"\176\000",
			"\154\000",
			"\051\000",
			"\122\000",
			"\122\000",
			"\167\127\162\000",
			"\157\102\000",
			"\056\000",
			"\067\000",
			"\000",
		};
		int _rubric_s = 31;
      sprintf(str,"'%s' Random String Failed\n","\x67\x6c\x5c\x60\x77\x5d\x74\x51\x7a\x2e\x5e\x09\x6f\x43\x4a\x3e\x58\x56\x50\x55\x63\x72\x5f\x6f\x5d\x37\x5a\x41\x20\x3a\x72\x6c\x7e\x6c\x29\x52\x52\x20\x77\x57\x72\x0a\x0a\x6f\x42\x2e\x37");
      TSM_ASSERT(str,checkAgainstRubric("\x67\x6c\x5c\x60\x77\x5d\x74\x51\x7a\x2e\x5e\x09\x6f\x43\x4a\x3e\x58\x56\x50\x55\x63\x72\x5f\x6f\x5d\x37\x5a\x41\x20\x3a\x72\x6c\x7e\x6c\x29\x52\x52\x20\x77\x57\x72\x0a\x0a\x6f\x42\x2e\x37",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_105( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			lexicalError,
			rightParen,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\131\000",
			"\165\115\106\067\000",
			"\100\000",
			"\051\000",
			"\126\000",
			"\172\146\126\141\130\154\000",
			"\000",
		};
		int _rubric_s = 7;
      sprintf(str,"'%s' Random String Failed\n","\x59\x75\x4d\x46\x37\x40\x29\x56\x7a\x66\x56\x61\x58\x6c");
      TSM_ASSERT(str,checkAgainstRubric("\x59\x75\x4d\x46\x37\x40\x29\x56\x7a\x66\x56\x61\x58\x6c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_106( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			star,
			lexicalError,
			lexicalError,
			variableName,
			variableName,
			dash,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			leftParen,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			comma,
			variableName,
			lexicalError,
			backSlash,
			lexicalError,
			forwardSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			percent,
			plusSign,
			lexicalError,
			leftParen,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"star",
			"lexicalError",
			"lexicalError",
			"variableName",
			"variableName",
			"dash",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"leftParen",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"comma",
			"variableName",
			"lexicalError",
			"backSlash",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"percent",
			"plusSign",
			"lexicalError",
			"leftParen",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\170\000",
			"\052\000",
			"\103\000",
			"\103\000",
			"\156\127\111\000",
			"\157\110\130\066\000",
			"\055\000",
			"\161\060\160\000",
			"\042\000",
			"\106\000",
			"\062\064\066\000",
			"\112\000",
			"\050\000",
			"\065\000",
			"\166\121\000",
			"\041\000",
			"\120\000",
			"\154\071\000",
			"\054\000",
			"\165\000",
			"\077\000",
			"\134\000",
			"\111\000",
			"\057\000",
			"\113\000",
			"\120\000",
			"\117\000",
			"\065\000",
			"\045\000",
			"\053\000",
			"\123\000",
			"\050\000",
			"\066\000",
			"\000",
		};
		int _rubric_s = 34;
      sprintf(str,"'%s' Random String Failed\n","\x78\x2a\x43\x43\x09\x6e\x57\x49\x09\x6f\x48\x58\x36\x2d\x71\x30\x70\x22\x46\x32\x34\x36\x4a\x28\x35\x76\x51\x09\x21\x50\x6c\x39\x2c\x75\x3f\x5c\x49\x2f\x4b\x50\x4f\x35\x25\x2b\x53\x28\x36");
      TSM_ASSERT(str,checkAgainstRubric("\x78\x2a\x43\x43\x09\x6e\x57\x49\x09\x6f\x48\x58\x36\x2d\x71\x30\x70\x22\x46\x32\x34\x36\x4a\x28\x35\x76\x51\x09\x21\x50\x6c\x39\x2c\x75\x3f\x5c\x49\x2f\x4b\x50\x4f\x35\x25\x2b\x53\x28\x36",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_107( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			backSlash,
			intConst,
			comma,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			plusSign,
			forwardSlash,
			intConst,
			lexicalError,
			dash,
			intConst,
			rightSquare,
			lexicalError,
			lexicalError,
			semiColon,
			variableName,
			star,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			rightParen,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"backSlash",
			"intConst",
			"comma",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"plusSign",
			"forwardSlash",
			"intConst",
			"lexicalError",
			"dash",
			"intConst",
			"rightSquare",
			"lexicalError",
			"lexicalError",
			"semiColon",
			"variableName",
			"star",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"rightParen",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\000",
			"\047\000",
			"\125\000",
			"\100\000",
			"\042\000",
			"\047\000",
			"\060\000",
			"\134\000",
			"\062\000",
			"\054\000",
			"\140\000",
			"\152\000",
			"\042\000",
			"\151\117\157\146\000",
			"\047\000",
			"\121\000",
			"\147\000",
			"\073\000",
			"\053\000",
			"\057\000",
			"\060\000",
			"\100\000",
			"\055\000",
			"\070\000",
			"\135\000",
			"\101\000",
			"\107\000",
			"\073\000",
			"\150\151\160\000",
			"\052\000",
			"\103\000",
			"\174\000",
			"\071\000",
			"\121\000",
			"\051\000",
			"\150\101\150\142\000",
			"\000",
		};
		int _rubric_s = 37;
      sprintf(str,"'%s' Random String Failed\n","\x37\x27\x55\x40\x22\x27\x30\x5c\x32\x2c\x60\x6a\x22\x69\x4f\x6f\x66\x27\x20\x51\x67\x3b\x2b\x2f\x30\x40\x2d\x38\x5d\x41\x47\x3b\x68\x69\x70\x2a\x43\x7c\x39\x51\x29\x68\x41\x68\x62");
      TSM_ASSERT(str,checkAgainstRubric("\x37\x27\x55\x40\x22\x27\x30\x5c\x32\x2c\x60\x6a\x22\x69\x4f\x6f\x66\x27\x20\x51\x67\x3b\x2b\x2f\x30\x40\x2d\x38\x5d\x41\x47\x3b\x68\x69\x70\x2a\x43\x7c\x39\x51\x29\x68\x41\x68\x62",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_108( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			forwardSlash,
			variableName,
			dash,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			plusSign,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			dash,
			rightSquare,
			lexicalError,
			variableName,
			rightParen,
			forwardSlash,
			variableName,
			forwardSlash,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"forwardSlash",
			"variableName",
			"dash",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"plusSign",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"dash",
			"rightSquare",
			"lexicalError",
			"variableName",
			"rightParen",
			"forwardSlash",
			"variableName",
			"forwardSlash",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\057\000",
			"\143\145\141\102\111\143\000",
			"\055\000",
			"\101\000",
			"\114\000",
			"\066\000",
			"\170\101\000",
			"\053\000",
			"\071\062\000",
			"\111\000",
			"\157\150\000",
			"\044\000",
			"\116\000",
			"\167\116\071\165\164\167\144\062\000",
			"\050\000",
			"\055\000",
			"\135\000",
			"\111\000",
			"\153\167\143\000",
			"\051\000",
			"\057\000",
			"\154\162\150\127\000",
			"\057\000",
			"\117\000",
			"\162\130\000",
			"\051\000",
			"\056\000",
			"\160\000",
			"\000",
		};
		int _rubric_s = 29;
      sprintf(str,"'%s' Random String Failed\n","\x2f\x63\x65\x61\x42\x49\x63\x09\x2d\x41\x4c\x36\x78\x41\x2b\x39\x32\x49\x6f\x68\x24\x4e\x0a\x77\x4e\x39\x75\x74\x77\x64\x32\x28\x2d\x5d\x49\x6b\x77\x63\x29\x2f\x6c\x72\x68\x57\x2f\x4f\x72\x58\x0a\x29\x2e\x70");
      TSM_ASSERT(str,checkAgainstRubric("\x2f\x63\x65\x61\x42\x49\x63\x09\x2d\x41\x4c\x36\x78\x41\x2b\x39\x32\x49\x6f\x68\x24\x4e\x0a\x77\x4e\x39\x75\x74\x77\x64\x32\x28\x2d\x5d\x49\x6b\x77\x63\x29\x2f\x6c\x72\x68\x57\x2f\x4f\x72\x58\x0a\x29\x2e\x70",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_109( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			lexicalError,
			lexicalError,
			variableName,
			dash,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			rightParen,
			variableName,
			variableName,
			plusSign,
			lexicalError,
			semiColon,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			backSlash,
			rightSquare,
			intConst,
			variableName,
			lexicalError,
			semiColon,
			variableName,
			rightParen,
			lexicalError,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"lexicalError",
			"lexicalError",
			"variableName",
			"dash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"rightParen",
			"variableName",
			"variableName",
			"plusSign",
			"lexicalError",
			"semiColon",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"backSlash",
			"rightSquare",
			"intConst",
			"variableName",
			"lexicalError",
			"semiColon",
			"variableName",
			"rightParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\104\000",
			"\130\000",
			"\167\000",
			"\055\000",
			"\113\000",
			"\102\000",
			"\112\000",
			"\124\000",
			"\132\000",
			"\101\000",
			"\130\000",
			"\051\000",
			"\151\000",
			"\156\105\064\161\000",
			"\053\000",
			"\117\000",
			"\073\000",
			"\106\000",
			"\140\000",
			"\043\000",
			"\125\000",
			"\163\160\061\162\157\162\000",
			"\134\000",
			"\135\000",
			"\060\000",
			"\146\000",
			"\126\000",
			"\073\000",
			"\141\171\000",
			"\051\000",
			"\114\000",
			"\164\000",
			"\046\000",
			"\000",
		};
		int _rubric_s = 35;
      sprintf(str,"'%s' Random String Failed\n","\x3c\x44\x58\x77\x2d\x4b\x42\x4a\x54\x20\x5a\x41\x58\x29\x69\x20\x6e\x45\x34\x71\x2b\x4f\x3b\x20\x46\x60\x23\x55\x73\x70\x31\x72\x6f\x72\x5c\x5d\x30\x09\x66\x09\x56\x3b\x61\x79\x29\x4c\x74\x26");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x44\x58\x77\x2d\x4b\x42\x4a\x54\x20\x5a\x41\x58\x29\x69\x20\x6e\x45\x34\x71\x2b\x4f\x3b\x20\x46\x60\x23\x55\x73\x70\x31\x72\x6f\x72\x5c\x5d\x30\x09\x66\x09\x56\x3b\x61\x79\x29\x4c\x74\x26",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_110( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftSquare,
			semiColon,
			variableName,
			plusSign,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftSquare",
			"semiColon",
			"variableName",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\166\122\116\062\000",
			"\133\000",
			"\073\000",
			"\172\067\151\172\146\000",
			"\053\000",
			"\041\000",
			"\125\000",
			"\162\130\110\170\151\000",
			"\000",
		};
		int _rubric_s = 9;
      sprintf(str,"'%s' Random String Failed\n","\x76\x52\x4e\x32\x5b\x3b\x7a\x37\x69\x7a\x66\x2b\x21\x55\x72\x58\x48\x78\x69");
      TSM_ASSERT(str,checkAgainstRubric("\x76\x52\x4e\x32\x5b\x3b\x7a\x37\x69\x7a\x66\x2b\x21\x55\x72\x58\x48\x78\x69",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_111( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			stringConst,
			lexicalError,
			lexicalError,
			comma,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			leftSquare,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			variableName,
			leftAngle,
			lexicalError,
			lexicalError,
			rightParen,
			lexicalError,
			lexicalError,
			variableName,
			dash,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"stringConst",
			"lexicalError",
			"lexicalError",
			"comma",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"leftSquare",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"variableName",
			"leftAngle",
			"lexicalError",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"dash",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\063\000",
			"\042\066\076\064\151\176\012\053\112\167\067\162\100\105\040\047\170\147\141\042\000",
			"\121\000",
			"\137\000",
			"\054\000",
			"\063\000",
			"\044\000",
			"\042\000",
			"\104\000",
			"\047\000",
			"\122\000",
			"\157\000",
			"\044\000",
			"\064\000",
			"\110\000",
			"\150\131\143\162\064\144\000",
			"\133\000",
			"\070\000",
			"\123\000",
			"\137\000",
			"\172\000",
			"\051\000",
			"\176\000",
			"\170\160\000",
			"\074\000",
			"\114\000",
			"\125\000",
			"\051\000",
			"\047\000",
			"\122\000",
			"\170\000",
			"\055\000",
			"\154\000",
			"\000",
		};
		int _rubric_s = 35;
      sprintf(str,"'%s' Random String Failed\n","\x2e\x33\x22\x36\x3e\x34\x69\x7e\x0a\x2b\x4a\x77\x37\x72\x40\x45\x20\x27\x78\x67\x61\x22\x51\x5f\x2c\x33\x24\x22\x44\x27\x52\x6f\x24\x34\x48\x68\x59\x63\x72\x34\x64\x5b\x38\x53\x5f\x7a\x29\x7e\x78\x70\x3c\x4c\x55\x29\x27\x52\x78\x2d\x6c");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x33\x22\x36\x3e\x34\x69\x7e\x0a\x2b\x4a\x77\x37\x72\x40\x45\x20\x27\x78\x67\x61\x22\x51\x5f\x2c\x33\x24\x22\x44\x27\x52\x6f\x24\x34\x48\x68\x59\x63\x72\x34\x64\x5b\x38\x53\x5f\x7a\x29\x7e\x78\x70\x3c\x4c\x55\x29\x27\x52\x78\x2d\x6c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_112( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			dash,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"dash",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\000",
			"\043\000",
			"\104\000",
			"\055\000",
			"\114\000",
			"\152\113\103\107\127\060\000",
			"\000",
		};
		int _rubric_s = 7;
      sprintf(str,"'%s' Random String Failed\n","\x77\x23\x44\x2d\x4c\x6a\x4b\x43\x47\x57\x30");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x23\x44\x2d\x4c\x6a\x4b\x43\x47\x57\x30",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_113( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\103\000",
			"\101\000",
			"\117\000",
			"\122\000",
			"\162\127\167\000",
			"\073\000",
			"\106\000",
			"\170\120\121\064\117\155\144\124\117\061\144\000",
			"\041\000",
			"\071\000",
			"\000",
		};
		int _rubric_s = 11;
      sprintf(str,"'%s' Random String Failed\n","\x43\x41\x4f\x52\x72\x57\x77\x3b\x46\x78\x50\x51\x34\x4f\x6d\x64\x54\x4f\x31\x64\x21\x39");
      TSM_ASSERT(str,checkAgainstRubric("\x43\x41\x4f\x52\x72\x57\x77\x3b\x46\x78\x50\x51\x34\x4f\x6d\x64\x54\x4f\x31\x64\x21\x39",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_114( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\155\166\145\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","\x28\x6d\x76\x65");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x6d\x76\x65",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_115( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftAngle,
			lexicalError,
			rightParen,
			variableName,
			forwardSlash,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			percent,
			intConst,
			variableName,
			percent,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftAngle",
			"lexicalError",
			"rightParen",
			"variableName",
			"forwardSlash",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"percent",
			"intConst",
			"variableName",
			"percent",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\147\120\000",
			"\074\000",
			"\100\000",
			"\051\000",
			"\151\000",
			"\057\000",
			"\103\000",
			"\172\146\060\070\111\151\000",
			"\041\000",
			"\101\000",
			"\125\000",
			"\124\000",
			"\045\000",
			"\066\066\000",
			"\151\102\000",
			"\045\000",
			"\145\000",
			"\000",
		};
		int _rubric_s = 18;
      sprintf(str,"'%s' Random String Failed\n","\x67\x50\x20\x3c\x40\x29\x69\x2f\x43\x7a\x66\x30\x38\x49\x69\x21\x41\x55\x54\x25\x36\x36\x69\x42\x25\x09\x65");
      TSM_ASSERT(str,checkAgainstRubric("\x67\x50\x20\x3c\x40\x29\x69\x2f\x43\x7a\x66\x30\x38\x49\x69\x21\x41\x55\x54\x25\x36\x36\x69\x42\x25\x09\x65",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_116( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			leftAngle,
			variableName,
			lexicalError,
			stringConst,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"leftAngle",
			"variableName",
			"lexicalError",
			"stringConst",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\114\000",
			"\074\000",
			"\164\000",
			"\056\000",
			"\042\156\156\153\133\054\043\176\074\066\063\155\140\113\132\143\045\147\050\146\146\160\127\011\051\042\000",
			"\174\000",
			"\105\000",
			"\000",
		};
		int _rubric_s = 8;
      sprintf(str,"'%s' Random String Failed\n","\x4c\x3c\x74\x2e\x22\x6e\x6e\x6b\x5b\x2c\x23\x7e\x3c\x36\x33\x6d\x60\x4b\x5a\x63\x25\x67\x28\x66\x66\x70\x57\x09\x29\x22\x7c\x45");
      TSM_ASSERT(str,checkAgainstRubric("\x4c\x3c\x74\x2e\x22\x6e\x6e\x6b\x5b\x2c\x23\x7e\x3c\x36\x33\x6d\x60\x4b\x5a\x63\x25\x67\x28\x66\x66\x70\x57\x09\x29\x22\x7c\x45",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_117( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			rightSquare,
			leftParen,
			rightParen,
			intConst,
			star,
			variableName,
			semiColon,
			intConst,
			plusSign,
			comma,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			forwardSlash,
			lexicalError,
			variableName,
			comma,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			variableName,
			lexicalError,
			variableName,
			comma,
			variableName,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"rightSquare",
			"leftParen",
			"rightParen",
			"intConst",
			"star",
			"variableName",
			"semiColon",
			"intConst",
			"plusSign",
			"comma",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"forwardSlash",
			"lexicalError",
			"variableName",
			"comma",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"variableName",
			"lexicalError",
			"variableName",
			"comma",
			"variableName",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\166\112\142\116\112\000",
			"\135\000",
			"\050\000",
			"\051\000",
			"\065\000",
			"\052\000",
			"\166\172\102\147\137\145\131\163\130\157\000",
			"\073\000",
			"\067\000",
			"\053\000",
			"\054\000",
			"\152\113\000",
			"\100\000",
			"\120\000",
			"\071\063\000",
			"\057\000",
			"\127\000",
			"\154\000",
			"\054\000",
			"\130\000",
			"\160\166\000",
			"\041\000",
			"\125\000",
			"\136\000",
			"\157\065\162\115\000",
			"\073\000",
			"\151\000",
			"\042\000",
			"\153\000",
			"\054\000",
			"\143\060\000",
			"\047\000",
			"\104\000",
			"\000",
		};
		int _rubric_s = 34;
      sprintf(str,"'%s' Random String Failed\n","\x76\x4a\x62\x4e\x4a\x5d\x28\x29\x35\x2a\x09\x76\x7a\x42\x67\x5f\x65\x59\x73\x58\x6f\x3b\x37\x2b\x2c\x6a\x4b\x40\x50\x39\x33\x2f\x57\x6c\x2c\x58\x70\x76\x21\x55\x5e\x6f\x35\x72\x4d\x3b\x69\x22\x6b\x2c\x63\x30\x27\x44");
      TSM_ASSERT(str,checkAgainstRubric("\x76\x4a\x62\x4e\x4a\x5d\x28\x29\x35\x2a\x09\x76\x7a\x42\x67\x5f\x65\x59\x73\x58\x6f\x3b\x37\x2b\x2c\x6a\x4b\x40\x50\x39\x33\x2f\x57\x6c\x2c\x58\x70\x76\x21\x55\x5e\x6f\x35\x72\x4d\x3b\x69\x22\x6b\x2c\x63\x30\x27\x44",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_118( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			equalsSign,
			tupleOp,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"equalsSign",
			"tupleOp",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\165\160\000",
			"\056\000",
			"\075\000",
			"\043\064\000",
			"\164\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Random String Failed\n","\x09\x75\x70\x09\x0a\x2e\x3d\x23\x34\x74");
      TSM_ASSERT(str,checkAgainstRubric("\x09\x75\x70\x09\x0a\x2e\x3d\x23\x34\x74",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_119( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			forwardSlash,
			leftSquare,
			intConst,
			lexicalError,
			variableName,
			equalsSign,
			intConst,
			backSlash,
			variableName,
			forwardSlash,
			lexicalError,
			rightParen,
			lexicalError,
			forwardSlash,
			lexicalError,
			forwardSlash,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"leftSquare",
			"intConst",
			"lexicalError",
			"variableName",
			"equalsSign",
			"intConst",
			"backSlash",
			"variableName",
			"forwardSlash",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\000",
			"\120\000",
			"\145\000",
			"\057\000",
			"\133\000",
			"\061\000",
			"\126\000",
			"\157\000",
			"\075\000",
			"\062\000",
			"\134\000",
			"\154\104\147\000",
			"\057\000",
			"\123\000",
			"\051\000",
			"\125\000",
			"\057\000",
			"\116\000",
			"\057\000",
			"\111\000",
			"\141\000",
			"\000",
		};
		int _rubric_s = 22;
      sprintf(str,"'%s' Random String Failed\n","\x53\x50\x65\x2f\x5b\x31\x56\x6f\x3d\x32\x5c\x6c\x44\x67\x2f\x53\x29\x55\x2f\x4e\x2f\x49\x61");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x50\x65\x2f\x5b\x31\x56\x6f\x3d\x32\x5c\x6c\x44\x67\x2f\x53\x29\x55\x2f\x4e\x2f\x49\x61",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_120( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			equalsSign,
			lexicalError,
			lexicalError,
			intConst,
			rightParen,
			variableName,
			lexicalError,
			equalsSign,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			comma,
			intConst,
			equalsSign,
			variableName,
			plusSign,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			rightParen,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			star,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"equalsSign",
			"lexicalError",
			"lexicalError",
			"intConst",
			"rightParen",
			"variableName",
			"lexicalError",
			"equalsSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"comma",
			"intConst",
			"equalsSign",
			"variableName",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"star",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\104\000",
			"\075\000",
			"\122\000",
			"\105\000",
			"\061\000",
			"\051\000",
			"\156\106\156\063\103\147\065\147\145\104\000",
			"\047\000",
			"\075\000",
			"\121\000",
			"\136\000",
			"\114\000",
			"\151\110\000",
			"\054\000",
			"\062\000",
			"\075\000",
			"\141\156\000",
			"\053\000",
			"\077\000",
			"\123\000",
			"\157\106\060\144\126\065\130\114\000",
			"\042\000",
			"\051\000",
			"\132\000",
			"\117\000",
			"\127\000",
			"\136\000",
			"\105\000",
			"\176\000",
			"\163\124\000",
			"\051\000",
			"\127\000",
			"\052\000",
			"\122\000",
			"\111\000",
			"\165\000",
			"\000",
		};
		int _rubric_s = 37;
      sprintf(str,"'%s' Random String Failed\n","\x44\x3d\x52\x45\x31\x29\x6e\x46\x6e\x33\x43\x67\x35\x67\x65\x44\x27\x3d\x51\x5e\x4c\x69\x48\x2c\x32\x3d\x20\x61\x6e\x2b\x3f\x53\x6f\x46\x30\x64\x56\x35\x58\x4c\x22\x29\x5a\x4f\x57\x5e\x45\x7e\x73\x54\x29\x57\x2a\x52\x49\x75");
      TSM_ASSERT(str,checkAgainstRubric("\x44\x3d\x52\x45\x31\x29\x6e\x46\x6e\x33\x43\x67\x35\x67\x65\x44\x27\x3d\x51\x5e\x4c\x69\x48\x2c\x32\x3d\x20\x61\x6e\x2b\x3f\x53\x6f\x46\x30\x64\x56\x35\x58\x4c\x22\x29\x5a\x4f\x57\x5e\x45\x7e\x73\x54\x29\x57\x2a\x52\x49\x75",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_121( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\117\000",
			"\042\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","\x4f\x22\x2e");
      TSM_ASSERT(str,checkAgainstRubric("\x4f\x22\x2e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_122( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			leftAngle,
			rightParen,
			variableName,
			rightParen,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"leftAngle",
			"rightParen",
			"variableName",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\115\000",
			"\164\000",
			"\044\000",
			"\136\000",
			"\117\000",
			"\100\000",
			"\146\000",
			"\174\000",
			"\137\000",
			"\164\000",
			"\042\000",
			"\100\000",
			"\074\000",
			"\051\000",
			"\141\000",
			"\051\000",
			"\125\000",
			"\116\000",
			"\111\000",
			"\157\146\106\142\102\120\123\115\170\000",
			"\050\000",
			"\124\000",
			"\114\000",
			"\110\000",
			"\000",
		};
		int _rubric_s = 25;
      sprintf(str,"'%s' Random String Failed\n","\x4d\x74\x0a\x24\x5e\x4f\x40\x66\x7c\x5f\x74\x22\x40\x3c\x29\x61\x29\x55\x4e\x49\x6f\x66\x46\x62\x42\x50\x53\x4d\x78\x28\x54\x4c\x48");
      TSM_ASSERT(str,checkAgainstRubric("\x4d\x74\x0a\x24\x5e\x4f\x40\x66\x7c\x5f\x74\x22\x40\x3c\x29\x61\x29\x55\x4e\x49\x6f\x66\x46\x62\x42\x50\x53\x4d\x78\x28\x54\x4c\x48",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_123( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			dash,
			lexicalError,
			variableName,
			leftAngle,
			leftAngle,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			leftAngle,
			lexicalError,
			leftAngle,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			variableName,
			colon,
			lexicalError,
			variableName,
			comma,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"dash",
			"lexicalError",
			"variableName",
			"leftAngle",
			"leftAngle",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftAngle",
			"lexicalError",
			"leftAngle",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"variableName",
			"colon",
			"lexicalError",
			"variableName",
			"comma",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\176\000",
			"\112\000",
			"\174\000",
			"\152\107\122\104\142\164\132\000",
			"\077\000",
			"\140\000",
			"\055\000",
			"\127\000",
			"\171\102\103\126\154\154\155\000",
			"\074\000",
			"\074\000",
			"\042\000",
			"\105\000",
			"\171\000",
			"\073\000",
			"\163\000",
			"\047\000",
			"\121\000",
			"\110\000",
			"\047\000",
			"\115\000",
			"\074\000",
			"\120\000",
			"\074\000",
			"\047\000",
			"\163\000",
			"\051\000",
			"\130\000",
			"\147\000",
			"\136\000",
			"\063\000",
			"\143\000",
			"\072\000",
			"\112\000",
			"\143\171\000",
			"\054\000",
			"\043\000",
			"\140\000",
			"\116\000",
			"\000",
		};
		int _rubric_s = 40;
      sprintf(str,"'%s' Random String Failed\n","\x7e\x4a\x7c\x6a\x47\x52\x44\x62\x74\x5a\x3f\x60\x2d\x57\x79\x42\x43\x56\x6c\x6c\x6d\x3c\x3c\x22\x45\x79\x3b\x73\x27\x51\x48\x27\x4d\x3c\x50\x3c\x27\x73\x29\x58\x67\x5e\x33\x63\x3a\x4a\x63\x79\x2c\x23\x60\x4e");
      TSM_ASSERT(str,checkAgainstRubric("\x7e\x4a\x7c\x6a\x47\x52\x44\x62\x74\x5a\x3f\x60\x2d\x57\x79\x42\x43\x56\x6c\x6c\x6d\x3c\x3c\x22\x45\x79\x3b\x73\x27\x51\x48\x27\x4d\x3c\x50\x3c\x27\x73\x29\x58\x67\x5e\x33\x63\x3a\x4a\x63\x79\x2c\x23\x60\x4e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_124( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftParen,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			colon,
			lexicalError,
			variableName,
			dash,
			percent,
			lexicalError,
			lexicalError,
			variableName,
			forwardSlash,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"colon",
			"lexicalError",
			"variableName",
			"dash",
			"percent",
			"lexicalError",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\050\000",
			"\114\000",
			"\145\066\150\115\161\000",
			"\041\000",
			"\164\107\166\000",
			"\072\000",
			"\107\000",
			"\167\000",
			"\055\000",
			"\045\000",
			"\111\000",
			"\100\000",
			"\163\111\115\000",
			"\057\000",
			"\146\172\143\000",
			"\000",
		};
		int _rubric_s = 16;
      sprintf(str,"'%s' Random String Failed\n","\x28\x4c\x65\x36\x68\x4d\x71\x21\x74\x47\x76\x3a\x47\x77\x2d\x25\x49\x40\x73\x49\x4d\x2f\x66\x7a\x63");
      TSM_ASSERT(str,checkAgainstRubric("\x28\x4c\x65\x36\x68\x4d\x71\x21\x74\x47\x76\x3a\x47\x77\x2d\x25\x49\x40\x73\x49\x4d\x2f\x66\x7a\x63",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_125( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			comma,
			leftParen,
			variableName,
			rightParen,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"comma",
			"leftParen",
			"variableName",
			"rightParen",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\115\000",
			"\054\000",
			"\050\000",
			"\161\000",
			"\051\000",
			"\141\171\110\000",
			"\000",
		};
		int _rubric_s = 7;
      sprintf(str,"'%s' Random String Failed\n","\x4d\x2c\x28\x71\x29\x61\x79\x48");
      TSM_ASSERT(str,checkAgainstRubric("\x4d\x2c\x28\x71\x29\x61\x79\x48",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_126( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\115\000",
			"\042\000",
			"\132\000",
			"\167\000",
			"\044\000",
			"\160\000",
			"\176\000",
			"\141\157\000",
			"\100\000",
			"\000",
		};
		int _rubric_s = 10;
      sprintf(str,"'%s' Random String Failed\n","\x0a\x4d\x22\x5a\x77\x24\x70\x7e\x61\x6f\x40");
      TSM_ASSERT(str,checkAgainstRubric("\x0a\x4d\x22\x5a\x77\x24\x70\x7e\x61\x6f\x40",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_127( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			rightParen,
			variableName,
			leftParen,
			variableName,
			colon,
			star,
			variableName,
			star,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			dash,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"rightParen",
			"variableName",
			"leftParen",
			"variableName",
			"colon",
			"star",
			"variableName",
			"star",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"dash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\000",
			"\051\000",
			"\164\065\171\000",
			"\050\000",
			"\152\141\105\146\164\167\000",
			"\072\000",
			"\052\000",
			"\156\000",
			"\052\000",
			"\143\071\000",
			"\046\000",
			"\113\000",
			"\157\000",
			"\042\000",
			"\115\000",
			"\044\000",
			"\077\000",
			"\113\000",
			"\055\000",
			"\000",
		};
		int _rubric_s = 20;
      sprintf(str,"'%s' Random String Failed\n","\x77\x29\x74\x35\x79\x28\x6a\x61\x45\x66\x74\x77\x3a\x2a\x6e\x2a\x63\x39\x26\x4b\x6f\x22\x4d\x24\x3f\x4b\x2d");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x29\x74\x35\x79\x28\x6a\x61\x45\x66\x74\x77\x3a\x2a\x6e\x2a\x63\x39\x26\x4b\x6f\x22\x4d\x24\x3f\x4b\x2d",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_128( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			dash,
			lexicalError,
			variableName,
			lexicalError,
			rightParen,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			variableName,
			variableName,
			dash,
			variableName,
			colon,
			percent,
			backSlash,
			intConst,
			lexicalError,
			variableName,
			colon,
			equalsSign,
			variableName,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"dash",
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"variableName",
			"variableName",
			"dash",
			"variableName",
			"colon",
			"percent",
			"backSlash",
			"intConst",
			"lexicalError",
			"variableName",
			"colon",
			"equalsSign",
			"variableName",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\114\105\170\000",
			"\055\000",
			"\114\000",
			"\156\000",
			"\056\000",
			"\051\000",
			"\121\000",
			"\161\000",
			"\050\000",
			"\122\000",
			"\170\067\105\114\000",
			"\152\060\060\000",
			"\055\000",
			"\145\000",
			"\072\000",
			"\045\000",
			"\134\000",
			"\060\000",
			"\103\000",
			"\164\000",
			"\072\000",
			"\075\000",
			"\146\130\121\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 25;
      sprintf(str,"'%s' Random String Failed\n","\x72\x4c\x45\x78\x2d\x4c\x6e\x2e\x29\x51\x71\x28\x52\x78\x37\x45\x4c\x09\x6a\x30\x30\x2d\x65\x3a\x20\x25\x5c\x30\x43\x74\x3a\x3d\x66\x58\x51\x28");
      TSM_ASSERT(str,checkAgainstRubric("\x72\x4c\x45\x78\x2d\x4c\x6e\x2e\x29\x51\x71\x28\x52\x78\x37\x45\x4c\x09\x6a\x30\x30\x2d\x65\x3a\x20\x25\x5c\x30\x43\x74\x3a\x3d\x66\x58\x51\x28",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_129( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			plusSign,
			intConst,
			variableName,
			comma,
			rightSquare,
			lexicalError,
			plusSign,
			intConst,
			variableName,
			rightParen,
			variableName,
			backSlash,
			rightParen,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			percent,
			lexicalError,
			rightSquare,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			leftParen,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"plusSign",
			"intConst",
			"variableName",
			"comma",
			"rightSquare",
			"lexicalError",
			"plusSign",
			"intConst",
			"variableName",
			"rightParen",
			"variableName",
			"backSlash",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"percent",
			"lexicalError",
			"rightSquare",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\145\161\131\120\132\000",
			"\044\000",
			"\123\000",
			"\136\000",
			"\172\063\000",
			"\047\000",
			"\164\160\123\000",
			"\041\000",
			"\112\000",
			"\160\160\000",
			"\053\000",
			"\061\000",
			"\141\142\000",
			"\054\000",
			"\135\000",
			"\106\000",
			"\053\000",
			"\066\000",
			"\146\070\120\000",
			"\051\000",
			"\141\107\137\071\163\000",
			"\134\000",
			"\051\000",
			"\101\000",
			"\174\000",
			"\114\000",
			"\164\111\000",
			"\045\000",
			"\042\000",
			"\135\000",
			"\141\000",
			"\047\000",
			"\137\000",
			"\044\000",
			"\116\000",
			"\153\120\000",
			"\136\000",
			"\106\000",
			"\050\000",
			"\122\000",
			"\171\000",
			"\000",
		};
		int _rubric_s = 43;
      sprintf(str,"'%s' Random String Failed\n","\x3a\x65\x71\x59\x50\x5a\x24\x53\x5e\x7a\x33\x27\x74\x70\x53\x21\x4a\x70\x70\x2b\x31\x61\x62\x2c\x5d\x46\x2b\x36\x66\x38\x50\x29\x61\x47\x5f\x39\x73\x5c\x29\x41\x7c\x4c\x74\x49\x25\x22\x5d\x61\x27\x5f\x24\x4e\x6b\x50\x5e\x46\x28\x52\x79");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x65\x71\x59\x50\x5a\x24\x53\x5e\x7a\x33\x27\x74\x70\x53\x21\x4a\x70\x70\x2b\x31\x61\x62\x2c\x5d\x46\x2b\x36\x66\x38\x50\x29\x61\x47\x5f\x39\x73\x5c\x29\x41\x7c\x4c\x74\x49\x25\x22\x5d\x61\x27\x5f\x24\x4e\x6b\x50\x5e\x46\x28\x52\x79",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_130( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			leftParen,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			plusSign,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"leftParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"plusSign",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\000",
			"\151\113\000",
			"\050\000",
			"\167\000",
			"\077\000",
			"\077\000",
			"\105\000",
			"\077\000",
			"\166\144\071\111\171\113\000",
			"\053\000",
			"\152\061\161\150\101\000",
			"\077\000",
			"\061\000",
			"\110\000",
			"\077\000",
			"\107\000",
			"\141\122\115\112\067\000",
			"\046\000",
			"\132\000",
			"\130\000",
			"\116\000",
			"\150\000",
			"\051\000",
			"\143\000",
			"\100\000",
			"\116\000",
			"\123\000",
			"\110\000",
			"\000",
		};
		int _rubric_s = 29;
      sprintf(str,"'%s' Random String Failed\n","\x31\x69\x4b\x28\x77\x3f\x3f\x45\x3f\x76\x64\x39\x49\x79\x4b\x2b\x6a\x31\x71\x68\x41\x3f\x31\x48\x3f\x47\x61\x52\x4d\x4a\x37\x26\x5a\x58\x4e\x68\x29\x63\x40\x4e\x53\x48");
      TSM_ASSERT(str,checkAgainstRubric("\x31\x69\x4b\x28\x77\x3f\x3f\x45\x3f\x76\x64\x39\x49\x79\x4b\x2b\x6a\x31\x71\x68\x41\x3f\x31\x48\x3f\x47\x61\x52\x4d\x4a\x37\x26\x5a\x58\x4e\x68\x29\x63\x40\x4e\x53\x48",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_131( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			rightAngle,
			lexicalError,
			intConst,
			equalsSign,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			rightParen,
			lexicalError,
			lexicalError,
			lexicalError,
			leftParen,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			rightSquare,
			variableName,
			leftParen,
			intConst,
			equalsSign,
			lexicalError,
			lexicalError,
			lexicalError,
			leftAngle,
			rightSquare,
			lexicalError,
			variableName,
			intConst,
			lexicalError,
			variableName,
			star,
			lexicalError,
			star,
			lexicalError,
			lexicalError,
			plusSign,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"rightAngle",
			"lexicalError",
			"intConst",
			"equalsSign",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"rightSquare",
			"variableName",
			"leftParen",
			"intConst",
			"equalsSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftAngle",
			"rightSquare",
			"lexicalError",
			"variableName",
			"intConst",
			"lexicalError",
			"variableName",
			"star",
			"lexicalError",
			"star",
			"lexicalError",
			"lexicalError",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\071\000",
			"\114\000",
			"\043\000",
			"\120\000",
			"\076\000",
			"\104\000",
			"\062\000",
			"\075\000",
			"\056\000",
			"\154\117\000",
			"\041\000",
			"\123\000",
			"\047\000",
			"\051\000",
			"\105\000",
			"\102\000",
			"\113\000",
			"\050\000",
			"\156\000",
			"\041\000",
			"\041\000",
			"\110\000",
			"\135\000",
			"\167\147\114\000",
			"\050\000",
			"\070\000",
			"\075\000",
			"\113\000",
			"\126\000",
			"\174\000",
			"\074\000",
			"\135\000",
			"\131\000",
			"\164\165\000",
			"\066\000",
			"\174\000",
			"\144\000",
			"\052\000",
			"\115\000",
			"\052\000",
			"\044\000",
			"\176\000",
			"\053\000",
			"\110\000",
			"\056\000",
			"\103\000",
			"\142\061\111\000",
			"\051\000",
			"\121\000",
			"\123\000",
			"\136\000",
			"\105\000",
			"\147\164\000",
			"\000",
		};
		int _rubric_s = 54;
      sprintf(str,"'%s' Random String Failed\n","\x38\x39\x4c\x23\x50\x3e\x44\x32\x3d\x2e\x6c\x4f\x21\x53\x27\x29\x45\x42\x4b\x28\x6e\x21\x21\x48\x5d\x77\x67\x4c\x28\x38\x3d\x4b\x56\x7c\x3c\x5d\x59\x74\x75\x20\x36\x7c\x64\x2a\x4d\x2a\x24\x7e\x2b\x48\x2e\x43\x62\x31\x49\x29\x51\x53\x5e\x45\x67\x74");
      TSM_ASSERT(str,checkAgainstRubric("\x38\x39\x4c\x23\x50\x3e\x44\x32\x3d\x2e\x6c\x4f\x21\x53\x27\x29\x45\x42\x4b\x28\x6e\x21\x21\x48\x5d\x77\x67\x4c\x28\x38\x3d\x4b\x56\x7c\x3c\x5d\x59\x74\x75\x20\x36\x7c\x64\x2a\x4d\x2a\x24\x7e\x2b\x48\x2e\x43\x62\x31\x49\x29\x51\x53\x5e\x45\x67\x74",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_132( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftParen,
			variableName,
			lexicalError,
			rightAngle,
			leftParen,
			leftParen,
			lexicalError,
			leftParen,
			variableName,
			dash,
			lexicalError,
			semiColon,
			lexicalError,
			rightParen,
			plusSign,
			variableName,
			leftParen,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			equalsSign,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			backSlash,
			intConst,
			lexicalError,
			variableName,
			intConst,
			star,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftParen",
			"variableName",
			"lexicalError",
			"rightAngle",
			"leftParen",
			"leftParen",
			"lexicalError",
			"leftParen",
			"variableName",
			"dash",
			"lexicalError",
			"semiColon",
			"lexicalError",
			"rightParen",
			"plusSign",
			"variableName",
			"leftParen",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"equalsSign",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"backSlash",
			"intConst",
			"lexicalError",
			"variableName",
			"intConst",
			"star",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\153\000",
			"\050\000",
			"\155\065\126\000",
			"\174\000",
			"\076\000",
			"\050\000",
			"\050\000",
			"\126\000",
			"\050\000",
			"\145\125\106\000",
			"\055\000",
			"\101\000",
			"\073\000",
			"\101\000",
			"\051\000",
			"\053\000",
			"\152\106\117\000",
			"\050\000",
			"\064\000",
			"\167\071\105\000",
			"\044\000",
			"\041\000",
			"\163\116\113\146\164\105\000",
			"\075\000",
			"\112\000",
			"\060\000",
			"\121\000",
			"\056\000",
			"\153\000",
			"\134\000",
			"\067\000",
			"\116\000",
			"\161\000",
			"\060\000",
			"\052\000",
			"\127\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 38;
      sprintf(str,"'%s' Random String Failed\n","\x6b\x28\x6d\x35\x56\x7c\x3e\x28\x28\x56\x28\x65\x55\x46\x2d\x41\x3b\x41\x29\x2b\x09\x6a\x46\x4f\x28\x34\x77\x39\x45\x20\x24\x21\x73\x4e\x4b\x66\x74\x45\x3d\x4a\x30\x51\x2e\x6b\x5c\x37\x4e\x71\x0a\x30\x2a\x57\x0a\x2e");
      TSM_ASSERT(str,checkAgainstRubric("\x6b\x28\x6d\x35\x56\x7c\x3e\x28\x28\x56\x28\x65\x55\x46\x2d\x41\x3b\x41\x29\x2b\x09\x6a\x46\x4f\x28\x34\x77\x39\x45\x20\x24\x21\x73\x4e\x4b\x66\x74\x45\x3d\x4a\x30\x51\x2e\x6b\x5c\x37\x4e\x71\x0a\x30\x2a\x57\x0a\x2e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_133( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			leftSquare,
			variableName,
			backSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			percent,
			lexicalError,
			variableName,
			stringConst,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftSquare",
			"variableName",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"percent",
			"lexicalError",
			"variableName",
			"stringConst",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\104\000",
			"\071\000",
			"\107\000",
			"\043\000",
			"\041\000",
			"\047\000",
			"\077\000",
			"\133\000",
			"\165\000",
			"\134\000",
			"\127\000",
			"\046\000",
			"\107\000",
			"\166\167\123\147\000",
			"\051\000",
			"\056\000",
			"\136\000",
			"\120\000",
			"\121\000",
			"\123\000",
			"\045\000",
			"\043\000",
			"\166\000",
			"\042\162\125\042\000",
			"\107\000",
			"\070\000",
			"\117\000",
			"\172\113\000",
			"\051\000",
			"\122\000",
			"\042\000",
			"\000",
		};
		int _rubric_s = 32;
      sprintf(str,"'%s' Random String Failed\n","\x44\x39\x47\x23\x21\x27\x3f\x5b\x75\x5c\x57\x26\x47\x76\x77\x53\x67\x29\x2e\x5e\x50\x51\x53\x25\x23\x76\x22\x72\x55\x22\x47\x38\x4f\x7a\x4b\x29\x52\x22");
      TSM_ASSERT(str,checkAgainstRubric("\x44\x39\x47\x23\x21\x27\x3f\x5b\x75\x5c\x57\x26\x47\x76\x77\x53\x67\x29\x2e\x5e\x50\x51\x53\x25\x23\x76\x22\x72\x55\x22\x47\x38\x4f\x7a\x4b\x29\x52\x22",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_134( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			comma,
			intConst,
			leftParen,
			dash,
			intConst,
			lexicalError,
			lexicalError,
			intConst,
			semiColon,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			leftSquare,
			variableName,
			plusSign,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			variableName,
			rightParen,
			comma,
			variableName,
			leftSquare,
			variableName,
			leftParen,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"comma",
			"intConst",
			"leftParen",
			"dash",
			"intConst",
			"lexicalError",
			"lexicalError",
			"intConst",
			"semiColon",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"leftSquare",
			"variableName",
			"plusSign",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"variableName",
			"rightParen",
			"comma",
			"variableName",
			"leftSquare",
			"variableName",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\127\000",
			"\106\000",
			"\151\000",
			"\054\000",
			"\062\000",
			"\050\000",
			"\055\000",
			"\062\000",
			"\043\000",
			"\126\000",
			"\061\060\000",
			"\073\000",
			"\116\000",
			"\125\000",
			"\176\000",
			"\106\000",
			"\104\000",
			"\137\000",
			"\161\125\117\000",
			"\041\000",
			"\112\000",
			"\065\000",
			"\044\000",
			"\133\000",
			"\156\155\137\130\000",
			"\053\000",
			"\176\000",
			"\066\000",
			"\143\000",
			"\056\000",
			"\162\165\000",
			"\051\000",
			"\054\000",
			"\156\000",
			"\133\000",
			"\170\000",
			"\050\000",
			"\100\000",
			"\120\000",
			"\000",
		};
		int _rubric_s = 40;
      sprintf(str,"'%s' Random String Failed\n","\x57\x46\x69\x2c\x32\x28\x2d\x32\x23\x56\x31\x30\x3b\x4e\x55\x7e\x46\x44\x5f\x71\x55\x4f\x21\x4a\x35\x24\x5b\x6e\x6d\x5f\x58\x2b\x7e\x36\x63\x2e\x72\x75\x20\x29\x2c\x6e\x5b\x78\x28\x40\x50");
      TSM_ASSERT(str,checkAgainstRubric("\x57\x46\x69\x2c\x32\x28\x2d\x32\x23\x56\x31\x30\x3b\x4e\x55\x7e\x46\x44\x5f\x71\x55\x4f\x21\x4a\x35\x24\x5b\x6e\x6d\x5f\x58\x2b\x7e\x36\x63\x2e\x72\x75\x20\x29\x2c\x6e\x5b\x78\x28\x40\x50",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_135( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			greaterThanEquals,
			variableName,
			rightAngle,
			variableName,
			lexicalError,
			variableName,
			rightAngle,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			leftSquare,
			intConst,
			lexicalError,
			variableName,
			colon,
			intConst,
			variableName,
			leftSquare,
			percent,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			percent,
			plusSign,
			variableName,
			semiColon,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"greaterThanEquals",
			"variableName",
			"rightAngle",
			"variableName",
			"lexicalError",
			"variableName",
			"rightAngle",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"leftSquare",
			"intConst",
			"lexicalError",
			"variableName",
			"colon",
			"intConst",
			"variableName",
			"leftSquare",
			"percent",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"percent",
			"plusSign",
			"variableName",
			"semiColon",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\117\000",
			"\076\075\000",
			"\146\000",
			"\076\000",
			"\152\112\060\000",
			"\176\000",
			"\141\000",
			"\076\000",
			"\112\000",
			"\102\000",
			"\061\067\000",
			"\165\000",
			"\133\000",
			"\063\000",
			"\041\000",
			"\160\125\000",
			"\072\000",
			"\071\064\000",
			"\145\063\000",
			"\133\000",
			"\045\000",
			"\067\000",
			"\144\000",
			"\046\000",
			"\047\000",
			"\163\000",
			"\120\000",
			"\115\000",
			"\045\000",
			"\053\000",
			"\145\125\000",
			"\073\000",
			"\103\000",
			"\142\064\170\165\170\000",
			"\000",
		};
		int _rubric_s = 35;
      sprintf(str,"'%s' Random String Failed\n","\x68\x4f\x3e\x3d\x66\x3e\x6a\x4a\x30\x7e\x61\x3e\x4a\x42\x31\x37\x75\x5b\x33\x21\x70\x55\x3a\x39\x34\x65\x33\x5b\x25\x37\x64\x26\x27\x73\x0a\x50\x4d\x25\x2b\x65\x55\x3b\x43\x62\x34\x78\x75\x78");
      TSM_ASSERT(str,checkAgainstRubric("\x68\x4f\x3e\x3d\x66\x3e\x6a\x4a\x30\x7e\x61\x3e\x4a\x42\x31\x37\x75\x5b\x33\x21\x70\x55\x3a\x39\x34\x65\x33\x5b\x25\x37\x64\x26\x27\x73\x0a\x50\x4d\x25\x2b\x65\x55\x3b\x43\x62\x34\x78\x75\x78",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_136( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			star,
			intConst,
			percent,
			percent,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			leftSquare,
			variableName,
			semiColon,
			rightAngle,
			variableName,
			leftParen,
			lexicalError,
			lexicalError,
			lexicalError,
			dash,
			lexicalError,
			lexicalError,
			variableName,
			backSlash,
			leftSquare,
			lexicalError,
			intConst,
			equalsSign,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			leftSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"star",
			"intConst",
			"percent",
			"percent",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftSquare",
			"variableName",
			"semiColon",
			"rightAngle",
			"variableName",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"dash",
			"lexicalError",
			"lexicalError",
			"variableName",
			"backSlash",
			"leftSquare",
			"lexicalError",
			"intConst",
			"equalsSign",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\127\000",
			"\114\000",
			"\164\000",
			"\052\000",
			"\062\000",
			"\045\000",
			"\045\000",
			"\156\150\063\143\120\064\000",
			"\136\000",
			"\042\000",
			"\121\000",
			"\133\000",
			"\171\102\000",
			"\073\000",
			"\076\000",
			"\150\067\000",
			"\050\000",
			"\123\000",
			"\113\000",
			"\136\000",
			"\055\000",
			"\123\000",
			"\105\000",
			"\161\000",
			"\134\000",
			"\133\000",
			"\102\000",
			"\071\000",
			"\075\000",
			"\043\000",
			"\041\000",
			"\171\172\157\127\146\000",
			"\042\000",
			"\170\000",
			"\136\000",
			"\105\000",
			"\147\000",
			"\133\000",
			"\000",
		};
		int _rubric_s = 39;
      sprintf(str,"'%s' Random String Failed\n","\x57\x4c\x74\x2a\x32\x25\x25\x6e\x68\x33\x63\x50\x34\x5e\x22\x51\x5b\x79\x42\x3b\x3e\x68\x37\x28\x53\x4b\x5e\x2d\x53\x45\x71\x5c\x5b\x42\x39\x3d\x23\x21\x79\x7a\x6f\x57\x66\x22\x78\x5e\x45\x67\x5b");
      TSM_ASSERT(str,checkAgainstRubric("\x57\x4c\x74\x2a\x32\x25\x25\x6e\x68\x33\x63\x50\x34\x5e\x22\x51\x5b\x79\x42\x3b\x3e\x68\x37\x28\x53\x4b\x5e\x2d\x53\x45\x71\x5c\x5b\x42\x39\x3d\x23\x21\x79\x7a\x6f\x57\x66\x22\x78\x5e\x45\x67\x5b",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_137( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftSquare,
			variableName,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftSquare",
			"variableName",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\152\131\000",
			"\133\000",
			"\162\107\060\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","\x6a\x59\x5b\x72\x47\x30\x3b");
      TSM_ASSERT(str,checkAgainstRubric("\x6a\x59\x5b\x72\x47\x30\x3b",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_138( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			rightSquare,
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			variableName,
			rightParen,
			lexicalError,
			variableName,
			leftParen,
			variableName,
			comma,
			lexicalError,
			lexicalError,
			variableName,
			rightSquare,
			variableName,
			rightSquare,
			variableName,
			backSlash,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			forwardSlash,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"rightSquare",
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"variableName",
			"rightParen",
			"lexicalError",
			"variableName",
			"leftParen",
			"variableName",
			"comma",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightSquare",
			"variableName",
			"rightSquare",
			"variableName",
			"backSlash",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\157\143\104\000",
			"\135\000",
			"\056\000",
			"\060\000",
			"\122\000",
			"\064\000",
			"\170\132\132\157\146\000",
			"\051\000",
			"\126\000",
			"\147\116\000",
			"\050\000",
			"\152\165\150\063\104\000",
			"\054\000",
			"\113\000",
			"\047\000",
			"\151\000",
			"\135\000",
			"\143\156\161\164\152\071\107\000",
			"\135\000",
			"\166\064\167\167\142\000",
			"\134\000",
			"\136\000",
			"\165\101\000",
			"\041\000",
			"\056\000",
			"\100\000",
			"\132\000",
			"\057\000",
			"\137\000",
			"\162\062\000",
			"\000",
		};
		int _rubric_s = 31;
      sprintf(str,"'%s' Random String Failed\n","\x6f\x63\x44\x5d\x2e\x30\x52\x34\x78\x5a\x5a\x6f\x66\x29\x56\x67\x4e\x28\x09\x6a\x75\x68\x33\x44\x2c\x4b\x27\x69\x5d\x63\x6e\x71\x74\x6a\x39\x47\x5d\x76\x34\x77\x77\x62\x5c\x5e\x75\x41\x21\x2e\x40\x5a\x2f\x5f\x72\x32");
      TSM_ASSERT(str,checkAgainstRubric("\x6f\x63\x44\x5d\x2e\x30\x52\x34\x78\x5a\x5a\x6f\x66\x29\x56\x67\x4e\x28\x09\x6a\x75\x68\x33\x44\x2c\x4b\x27\x69\x5d\x63\x6e\x71\x74\x6a\x39\x47\x5d\x76\x34\x77\x77\x62\x5c\x5e\x75\x41\x21\x2e\x40\x5a\x2f\x5f\x72\x32",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_139( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			leftParen,
			lexicalError,
			rightSquare,
			lexicalError,
			lexicalError,
			variableName,
			plusSign,
			lexicalError,
			lexicalError,
			leftAngle,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			forwardSlash,
			lexicalError,
			plusSign,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			colon,
			lexicalError,
			backSlash,
			variableName,
			backSlash,
			variableName,
			comma,
			variableName,
			equalsSign,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			rightSquare,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"leftParen",
			"lexicalError",
			"rightSquare",
			"lexicalError",
			"lexicalError",
			"variableName",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"leftAngle",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"plusSign",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"colon",
			"lexicalError",
			"backSlash",
			"variableName",
			"backSlash",
			"variableName",
			"comma",
			"variableName",
			"equalsSign",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"rightSquare",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\047\000",
			"\050\000",
			"\127\000",
			"\135\000",
			"\120\000",
			"\110\000",
			"\150\162\000",
			"\053\000",
			"\115\000",
			"\124\000",
			"\074\000",
			"\111\000",
			"\147\110\166\000",
			"\044\000",
			"\143\117\124\000",
			"\046\000",
			"\057\000",
			"\110\000",
			"\053\000",
			"\065\000",
			"\077\000",
			"\122\000",
			"\166\104\105\000",
			"\072\000",
			"\176\000",
			"\134\000",
			"\150\145\071\067\000",
			"\134\000",
			"\164\145\000",
			"\054\000",
			"\154\071\104\150\000",
			"\075\000",
			"\066\000",
			"\056\000",
			"\107\000",
			"\124\000",
			"\127\000",
			"\042\000",
			"\106\000",
			"\113\000",
			"\135\000",
			"\000",
		};
		int _rubric_s = 42;
      sprintf(str,"'%s' Random String Failed\n","\x27\x28\x57\x5d\x50\x48\x20\x68\x72\x2b\x4d\x54\x3c\x49\x67\x48\x76\x24\x63\x4f\x54\x26\x2f\x48\x2b\x35\x3f\x52\x76\x44\x45\x3a\x7e\x5c\x68\x65\x39\x37\x5c\x74\x65\x2c\x6c\x39\x44\x68\x3d\x36\x2e\x47\x54\x57\x22\x46\x4b\x5d");
      TSM_ASSERT(str,checkAgainstRubric("\x27\x28\x57\x5d\x50\x48\x20\x68\x72\x2b\x4d\x54\x3c\x49\x67\x48\x76\x24\x63\x4f\x54\x26\x2f\x48\x2b\x35\x3f\x52\x76\x44\x45\x3a\x7e\x5c\x68\x65\x39\x37\x5c\x74\x65\x2c\x6c\x39\x44\x68\x3d\x36\x2e\x47\x54\x57\x22\x46\x4b\x5d",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_140( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			plusSign,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			leftSquare,
			intConst,
			lexicalError,
			variableName,
			comma,
			lexicalError,
			colon,
			variableName,
			dash,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			dash,
			intConst,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"leftSquare",
			"intConst",
			"lexicalError",
			"variableName",
			"comma",
			"lexicalError",
			"colon",
			"variableName",
			"dash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"dash",
			"intConst",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\103\000",
			"\142\000",
			"\053\000",
			"\042\000",
			"\107\000",
			"\106\000",
			"\071\000",
			"\133\000",
			"\071\000",
			"\117\000",
			"\161\160\000",
			"\054\000",
			"\100\000",
			"\072\000",
			"\142\061\065\141\115\167\000",
			"\055\000",
			"\105\000",
			"\115\000",
			"\137\000",
			"\046\000",
			"\176\000",
			"\055\000",
			"\067\000",
			"\132\000",
			"\044\000",
			"\000",
		};
		int _rubric_s = 26;
      sprintf(str,"'%s' Random String Failed\n","\x43\x62\x2b\x22\x47\x46\x39\x5b\x39\x4f\x71\x70\x2c\x40\x3a\x62\x31\x35\x61\x4d\x77\x2d\x45\x4d\x5f\x26\x7e\x2d\x37\x5a\x24");
      TSM_ASSERT(str,checkAgainstRubric("\x43\x62\x2b\x22\x47\x46\x39\x5b\x39\x4f\x71\x70\x2c\x40\x3a\x62\x31\x35\x61\x4d\x77\x2d\x45\x4d\x5f\x26\x7e\x2d\x37\x5a\x24",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_141( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			rightParen,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\152\000",
			"\105\000",
			"\051\000",
			"\126\000",
			"\105\000",
			"\046\000",
			"\110\000",
			"\132\000",
			"\145\000",
			"\046\000",
			"\000",
		};
		int _rubric_s = 11;
      sprintf(str,"'%s' Random String Failed\n","\x6a\x20\x45\x29\x56\x45\x26\x48\x5a\x65\x26");
      TSM_ASSERT(str,checkAgainstRubric("\x6a\x20\x45\x29\x56\x45\x26\x48\x5a\x65\x26",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_142( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			leftSquare,
			dash,
			variableName,
			lexicalError,
			backSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			equalsSign,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			plusSign,
			rightParen,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"leftSquare",
			"dash",
			"variableName",
			"lexicalError",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"equalsSign",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"plusSign",
			"rightParen",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\056\000",
			"\131\000",
			"\142\162\000",
			"\051\000",
			"\130\000",
			"\133\000",
			"\055\000",
			"\164\142\000",
			"\176\000",
			"\134\000",
			"\122\000",
			"\107\000",
			"\077\000",
			"\132\000",
			"\061\000",
			"\075\000",
			"\106\000",
			"\041\000",
			"\166\000",
			"\176\000",
			"\111\000",
			"\170\154\113\112\146\000",
			"\174\000",
			"\064\000",
			"\053\000",
			"\051\000",
			"\141\000",
			"\000",
		};
		int _rubric_s = 29;
      sprintf(str,"'%s' Random String Failed\n","\x5c\x2e\x59\x62\x72\x29\x58\x5b\x2d\x74\x62\x7e\x5c\x52\x47\x3f\x5a\x31\x3d\x0a\x46\x21\x76\x7e\x49\x78\x6c\x4b\x4a\x66\x7c\x34\x2b\x29\x61");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x2e\x59\x62\x72\x29\x58\x5b\x2d\x74\x62\x7e\x5c\x52\x47\x3f\x5a\x31\x3d\x0a\x46\x21\x76\x7e\x49\x78\x6c\x4b\x4a\x66\x7c\x34\x2b\x29\x61",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_143( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftSquare,
			lexicalError,
			leftParen,
			variableName,
			plusSign,
			lexicalError,
			leftSquare,
			lexicalError,
			intConst,
			dash,
			variableName,
			equalsSign,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftSquare",
			"lexicalError",
			"leftParen",
			"variableName",
			"plusSign",
			"lexicalError",
			"leftSquare",
			"lexicalError",
			"intConst",
			"dash",
			"variableName",
			"equalsSign",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\166\165\170\165\000",
			"\133\000",
			"\103\000",
			"\050\000",
			"\151\123\000",
			"\053\000",
			"\120\000",
			"\133\000",
			"\105\000",
			"\061\000",
			"\055\000",
			"\155\000",
			"\075\000",
			"\113\000",
			"\150\000",
			"\000",
		};
		int _rubric_s = 16;
      sprintf(str,"'%s' Random String Failed\n","\x76\x75\x78\x75\x5b\x43\x28\x69\x53\x2b\x50\x5b\x20\x45\x31\x2d\x6d\x3d\x4b\x68");
      TSM_ASSERT(str,checkAgainstRubric("\x76\x75\x78\x75\x5b\x43\x28\x69\x53\x2b\x50\x5b\x20\x45\x31\x2d\x6d\x3d\x4b\x68",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_144( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			variableName,
			rightParen,
			lexicalError,
			leftAngle,
			lexicalError,
			variableName,
			rightAngle,
			backSlash,
			lexicalError,
			comma,
			semiColon,
			rightParen,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			equalsSign,
			variableName,
			rightAngle,
			lexicalError,
			lexicalError,
			variableName,
			leftAngle,
			lexicalError,
			colon,
			variableName,
			leftParen,
			lexicalError,
			intConst,
			variableName,
			plusSign,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"variableName",
			"rightParen",
			"lexicalError",
			"leftAngle",
			"lexicalError",
			"variableName",
			"rightAngle",
			"backSlash",
			"lexicalError",
			"comma",
			"semiColon",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"equalsSign",
			"variableName",
			"rightAngle",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftAngle",
			"lexicalError",
			"colon",
			"variableName",
			"leftParen",
			"lexicalError",
			"intConst",
			"variableName",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\125\000",
			"\152\000",
			"\163\117\000",
			"\051\000",
			"\103\000",
			"\074\000",
			"\106\000",
			"\166\113\157\131\000",
			"\076\000",
			"\134\000",
			"\056\000",
			"\054\000",
			"\073\000",
			"\051\000",
			"\112\000",
			"\100\000",
			"\063\000",
			"\105\000",
			"\075\000",
			"\146\062\000",
			"\076\000",
			"\110\000",
			"\101\000",
			"\154\000",
			"\074\000",
			"\107\000",
			"\072\000",
			"\143\000",
			"\050\000",
			"\116\000",
			"\063\000",
			"\157\000",
			"\053\000",
			"\047\000",
			"\102\000",
			"\117\000",
			"\106\000",
			"\156\147\000",
			"\073\000",
			"\136\000",
			"\000",
		};
		int _rubric_s = 41;
      sprintf(str,"'%s' Random String Failed\n","\x55\x6a\x09\x0a\x73\x4f\x20\x29\x43\x3c\x46\x76\x4b\x6f\x59\x3e\x5c\x2e\x2c\x3b\x29\x4a\x40\x33\x45\x3d\x66\x32\x3e\x48\x41\x6c\x3c\x47\x3a\x63\x28\x4e\x33\x6f\x2b\x27\x42\x4f\x46\x6e\x67\x3b\x5e");
      TSM_ASSERT(str,checkAgainstRubric("\x55\x6a\x09\x0a\x73\x4f\x20\x29\x43\x3c\x46\x76\x4b\x6f\x59\x3e\x5c\x2e\x2c\x3b\x29\x4a\x40\x33\x45\x3d\x66\x32\x3e\x48\x41\x6c\x3c\x47\x3a\x63\x28\x4e\x33\x6f\x2b\x27\x42\x4f\x46\x6e\x67\x3b\x5e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_145( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			backSlash,
			variableName,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"backSlash",
			"variableName",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\115\000",
			"\137\000",
			"\131\000",
			"\046\000",
			"\126\000",
			"\046\000",
			"\043\000",
			"\160\067\000",
			"\044\000",
			"\134\000",
			"\155\117\105\102\154\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 13;
      sprintf(str,"'%s' Random String Failed\n","\x4d\x5f\x59\x26\x56\x26\x23\x70\x37\x24\x5c\x6d\x4f\x45\x42\x6c\x3a\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x4d\x5f\x59\x26\x56\x26\x23\x70\x37\x24\x5c\x6d\x4f\x45\x42\x6c\x3a\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_146( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			percent,
			variableName,
			percent,
			variableName,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			lexicalError,
			semiColon,
			variableName,
			leftSquare,
			leftParen,
			lexicalError,
			lexicalError,
			variableName,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"percent",
			"variableName",
			"percent",
			"variableName",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"semiColon",
			"variableName",
			"leftSquare",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\045\000",
			"\161\130\000",
			"\045\000",
			"\164\000",
			"\126\000",
			"\145\000",
			"\050\000",
			"\123\000",
			"\140\000",
			"\073\000",
			"\151\121\000",
			"\133\000",
			"\050\000",
			"\101\000",
			"\136\000",
			"\161\150\150\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 18;
      sprintf(str,"'%s' Random String Failed\n","\x25\x71\x58\x25\x74\x20\x56\x65\x28\x53\x60\x3b\x69\x51\x5b\x09\x28\x41\x5e\x71\x68\x68\x5c\x20\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x25\x71\x58\x25\x74\x20\x56\x65\x28\x53\x60\x3b\x69\x51\x5b\x09\x28\x41\x5e\x71\x68\x68\x5c\x20\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_147( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			rightParen,
			lexicalError,
			lexicalError,
			rightAngle,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftSquare,
			variableName,
			star,
			rightParen,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			leftParen,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"rightAngle",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftSquare",
			"variableName",
			"star",
			"rightParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\155\000",
			"\042\000",
			"\146\114\060\063\115\114\155\000",
			"\136\000",
			"\046\000",
			"\051\000",
			"\101\000",
			"\127\000",
			"\076\000",
			"\111\000",
			"\114\000",
			"\117\000",
			"\104\000",
			"\144\000",
			"\133\000",
			"\144\071\000",
			"\052\000",
			"\051\000",
			"\105\000",
			"\156\000",
			"\176\000",
			"\145\125\151\000",
			"\140\000",
			"\125\000",
			"\050\000",
			"\065\000",
			"\056\000",
			"\105\000",
			"\160\156\000",
			"\140\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 32;
      sprintf(str,"'%s' Random String Failed\n","\x69\x6d\x22\x66\x4c\x30\x33\x4d\x4c\x6d\x5e\x26\x29\x41\x57\x3e\x49\x4c\x4f\x44\x64\x5b\x64\x39\x2a\x29\x45\x6e\x7e\x65\x55\x69\x60\x55\x28\x35\x2e\x45\x70\x6e\x60\x28");
      TSM_ASSERT(str,checkAgainstRubric("\x69\x6d\x22\x66\x4c\x30\x33\x4d\x4c\x6d\x5e\x26\x29\x41\x57\x3e\x49\x4c\x4f\x44\x64\x5b\x64\x39\x2a\x29\x45\x6e\x7e\x65\x55\x69\x60\x55\x28\x35\x2e\x45\x70\x6e\x60\x28",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_148( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			rightSquare,
			rightAngle,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			backSlash,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			leftParen,
			lexicalError,
			lexicalError,
			rightParen,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			rightParen,
			leftAngle,
			lexicalError,
			variableName,
			leftAngle,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"rightSquare",
			"rightAngle",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"backSlash",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"rightParen",
			"leftAngle",
			"lexicalError",
			"variableName",
			"leftAngle",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\105\000",
			"\105\000",
			"\135\000",
			"\076\000",
			"\064\000",
			"\127\000",
			"\137\000",
			"\122\000",
			"\161\000",
			"\042\000",
			"\102\000",
			"\151\000",
			"\051\000",
			"\134\000",
			"\160\000",
			"\100\000",
			"\067\000",
			"\122\000",
			"\176\000",
			"\154\067\000",
			"\047\000",
			"\120\000",
			"\050\000",
			"\140\000",
			"\123\000",
			"\051\000",
			"\107\000",
			"\120\000",
			"\122\000",
			"\071\000",
			"\172\151\060\000",
			"\051\000",
			"\074\000",
			"\140\000",
			"\165\062\141\107\141\000",
			"\074\000",
			"\077\000",
			"\065\000",
			"\111\000",
			"\132\000",
			"\171\000",
			"\077\000",
			"\111\000",
			"\137\000",
			"\000",
		};
		int _rubric_s = 45;
      sprintf(str,"'%s' Random String Failed\n","\x45\x45\x5d\x3e\x34\x57\x5f\x52\x71\x22\x42\x69\x29\x5c\x70\x40\x37\x52\x7e\x6c\x37\x27\x50\x28\x60\x53\x29\x47\x50\x52\x39\x7a\x69\x30\x29\x3c\x60\x75\x32\x61\x47\x61\x3c\x3f\x35\x49\x5a\x79\x3f\x49\x5f");
      TSM_ASSERT(str,checkAgainstRubric("\x45\x45\x5d\x3e\x34\x57\x5f\x52\x71\x22\x42\x69\x29\x5c\x70\x40\x37\x52\x7e\x6c\x37\x27\x50\x28\x60\x53\x29\x47\x50\x52\x39\x7a\x69\x30\x29\x3c\x60\x75\x32\x61\x47\x61\x3c\x3f\x35\x49\x5a\x79\x3f\x49\x5f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_149( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			rightAngle,
			intConst,
			lexicalError,
			star,
			lexicalError,
			lexicalError,
			leftParen,
			lexicalError,
			leftAngle,
			lexicalError,
			colon,
			variableName,
			forwardSlash,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightAngle",
			"intConst",
			"lexicalError",
			"star",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"lexicalError",
			"leftAngle",
			"lexicalError",
			"colon",
			"variableName",
			"forwardSlash",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\140\000",
			"\056\000",
			"\123\000",
			"\103\000",
			"\151\164\167\123\165\131\000",
			"\076\000",
			"\064\062\000",
			"\100\000",
			"\052\000",
			"\107\000",
			"\125\000",
			"\050\000",
			"\101\000",
			"\074\000",
			"\124\000",
			"\072\000",
			"\164\144\066\071\000",
			"\057\000",
			"\142\124\000",
			"\044\000",
			"\126\000",
			"\120\000",
			"\000",
		};
		int _rubric_s = 23;
      sprintf(str,"'%s' Random String Failed\n","\x60\x2e\x53\x20\x43\x69\x74\x77\x53\x75\x59\x3e\x34\x32\x40\x2a\x47\x55\x28\x41\x3c\x54\x3a\x74\x64\x36\x39\x2f\x62\x54\x24\x56\x50");
      TSM_ASSERT(str,checkAgainstRubric("\x60\x2e\x53\x20\x43\x69\x74\x77\x53\x75\x59\x3e\x34\x32\x40\x2a\x47\x55\x28\x41\x3c\x54\x3a\x74\x64\x36\x39\x2f\x62\x54\x24\x56\x50",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_150( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\120\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","\x50");
      TSM_ASSERT(str,checkAgainstRubric("\x50",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_151( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\000",
			"\143\147\171\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","\x36\x63\x67\x79\x3b");
      TSM_ASSERT(str,checkAgainstRubric("\x36\x63\x67\x79\x3b",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_152( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			lexicalError,
			lexicalError,
			variableName,
			comma,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			dash,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			colon,
			intConst,
			semiColon,
			colon,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			forwardSlash,
			lexicalError,
			dash,
			leftParen,
			intConst,
			variableName,
			rightParen,
			variableName,
			lexicalError,
			forwardSlash,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"lexicalError",
			"lexicalError",
			"variableName",
			"comma",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"dash",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"colon",
			"intConst",
			"semiColon",
			"colon",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"dash",
			"leftParen",
			"intConst",
			"variableName",
			"rightParen",
			"variableName",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\107\000",
			"\123\000",
			"\151\061\000",
			"\054\000",
			"\064\000",
			"\113\000",
			"\112\000",
			"\166\151\164\171\172\000",
			"\055\000",
			"\152\000",
			"\131\000",
			"\103\000",
			"\126\000",
			"\072\000",
			"\062\000",
			"\073\000",
			"\072\000",
			"\107\000",
			"\120\000",
			"\102\000",
			"\152\000",
			"\100\000",
			"\104\000",
			"\057\000",
			"\131\000",
			"\055\000",
			"\050\000",
			"\066\000",
			"\154\000",
			"\051\000",
			"\142\066\000",
			"\044\000",
			"\057\000",
			"\106\000",
			"\000",
		};
		int _rubric_s = 36;
      sprintf(str,"'%s' Random String Failed\n","\x2d\x47\x53\x69\x31\x2c\x34\x4b\x4a\x76\x69\x74\x79\x7a\x2d\x6a\x0a\x59\x43\x56\x3a\x32\x3b\x3a\x47\x50\x42\x6a\x40\x44\x2f\x59\x2d\x28\x36\x6c\x29\x62\x36\x24\x2f\x46");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x47\x53\x69\x31\x2c\x34\x4b\x4a\x76\x69\x74\x79\x7a\x2d\x6a\x0a\x59\x43\x56\x3a\x32\x3b\x3a\x47\x50\x42\x6a\x40\x44\x2f\x59\x2d\x28\x36\x6c\x29\x62\x36\x24\x2f\x46",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_153( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			variableName,
			percent,
			backSlash,
			variableName,
			leftParen,
			lexicalError,
			variableName,
			equalsSign,
			variableName,
			lexicalError,
			lexicalError,
			star,
			equalsSign,
			variableName,
			comma,
			intConst,
			variableName,
			leftParen,
			rightParen,
			variableName,
			rightParen,
			lexicalError,
			lexicalError,
			variableName,
			rightAngle,
			lexicalError,
			variableName,
			intConst,
			lexicalError,
			plusSign,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"variableName",
			"percent",
			"backSlash",
			"variableName",
			"leftParen",
			"lexicalError",
			"variableName",
			"equalsSign",
			"variableName",
			"lexicalError",
			"lexicalError",
			"star",
			"equalsSign",
			"variableName",
			"comma",
			"intConst",
			"variableName",
			"leftParen",
			"rightParen",
			"variableName",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightAngle",
			"lexicalError",
			"variableName",
			"intConst",
			"lexicalError",
			"plusSign",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\171\121\000",
			"\176\000",
			"\071\000",
			"\147\000",
			"\041\000",
			"\101\000",
			"\157\167\000",
			"\162\172\000",
			"\045\000",
			"\134\000",
			"\163\131\000",
			"\050\000",
			"\136\000",
			"\143\156\117\000",
			"\075\000",
			"\153\000",
			"\046\000",
			"\100\000",
			"\052\000",
			"\075\000",
			"\157\066\122\000",
			"\054\000",
			"\063\000",
			"\164\000",
			"\050\000",
			"\051\000",
			"\154\000",
			"\051\000",
			"\100\000",
			"\121\000",
			"\150\000",
			"\076\000",
			"\174\000",
			"\161\115\061\165\144\000",
			"\071\000",
			"\111\000",
			"\053\000",
			"\142\000",
			"\000",
		};
		int _rubric_s = 39;
      sprintf(str,"'%s' Random String Failed\n","\x79\x51\x7e\x39\x67\x21\x41\x6f\x77\x20\x72\x7a\x25\x5c\x73\x59\x28\x5e\x20\x63\x6e\x4f\x3d\x6b\x26\x40\x09\x2a\x3d\x6f\x36\x52\x2c\x33\x09\x74\x28\x29\x6c\x29\x40\x51\x68\x3e\x7c\x71\x4d\x31\x75\x64\x0a\x39\x49\x2b\x62");
      TSM_ASSERT(str,checkAgainstRubric("\x79\x51\x7e\x39\x67\x21\x41\x6f\x77\x20\x72\x7a\x25\x5c\x73\x59\x28\x5e\x20\x63\x6e\x4f\x3d\x6b\x26\x40\x09\x2a\x3d\x6f\x36\x52\x2c\x33\x09\x74\x28\x29\x6c\x29\x40\x51\x68\x3e\x7c\x71\x4d\x31\x75\x64\x0a\x39\x49\x2b\x62",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_154( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			rightAngle,
			lexicalError,
			lexicalError,
			forwardSlash,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			leftParen,
			variableName,
			dash,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"rightAngle",
			"lexicalError",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"leftParen",
			"variableName",
			"dash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\131\000",
			"\076\000",
			"\125\000",
			"\056\000",
			"\057\000",
			"\103\000",
			"\115\000",
			"\160\000",
			"\077\000",
			"\161\166\106\145\000",
			"\050\000",
			"\143\103\124\000",
			"\055\000",
			"\041\000",
			"\046\000",
			"\131\000",
			"\171\127\060\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 19;
      sprintf(str,"'%s' Random String Failed\n","\x59\x3e\x55\x2e\x2f\x43\x4d\x70\x3f\x71\x76\x46\x65\x28\x63\x43\x54\x09\x2d\x21\x26\x59\x79\x57\x30\x28\x0a");
      TSM_ASSERT(str,checkAgainstRubric("\x59\x3e\x55\x2e\x2f\x43\x4d\x70\x3f\x71\x76\x46\x65\x28\x63\x43\x54\x09\x2d\x21\x26\x59\x79\x57\x30\x28\x0a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_155( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			leftParen,
			intConst,
			rightParen,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"leftParen",
			"intConst",
			"rightParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\172\153\000",
			"\042\000",
			"\050\000",
			"\066\000",
			"\051\000",
			"\132\000",
			"\156\000",
			"\140\000",
			"\164\062\000",
			"\000",
		};
		int _rubric_s = 10;
      sprintf(str,"'%s' Random String Failed\n","\x7a\x6b\x22\x28\x36\x29\x5a\x6e\x60\x74\x32");
      TSM_ASSERT(str,checkAgainstRubric("\x7a\x6b\x22\x28\x36\x29\x5a\x6e\x60\x74\x32",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_156( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			plusSign,
			lexicalError,
			tupleOp,
			lexicalError,
			intConst,
			lexicalError,
			leftParen,
			comma,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"plusSign",
			"lexicalError",
			"tupleOp",
			"lexicalError",
			"intConst",
			"lexicalError",
			"leftParen",
			"comma",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\053\000",
			"\127\000",
			"\043\066\000",
			"\047\000",
			"\067\063\000",
			"\130\000",
			"\050\000",
			"\054\000",
			"\110\000",
			"\000",
		};
		int _rubric_s = 11;
      sprintf(str,"'%s' Random String Failed\n","\x2a\x2b\x57\x23\x36\x27\x37\x33\x58\x28\x2c\x48");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x2b\x57\x23\x36\x27\x37\x33\x58\x28\x2c\x48",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_157( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			rightSquare,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightSquare",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\172\000",
			"\176\000",
			"\126\000",
			"\157\122\000",
			"\135\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 7;
      sprintf(str,"'%s' Random String Failed\n","\x7a\x7e\x0a\x09\x09\x20\x56\x6f\x52\x5d\x3e");
      TSM_ASSERT(str,checkAgainstRubric("\x7a\x7e\x0a\x09\x09\x20\x56\x6f\x52\x5d\x3e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_158( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			star,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"star",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\142\153\132\111\142\062\137\000",
			"\052\000",
			"\121\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","\x62\x6b\x5a\x49\x62\x32\x5f\x2a\x51");
      TSM_ASSERT(str,checkAgainstRubric("\x62\x6b\x5a\x49\x62\x32\x5f\x2a\x51",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_159( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			star,
			variableName,
			percent,
			variableName,
			equalsSign,
			variableName,
			rightParen,
			lexicalError,
			comma,
			lexicalError,
			lexicalError,
			colon,
			variableName,
			rightParen,
			variableName,
			forwardSlash,
			lexicalError,
			intConst,
			variableName,
			backSlash,
			variableName,
			forwardSlash,
			lexicalError,
			variableName,
			percent,
			lexicalError,
			lexicalError,
			variableName,
			leftAngle,
			lexicalError,
			variableName,
			rightSquare,
			lexicalError,
			variableName,
			forwardSlash,
			leftParen,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"star",
			"variableName",
			"percent",
			"variableName",
			"equalsSign",
			"variableName",
			"rightParen",
			"lexicalError",
			"comma",
			"lexicalError",
			"lexicalError",
			"colon",
			"variableName",
			"rightParen",
			"variableName",
			"forwardSlash",
			"lexicalError",
			"intConst",
			"variableName",
			"backSlash",
			"variableName",
			"forwardSlash",
			"lexicalError",
			"variableName",
			"percent",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftAngle",
			"lexicalError",
			"variableName",
			"rightSquare",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"leftParen",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\144\000",
			"\176\000",
			"\056\000",
			"\152\000",
			"\052\000",
			"\155\153\103\000",
			"\045\000",
			"\152\127\171\116\065\113\061\000",
			"\075\000",
			"\156\167\151\114\105\000",
			"\051\000",
			"\136\000",
			"\054\000",
			"\136\000",
			"\105\000",
			"\072\000",
			"\141\117\061\110\000",
			"\051\000",
			"\160\000",
			"\057\000",
			"\101\000",
			"\063\000",
			"\162\000",
			"\134\000",
			"\166\000",
			"\057\000",
			"\077\000",
			"\153\122\161\124\102\000",
			"\045\000",
			"\125\000",
			"\044\000",
			"\154\172\000",
			"\074\000",
			"\105\000",
			"\160\000",
			"\135\000",
			"\112\000",
			"\141\000",
			"\057\000",
			"\050\000",
			"\170\112\000",
			"\000",
		};
		int _rubric_s = 42;
      sprintf(str,"'%s' Random String Failed\n","\x64\x7e\x2e\x6a\x2a\x6d\x6b\x43\x25\x6a\x57\x79\x4e\x35\x4b\x31\x3d\x6e\x77\x69\x4c\x45\x29\x5e\x2c\x5e\x45\x3a\x61\x4f\x31\x48\x29\x70\x2f\x41\x33\x72\x5c\x76\x2f\x3f\x6b\x52\x71\x54\x42\x25\x55\x24\x6c\x7a\x3c\x45\x70\x5d\x4a\x61\x2f\x28\x0a\x78\x4a");
      TSM_ASSERT(str,checkAgainstRubric("\x64\x7e\x2e\x6a\x2a\x6d\x6b\x43\x25\x6a\x57\x79\x4e\x35\x4b\x31\x3d\x6e\x77\x69\x4c\x45\x29\x5e\x2c\x5e\x45\x3a\x61\x4f\x31\x48\x29\x70\x2f\x41\x33\x72\x5c\x76\x2f\x3f\x6b\x52\x71\x54\x42\x25\x55\x24\x6c\x7a\x3c\x45\x70\x5d\x4a\x61\x2f\x28\x0a\x78\x4a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_160( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			rightParen,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			equalsSign,
			variableName,
			star,
			variableName,
			rightParen,
			variableName,
			dash,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			variableName,
			dash,
			rightParen,
			variableName,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"rightParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"equalsSign",
			"variableName",
			"star",
			"variableName",
			"rightParen",
			"variableName",
			"dash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"variableName",
			"dash",
			"rightParen",
			"variableName",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\000",
			"\170\163\130\000",
			"\051\000",
			"\141\000",
			"\140\000",
			"\101\000",
			"\061\071\000",
			"\142\147\071\161\071\150\162\000",
			"\075\000",
			"\156\127\150\162\107\145\101\000",
			"\052\000",
			"\171\113\114\000",
			"\051\000",
			"\170\071\145\167\126\061\127\127\000",
			"\055\000",
			"\117\000",
			"\136\000",
			"\136\000",
			"\163\147\161\000",
			"\050\000",
			"\151\000",
			"\055\000",
			"\051\000",
			"\167\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 26;
      sprintf(str,"'%s' Random String Failed\n","\x35\x78\x73\x58\x09\x29\x61\x60\x41\x31\x39\x62\x67\x39\x71\x39\x68\x72\x3d\x6e\x57\x68\x72\x47\x65\x41\x2a\x79\x4b\x4c\x29\x78\x39\x65\x77\x56\x31\x57\x57\x2d\x4f\x5e\x5e\x73\x67\x71\x28\x69\x2d\x29\x77\x3a");
      TSM_ASSERT(str,checkAgainstRubric("\x35\x78\x73\x58\x09\x29\x61\x60\x41\x31\x39\x62\x67\x39\x71\x39\x68\x72\x3d\x6e\x57\x68\x72\x47\x65\x41\x2a\x79\x4b\x4c\x29\x78\x39\x65\x77\x56\x31\x57\x57\x2d\x4f\x5e\x5e\x73\x67\x71\x28\x69\x2d\x29\x77\x3a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_161( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			variableName,
			equalsSign,
			intConst,
			variableName,
			backSlash,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			colon,
			lexicalError,
			variableName,
			lexicalError,
			semiColon,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			leftParen,
			lexicalError,
			lexicalError,
			rightSquare,
			variableName,
			star,
			variableName,
			leftParen,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"variableName",
			"equalsSign",
			"intConst",
			"variableName",
			"backSlash",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"colon",
			"lexicalError",
			"variableName",
			"lexicalError",
			"semiColon",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"rightSquare",
			"variableName",
			"star",
			"variableName",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\000",
			"\042\000",
			"\153\061\000",
			"\075\000",
			"\063\000",
			"\166\000",
			"\134\000",
			"\066\000",
			"\121\000",
			"\166\142\000",
			"\100\000",
			"\072\000",
			"\174\000",
			"\164\101\000",
			"\042\000",
			"\073\000",
			"\070\000",
			"\145\064\131\141\000",
			"\140\000",
			"\100\000",
			"\060\000",
			"\126\000",
			"\067\000",
			"\116\000",
			"\125\000",
			"\147\155\000",
			"\176\000",
			"\106\000",
			"\047\000",
			"\165\000",
			"\176\000",
			"\050\000",
			"\101\000",
			"\130\000",
			"\135\000",
			"\161\000",
			"\052\000",
			"\152\102\062\156\000",
			"\050\000",
			"\041\000",
			"\047\000",
			"\170\000",
			"\046\000",
			"\105\000",
			"\000",
		};
		int _rubric_s = 45;
      sprintf(str,"'%s' Random String Failed\n","\x6d\x22\x6b\x31\x3d\x33\x76\x5c\x36\x51\x76\x62\x40\x3a\x7c\x74\x41\x22\x3b\x38\x65\x34\x59\x61\x60\x40\x30\x56\x37\x4e\x55\x67\x6d\x7e\x46\x27\x75\x7e\x28\x41\x58\x5d\x71\x2a\x6a\x42\x32\x6e\x28\x21\x27\x78\x26\x20\x45");
      TSM_ASSERT(str,checkAgainstRubric("\x6d\x22\x6b\x31\x3d\x33\x76\x5c\x36\x51\x76\x62\x40\x3a\x7c\x74\x41\x22\x3b\x38\x65\x34\x59\x61\x60\x40\x30\x56\x37\x4e\x55\x67\x6d\x7e\x46\x27\x75\x7e\x28\x41\x58\x5d\x71\x2a\x6a\x42\x32\x6e\x28\x21\x27\x78\x26\x20\x45",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_162( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			star,
			rightSquare,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			plusSign,
			lexicalError,
			colon,
			lexicalError,
			rightParen,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			leftParen,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"star",
			"rightSquare",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"plusSign",
			"lexicalError",
			"colon",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"leftParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\000",
			"\052\000",
			"\135\000",
			"\125\000",
			"\046\000",
			"\111\000",
			"\166\167\161\126\000",
			"\100\000",
			"\125\000",
			"\121\000",
			"\157\167\164\132\120\166\160\156\000",
			"\053\000",
			"\114\000",
			"\072\000",
			"\114\000",
			"\051\000",
			"\115\000",
			"\130\000",
			"\067\000",
			"\144\071\171\107\000",
			"\176\000",
			"\111\000",
			"\144\000",
			"\046\000",
			"\061\000",
			"\127\000",
			"\067\000",
			"\121\000",
			"\161\000",
			"\050\000",
			"\117\000",
			"\062\000",
			"\151\000",
			"\140\000",
			"\060\000",
			"\103\000",
			"\050\000",
			"\157\105\105\143\163\137\000",
			"\100\000",
			"\041\000",
			"\116\000",
			"\000",
		};
		int _rubric_s = 42;
      sprintf(str,"'%s' Random String Failed\n","\x32\x2a\x5d\x55\x26\x49\x76\x77\x71\x56\x40\x55\x51\x20\x6f\x77\x74\x5a\x50\x76\x70\x6e\x2b\x4c\x3a\x4c\x29\x0a\x4d\x58\x37\x64\x39\x79\x47\x7e\x49\x64\x26\x31\x57\x37\x51\x71\x28\x4f\x09\x32\x69\x60\x30\x43\x28\x6f\x45\x45\x63\x73\x5f\x40\x21\x4e");
      TSM_ASSERT(str,checkAgainstRubric("\x32\x2a\x5d\x55\x26\x49\x76\x77\x71\x56\x40\x55\x51\x20\x6f\x77\x74\x5a\x50\x76\x70\x6e\x2b\x4c\x3a\x4c\x29\x0a\x4d\x58\x37\x64\x39\x79\x47\x7e\x49\x64\x26\x31\x57\x37\x51\x71\x28\x4f\x09\x32\x69\x60\x30\x43\x28\x6f\x45\x45\x63\x73\x5f\x40\x21\x4e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_163( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftParen,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			intConst,
			rightSquare,
			equalsSign,
			lexicalError,
			variableName,
			lexicalError,
			rightAngle,
			lexicalError,
			variableName,
			equalsSign,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			leftAngle,
			variableName,
			leftSquare,
			leftAngle,
			percent,
			variableName,
			equalsSign,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"intConst",
			"rightSquare",
			"equalsSign",
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightAngle",
			"lexicalError",
			"variableName",
			"equalsSign",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftAngle",
			"variableName",
			"leftSquare",
			"leftAngle",
			"percent",
			"variableName",
			"equalsSign",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\163\155\125\101\115\000",
			"\050\000",
			"\141\152\000",
			"\044\000",
			"\174\000",
			"\140\000",
			"\067\000",
			"\041\000",
			"\044\000",
			"\066\000",
			"\135\000",
			"\075\000",
			"\115\000",
			"\152\167\000",
			"\100\000",
			"\076\000",
			"\105\000",
			"\145\000",
			"\075\000",
			"\106\000",
			"\061\000",
			"\115\000",
			"\042\000",
			"\077\000",
			"\074\000",
			"\145\000",
			"\133\000",
			"\074\000",
			"\045\000",
			"\152\000",
			"\075\000",
			"\113\000",
			"\000",
		};
		int _rubric_s = 33;
      sprintf(str,"'%s' Random String Failed\n","\x73\x6d\x55\x41\x4d\x28\x61\x6a\x24\x7c\x60\x37\x21\x24\x36\x5d\x3d\x09\x4d\x6a\x77\x40\x3e\x45\x65\x3d\x46\x31\x4d\x22\x3f\x3c\x65\x5b\x3c\x25\x6a\x3d\x4b");
      TSM_ASSERT(str,checkAgainstRubric("\x73\x6d\x55\x41\x4d\x28\x61\x6a\x24\x7c\x60\x37\x21\x24\x36\x5d\x3d\x09\x4d\x6a\x77\x40\x3e\x45\x65\x3d\x46\x31\x4d\x22\x3f\x3c\x65\x5b\x3c\x25\x6a\x3d\x4b",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_164( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightSquare,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightSquare",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\135\000",
			"\176\000",
			"\114\000",
			"\153\000",
			"\073\000",
			"\130\000",
			"\174\000",
			"\043\000",
			"\000",
		};
		int _rubric_s = 9;
      sprintf(str,"'%s' Random String Failed\n","\x5d\x7e\x4c\x6b\x3b\x58\x7c\x23");
      TSM_ASSERT(str,checkAgainstRubric("\x5d\x7e\x4c\x6b\x3b\x58\x7c\x23",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_165( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dash,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			rightSquare,
			variableName,
			plusSign,
			rightParen,
			lexicalError,
			rightAngle,
			rightParen,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftAngle,
			semiColon,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"dash",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"rightSquare",
			"variableName",
			"plusSign",
			"rightParen",
			"lexicalError",
			"rightAngle",
			"rightParen",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftAngle",
			"semiColon",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\055\000",
			"\103\000",
			"\120\000",
			"\071\000",
			"\114\000",
			"\043\000",
			"\044\000",
			"\101\000",
			"\135\000",
			"\151\103\101\102\144\000",
			"\053\000",
			"\051\000",
			"\140\000",
			"\076\000",
			"\051\000",
			"\105\000",
			"\161\143\000",
			"\050\000",
			"\132\000",
			"\146\137\150\104\063\000",
			"\174\000",
			"\174\000",
			"\130\000",
			"\100\000",
			"\140\000",
			"\165\000",
			"\074\000",
			"\073\000",
			"\117\000",
			"\103\000",
			"\124\000",
			"\107\000",
			"\060\000",
			"\165\167\000",
			"\000",
		};
		int _rubric_s = 35;
      sprintf(str,"'%s' Random String Failed\n","\x2d\x43\x50\x39\x4c\x23\x24\x41\x5d\x69\x43\x41\x42\x64\x2b\x29\x60\x3e\x29\x45\x71\x63\x28\x5a\x66\x5f\x68\x44\x33\x7c\x7c\x58\x40\x60\x75\x3c\x3b\x4f\x43\x54\x47\x30\x75\x77");
      TSM_ASSERT(str,checkAgainstRubric("\x2d\x43\x50\x39\x4c\x23\x24\x41\x5d\x69\x43\x41\x42\x64\x2b\x29\x60\x3e\x29\x45\x71\x63\x28\x5a\x66\x5f\x68\x44\x33\x7c\x7c\x58\x40\x60\x75\x3c\x3b\x4f\x43\x54\x47\x30\x75\x77",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_166( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			forwardSlash,
			variableName,
			rightParen,
			lexicalError,
			leftParen,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"forwardSlash",
			"variableName",
			"rightParen",
			"lexicalError",
			"leftParen",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\062\000",
			"\057\000",
			"\164\170\000",
			"\051\000",
			"\106\000",
			"\050\000",
			"\104\000",
			"\154\000",
			"\000",
		};
		int _rubric_s = 9;
      sprintf(str,"'%s' Random String Failed\n","\x33\x32\x2f\x74\x78\x29\x46\x28\x44\x20\x6c");
      TSM_ASSERT(str,checkAgainstRubric("\x33\x32\x2f\x74\x78\x29\x46\x28\x44\x20\x6c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_167( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			semiColon,
			intConst,
			variableName,
			equalsSign,
			intConst,
			lexicalError,
			lexicalError,
			intConst,
			star,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			star,
			lexicalError,
			lexicalError,
			forwardSlash,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			variableName,
			lexicalError,
			variableName,
			forwardSlash,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"semiColon",
			"intConst",
			"variableName",
			"equalsSign",
			"intConst",
			"lexicalError",
			"lexicalError",
			"intConst",
			"star",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"star",
			"lexicalError",
			"lexicalError",
			"forwardSlash",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"variableName",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\073\000",
			"\065\000",
			"\153\157\000",
			"\075\000",
			"\064\000",
			"\102\000",
			"\120\000",
			"\066\000",
			"\052\000",
			"\117\000",
			"\111\000",
			"\142\101\063\163\065\166\000",
			"\136\000",
			"\145\000",
			"\052\000",
			"\102\000",
			"\104\000",
			"\057\000",
			"\156\112\000",
			"\174\000",
			"\056\000",
			"\172\162\000",
			"\154\112\165\127\111\161\000",
			"\056\000",
			"\150\111\116\124\114\162\146\124\106\124\154\155\171\137\142\120\164\000",
			"\057\000",
			"\114\000",
			"\000",
		};
		int _rubric_s = 28;
      sprintf(str,"'%s' Random String Failed\n","\x3b\x35\x6b\x6f\x3d\x34\x42\x50\x36\x2a\x4f\x49\x62\x41\x33\x73\x35\x76\x5e\x65\x2a\x20\x42\x44\x2f\x6e\x4a\x7c\x2e\x7a\x72\x0a\x6c\x4a\x75\x57\x49\x71\x2e\x68\x49\x4e\x54\x4c\x72\x66\x54\x46\x54\x6c\x6d\x79\x5f\x62\x50\x74\x2f\x4c");
      TSM_ASSERT(str,checkAgainstRubric("\x3b\x35\x6b\x6f\x3d\x34\x42\x50\x36\x2a\x4f\x49\x62\x41\x33\x73\x35\x76\x5e\x65\x2a\x20\x42\x44\x2f\x6e\x4a\x7c\x2e\x7a\x72\x0a\x6c\x4a\x75\x57\x49\x71\x2e\x68\x49\x4e\x54\x4c\x72\x66\x54\x46\x54\x6c\x6d\x79\x5f\x62\x50\x74\x2f\x4c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_168( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			rightAngle,
			plusSign,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"rightAngle",
			"plusSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\105\000",
			"\164\000",
			"\077\000",
			"\107\000",
			"\150\000",
			"\044\000",
			"\143\000",
			"\136\000",
			"\101\000",
			"\106\000",
			"\063\000",
			"\110\000",
			"\076\000",
			"\053\000",
			"\124\000",
			"\100\000",
			"\123\000",
			"\100\000",
			"\157\161\120\000",
			"\140\000",
			"\124\000",
			"\104\000",
			"\102\000",
			"\153\116\000",
			"\174\000",
			"\144\066\114\166\137\000",
			"\041\000",
			"\000",
		};
		int _rubric_s = 29;
      sprintf(str,"'%s' Random String Failed\n","\x3a\x45\x74\x3f\x47\x68\x24\x63\x5e\x41\x46\x33\x48\x3e\x2b\x54\x40\x09\x53\x09\x40\x6f\x71\x50\x60\x54\x44\x42\x6b\x4e\x7c\x64\x36\x4c\x76\x5f\x21");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x45\x74\x3f\x47\x68\x24\x63\x5e\x41\x46\x33\x48\x3e\x2b\x54\x40\x09\x53\x09\x40\x6f\x71\x50\x60\x54\x44\x42\x6b\x4e\x7c\x64\x36\x4c\x76\x5f\x21",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_169( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			rightParen,
			lexicalError,
			variableName,
			leftParen,
			equalsSign,
			variableName,
			lexicalError,
			variableName,
			leftSquare,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			backSlash,
			lexicalError,
			lexicalError,
			rightSquare,
			lexicalError,
			rightSquare,
			lexicalError,
			forwardSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			variableName,
			semiColon,
			variableName,
			plusSign,
			comma,
			variableName,
			plusSign,
			backSlash,
			star,
			lexicalError,
			variableName,
			percent,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"rightParen",
			"lexicalError",
			"variableName",
			"leftParen",
			"equalsSign",
			"variableName",
			"lexicalError",
			"variableName",
			"leftSquare",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"rightSquare",
			"lexicalError",
			"rightSquare",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"variableName",
			"semiColon",
			"variableName",
			"plusSign",
			"comma",
			"variableName",
			"plusSign",
			"backSlash",
			"star",
			"lexicalError",
			"variableName",
			"percent",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\154\000",
			"\051\000",
			"\044\000",
			"\163\070\000",
			"\050\000",
			"\075\000",
			"\165\000",
			"\174\000",
			"\156\171\112\152\161\000",
			"\133\000",
			"\141\154\142\115\000",
			"\136\000",
			"\132\000",
			"\124\000",
			"\134\000",
			"\124\000",
			"\123\000",
			"\135\000",
			"\101\000",
			"\135\000",
			"\122\000",
			"\057\000",
			"\113\000",
			"\117\000",
			"\114\000",
			"\142\143\122\000",
			"\073\000",
			"\154\151\000",
			"\073\000",
			"\157\000",
			"\053\000",
			"\054\000",
			"\152\062\126\112\067\145\102\000",
			"\053\000",
			"\134\000",
			"\052\000",
			"\046\000",
			"\145\000",
			"\045\000",
			"\176\000",
			"\000",
		};
		int _rubric_s = 41;
      sprintf(str,"'%s' Random String Failed\n","\x6c\x29\x24\x09\x73\x38\x28\x3d\x75\x7c\x6e\x79\x4a\x6a\x71\x5b\x61\x6c\x62\x4d\x5e\x5a\x54\x5c\x54\x53\x5d\x41\x5d\x52\x2f\x4b\x4f\x4c\x62\x63\x52\x3b\x6c\x69\x3b\x6f\x2b\x2c\x6a\x32\x56\x4a\x37\x65\x42\x2b\x5c\x2a\x26\x65\x25\x7e");
      TSM_ASSERT(str,checkAgainstRubric("\x6c\x29\x24\x09\x73\x38\x28\x3d\x75\x7c\x6e\x79\x4a\x6a\x71\x5b\x61\x6c\x62\x4d\x5e\x5a\x54\x5c\x54\x53\x5d\x41\x5d\x52\x2f\x4b\x4f\x4c\x62\x63\x52\x3b\x6c\x69\x3b\x6f\x2b\x2c\x6a\x32\x56\x4a\x37\x65\x42\x2b\x5c\x2a\x26\x65\x25\x7e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_170( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			stringConst,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			equalsSign,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"stringConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"equalsSign",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\154\141\000",
			"\042\071\064\067\061\050\120\165\123\132\063\053\133\141\151\061\074\171\135\105\164\110\052\077\055\143\162\104\065\141\064\150\047\141\056\123\165\101\044\133\041\127\073\103\153\042\000",
			"\122\000",
			"\117\000",
			"\056\000",
			"\140\000",
			"\121\000",
			"\075\000",
			"\103\000",
			"\000",
		};
		int _rubric_s = 10;
      sprintf(str,"'%s' Random String Failed\n","\x6c\x61\x22\x39\x34\x37\x31\x28\x50\x75\x53\x5a\x33\x2b\x5b\x61\x69\x31\x3c\x79\x5d\x45\x74\x48\x2a\x3f\x2d\x63\x72\x44\x35\x61\x34\x68\x27\x61\x2e\x53\x75\x41\x24\x5b\x21\x57\x3b\x43\x6b\x22\x52\x4f\x2e\x60\x51\x3d\x43");
      TSM_ASSERT(str,checkAgainstRubric("\x6c\x61\x22\x39\x34\x37\x31\x28\x50\x75\x53\x5a\x33\x2b\x5b\x61\x69\x31\x3c\x79\x5d\x45\x74\x48\x2a\x3f\x2d\x63\x72\x44\x35\x61\x34\x68\x27\x61\x2e\x53\x75\x41\x24\x5b\x21\x57\x3b\x43\x6b\x22\x52\x4f\x2e\x60\x51\x3d\x43",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_171( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\046\000",
			"\064\000",
			"\105\000",
			"\155\000",
			"\044\000",
			"\136\000",
			"\153\000",
			"\077\000",
			"\176\000",
			"\106\000",
			"\067\000",
			"\126\000",
			"\162\064\131\110\103\166\000",
			"\042\000",
			"\064\000",
			"\043\000",
			"\131\000",
			"\000",
		};
		int _rubric_s = 18;
      sprintf(str,"'%s' Random String Failed\n","\x26\x34\x45\x6d\x24\x5e\x6b\x3f\x7e\x46\x37\x56\x72\x34\x59\x48\x43\x76\x0a\x22\x34\x23\x59");
      TSM_ASSERT(str,checkAgainstRubric("\x26\x34\x45\x6d\x24\x5e\x6b\x3f\x7e\x46\x37\x56\x72\x34\x59\x48\x43\x76\x0a\x22\x34\x23\x59",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_172( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			variableName,
			backSlash,
			intConst,
			rightParen,
			variableName,
			lexicalError,
			star,
			leftParen,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			leftParen,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			comma,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"variableName",
			"backSlash",
			"intConst",
			"rightParen",
			"variableName",
			"lexicalError",
			"star",
			"leftParen",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"leftParen",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"comma",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\171\165\000",
			"\043\000",
			"\157\113\061\114\165\125\137\000",
			"\134\000",
			"\063\000",
			"\051\000",
			"\144\104\000",
			"\042\000",
			"\052\000",
			"\050\000",
			"\126\000",
			"\160\000",
			"\050\000",
			"\103\000",
			"\152\105\000",
			"\136\000",
			"\146\000",
			"\044\000",
			"\166\113\144\071\162\000",
			"\100\000",
			"\050\000",
			"\067\000",
			"\165\000",
			"\047\000",
			"\112\000",
			"\130\000",
			"\054\000",
			"\071\000",
			"\155\122\143\000",
			"\000",
		};
		int _rubric_s = 30;
      sprintf(str,"'%s' Random String Failed\n","\x79\x75\x23\x6f\x4b\x31\x4c\x75\x55\x5f\x5c\x33\x29\x64\x44\x22\x2a\x28\x0a\x56\x70\x28\x43\x6a\x45\x5e\x66\x24\x76\x4b\x64\x39\x72\x40\x28\x37\x75\x27\x4a\x58\x2c\x39\x6d\x52\x63");
      TSM_ASSERT(str,checkAgainstRubric("\x79\x75\x23\x6f\x4b\x31\x4c\x75\x55\x5f\x5c\x33\x29\x64\x44\x22\x2a\x28\x0a\x56\x70\x28\x43\x6a\x45\x5e\x66\x24\x76\x4b\x64\x39\x72\x40\x28\x37\x75\x27\x4a\x58\x2c\x39\x6d\x52\x63",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_173( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			plusSign,
			lexicalError,
			variableName,
			percent,
			leftAngle,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			rightSquare,
			lexicalError,
			lexicalError,
			leftAngle,
			variableName,
			comma,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			leftParen,
			variableName,
			rightParen,
			lexicalError,
			plusSign,
			rightSquare,
			intConst,
			variableName,
			percent,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"plusSign",
			"lexicalError",
			"variableName",
			"percent",
			"leftAngle",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightSquare",
			"lexicalError",
			"lexicalError",
			"leftAngle",
			"variableName",
			"comma",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"variableName",
			"rightParen",
			"lexicalError",
			"plusSign",
			"rightSquare",
			"intConst",
			"variableName",
			"percent",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\041\000",
			"\053\000",
			"\115\000",
			"\150\000",
			"\045\000",
			"\074\000",
			"\067\000",
			"\125\000",
			"\056\000",
			"\153\151\000",
			"\166\121\152\062\000",
			"\047\000",
			"\132\000",
			"\122\000",
			"\156\126\000",
			"\174\000",
			"\135\000",
			"\140\000",
			"\111\000",
			"\074\000",
			"\141\070\000",
			"\054\000",
			"\154\063\147\161\130\114\162\123\000",
			"\140\000",
			"\123\000",
			"\110\000",
			"\050\000",
			"\152\160\065\131\121\000",
			"\051\000",
			"\056\000",
			"\053\000",
			"\135\000",
			"\065\000",
			"\141\000",
			"\045\000",
			"\130\000",
			"\056\000",
			"\071\000",
			"\174\000",
			"\153\154\000",
			"\000",
		};
		int _rubric_s = 41;
      sprintf(str,"'%s' Random String Failed\n","\x21\x2b\x4d\x68\x25\x3c\x37\x55\x2e\x6b\x69\x09\x76\x51\x6a\x32\x27\x5a\x52\x6e\x56\x7c\x5d\x60\x49\x3c\x61\x38\x2c\x6c\x33\x67\x71\x58\x4c\x72\x53\x60\x53\x48\x28\x6a\x70\x35\x59\x51\x29\x2e\x2b\x5d\x35\x61\x25\x58\x2e\x39\x7c\x6b\x6c");
      TSM_ASSERT(str,checkAgainstRubric("\x21\x2b\x4d\x68\x25\x3c\x37\x55\x2e\x6b\x69\x09\x76\x51\x6a\x32\x27\x5a\x52\x6e\x56\x7c\x5d\x60\x49\x3c\x61\x38\x2c\x6c\x33\x67\x71\x58\x4c\x72\x53\x60\x53\x48\x28\x6a\x70\x35\x59\x51\x29\x2e\x2b\x5d\x35\x61\x25\x58\x2e\x39\x7c\x6b\x6c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_174( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			rightParen,
			lexicalError,
			rightParen,
			leftParen,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"rightParen",
			"lexicalError",
			"rightParen",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\121\000",
			"\051\000",
			"\077\000",
			"\051\000",
			"\050\000",
			"\046\000",
			"\046\000",
			"\167\000",
			"\050\000",
			"\136\000",
			"\000",
		};
		int _rubric_s = 11;
      sprintf(str,"'%s' Random String Failed\n","\x51\x29\x3f\x29\x28\x26\x26\x77\x28\x5e");
      TSM_ASSERT(str,checkAgainstRubric("\x51\x29\x3f\x29\x28\x26\x26\x77\x28\x5e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_175( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			backSlash,
			variableName,
			lexicalError,
			leftParen,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"backSlash",
			"variableName",
			"lexicalError",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\134\000",
			"\145\000",
			"\140\000",
			"\050\000",
			"\111\000",
			"\127\000",
			"\171\000",
			"\050\000",
			"\115\000",
			"\064\067\000",
			"\111\000",
			"\146\104\145\160\170\130\063\106\000",
			"\046\000",
			"\107\000",
			"\100\000",
			"\042\000",
			"\000",
		};
		int _rubric_s = 17;
      sprintf(str,"'%s' Random String Failed\n","\x5c\x65\x60\x28\x49\x57\x79\x28\x4d\x34\x37\x49\x66\x44\x65\x70\x78\x58\x33\x46\x26\x47\x40\x22");
      TSM_ASSERT(str,checkAgainstRubric("\x5c\x65\x60\x28\x49\x57\x79\x28\x4d\x34\x37\x49\x66\x44\x65\x70\x78\x58\x33\x46\x26\x47\x40\x22",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_176( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			colon,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			leftSquare,
			variableName,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"colon",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"leftSquare",
			"variableName",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\000",
			"\107\000",
			"\065\000",
			"\172\000",
			"\140\000",
			"\072\000",
			"\114\000",
			"\144\151\116\000",
			"\044\000",
			"\105\000",
			"\113\000",
			"\070\000",
			"\163\112\144\000",
			"\077\000",
			"\133\000",
			"\161\000",
			"\046\000",
			"\153\172\132\070\112\060\000",
			"\000",
		};
		int _rubric_s = 19;
      sprintf(str,"'%s' Random String Failed\n","\x35\x47\x35\x7a\x60\x3a\x4c\x64\x69\x4e\x24\x45\x4b\x38\x73\x4a\x64\x3f\x5b\x0a\x71\x26\x6b\x7a\x5a\x38\x4a\x30");
      TSM_ASSERT(str,checkAgainstRubric("\x35\x47\x35\x7a\x60\x3a\x4c\x64\x69\x4e\x24\x45\x4b\x38\x73\x4a\x64\x3f\x5b\x0a\x71\x26\x6b\x7a\x5a\x38\x4a\x30",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_177( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftAngle,
			rightParen,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			plusSign,
			leftParen,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			stringConst,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftAngle",
			"rightParen",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"plusSign",
			"leftParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"stringConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\000",
			"\074\000",
			"\051\000",
			"\136\000",
			"\062\000",
			"\144\110\070\000",
			"\041\000",
			"\126\000",
			"\053\000",
			"\050\000",
			"\102\000",
			"\166\000",
			"\077\000",
			"\155\000",
			"\042\136\066\072\053\117\161\131\150\165\124\107\165\154\042\000",
			"\145\000",
			"\041\000",
			"\100\000",
			"\071\000",
			"\000",
		};
		int _rubric_s = 20;
      sprintf(str,"'%s' Random String Failed\n","\x6e\x09\x3c\x29\x5e\x32\x64\x48\x38\x21\x56\x2b\x28\x42\x76\x3f\x6d\x22\x5e\x36\x3a\x2b\x4f\x71\x59\x68\x75\x54\x47\x75\x6c\x22\x65\x21\x20\x40\x39\x09");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x09\x3c\x29\x5e\x32\x64\x48\x38\x21\x56\x2b\x28\x42\x76\x3f\x6d\x22\x5e\x36\x3a\x2b\x4f\x71\x59\x68\x75\x54\x47\x75\x6c\x22\x65\x21\x20\x40\x39\x09",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_178( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			backSlash,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			backSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"backSlash",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"backSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\043\000",
			"\142\172\102\126\170\164\151\172\160\113\000",
			"\100\000",
			"\145\000",
			"\134\000",
			"\126\000",
			"\171\000",
			"\050\000",
			"\126\000",
			"\070\000",
			"\103\000",
			"\115\000",
			"\134\000",
			"\000",
		};
		int _rubric_s = 14;
      sprintf(str,"'%s' Random String Failed\n","\x23\x62\x7a\x42\x56\x78\x74\x69\x7a\x70\x4b\x40\x65\x5c\x56\x79\x28\x56\x38\x43\x4d\x5c");
      TSM_ASSERT(str,checkAgainstRubric("\x23\x62\x7a\x42\x56\x78\x74\x69\x7a\x70\x4b\x40\x65\x5c\x56\x79\x28\x56\x38\x43\x4d\x5c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_179( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftParen,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			forwardSlash,
			variableName,
			leftAngle,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftParen",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"variableName",
			"leftAngle",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\131\000",
			"\050\000",
			"\152\060\137\164\000",
			"\100\000",
			"\164\000",
			"\136\000",
			"\157\154\123\065\121\151\000",
			"\057\000",
			"\143\151\154\000",
			"\074\000",
			"\065\000",
			"\041\000",
			"\140\000",
			"\107\000",
			"\044\000",
			"\166\127\143\067\126\171\120\000",
			"\000",
		};
		int _rubric_s = 17;
      sprintf(str,"'%s' Random String Failed\n","\x74\x59\x28\x6a\x30\x5f\x74\x40\x74\x5e\x6f\x6c\x53\x35\x51\x69\x2f\x63\x69\x6c\x3c\x35\x21\x60\x47\x24\x76\x57\x63\x37\x56\x79\x50");
      TSM_ASSERT(str,checkAgainstRubric("\x74\x59\x28\x6a\x30\x5f\x74\x40\x74\x5e\x6f\x6c\x53\x35\x51\x69\x2f\x63\x69\x6c\x3c\x35\x21\x60\x47\x24\x76\x57\x63\x37\x56\x79\x50",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_180( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			forwardSlash,
			lexicalError,
			equalsSign,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			percent,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"forwardSlash",
			"lexicalError",
			"equalsSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"percent",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\000",
			"\057\000",
			"\117\000",
			"\075\000",
			"\125\000",
			"\132\000",
			"\136\000",
			"\155\000",
			"\045\000",
			"\132\000",
			"\126\000",
			"\105\000",
			"\166\000",
			"\000",
		};
		int _rubric_s = 14;
      sprintf(str,"'%s' Random String Failed\n","\x38\x2f\x4f\x3d\x55\x5a\x5e\x6d\x25\x5a\x56\x45\x76");
      TSM_ASSERT(str,checkAgainstRubric("\x38\x2f\x4f\x3d\x55\x5a\x5e\x6d\x25\x5a\x56\x45\x76",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_181( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			rightSquare,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			rightParen,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"rightSquare",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"rightParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\161\126\152\000",
			"\135\000",
			"\064\071\000",
			"\146\107\111\145\130\165\000",
			"\136\000",
			"\131\000",
			"\067\060\000",
			"\170\000",
			"\051\000",
			"\171\000",
			"\140\000",
			"\136\000",
			"\160\065\000",
			"\051\000",
			"\064\000",
			"\126\000",
			"\142\156\114\070\070\154\000",
			"\000",
		};
		int _rubric_s = 18;
      sprintf(str,"'%s' Random String Failed\n","\x71\x56\x6a\x5d\x34\x39\x66\x47\x49\x65\x58\x75\x5e\x59\x37\x30\x78\x29\x79\x60\x5e\x70\x35\x29\x34\x56\x62\x6e\x4c\x38\x38\x6c");
      TSM_ASSERT(str,checkAgainstRubric("\x71\x56\x6a\x5d\x34\x39\x66\x47\x49\x65\x58\x75\x5e\x59\x37\x30\x78\x29\x79\x60\x5e\x70\x35\x29\x34\x56\x62\x6e\x4c\x38\x38\x6c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_182( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			leftSquare,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			backSlash,
			variableName,
			lexicalError,
			variableName,
			colon,
			variableName,
			comma,
			intConst,
			semiColon,
			rightParen,
			variableName,
			intConst,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftSquare",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"backSlash",
			"variableName",
			"lexicalError",
			"variableName",
			"colon",
			"variableName",
			"comma",
			"intConst",
			"semiColon",
			"rightParen",
			"variableName",
			"intConst",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\115\000",
			"\115\000",
			"\174\000",
			"\133\000",
			"\122\000",
			"\126\000",
			"\131\000",
			"\155\000",
			"\134\000",
			"\145\117\126\000",
			"\044\000",
			"\151\166\172\164\000",
			"\072\000",
			"\143\167\063\000",
			"\054\000",
			"\064\000",
			"\073\000",
			"\051\000",
			"\151\162\000",
			"\061\000",
			"\065\000",
			"\000",
		};
		int _rubric_s = 22;
      sprintf(str,"'%s' Random String Failed\n","\x4d\x4d\x7c\x5b\x52\x56\x59\x6d\x5c\x65\x4f\x56\x24\x69\x76\x7a\x74\x3a\x63\x77\x33\x2c\x34\x3b\x29\x69\x72\x20\x31\x20\x35");
      TSM_ASSERT(str,checkAgainstRubric("\x4d\x4d\x7c\x5b\x52\x56\x59\x6d\x5c\x65\x4f\x56\x24\x69\x76\x7a\x74\x3a\x63\x77\x33\x2c\x34\x3b\x29\x69\x72\x20\x31\x20\x35",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_183( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			leftAngle,
			percent,
			leftParen,
			variableName,
			leftSquare,
			lexicalError,
			variableName,
			percent,
			backSlash,
			leftAngle,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			colon,
			lexicalError,
			plusSign,
			intConst,
			lexicalError,
			backSlash,
			variableName,
			leftParen,
			lexicalError,
			variableName,
			comma,
			backSlash,
			lexicalError,
			lexicalError,
			intConst,
			leftParen,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			variableName,
			star,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"leftAngle",
			"percent",
			"leftParen",
			"variableName",
			"leftSquare",
			"lexicalError",
			"variableName",
			"percent",
			"backSlash",
			"leftAngle",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"colon",
			"lexicalError",
			"plusSign",
			"intConst",
			"lexicalError",
			"backSlash",
			"variableName",
			"leftParen",
			"lexicalError",
			"variableName",
			"comma",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"intConst",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"variableName",
			"star",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\000",
			"\165\130\146\000",
			"\074\000",
			"\045\000",
			"\050\000",
			"\152\000",
			"\133\000",
			"\131\000",
			"\141\063\105\151\071\000",
			"\045\000",
			"\134\000",
			"\074\000",
			"\107\000",
			"\161\000",
			"\041\000",
			"\164\066\000",
			"\042\000",
			"\072\000",
			"\125\000",
			"\053\000",
			"\065\000",
			"\111\000",
			"\134\000",
			"\162\165\000",
			"\050\000",
			"\056\000",
			"\170\124\000",
			"\054\000",
			"\134\000",
			"\106\000",
			"\101\000",
			"\062\000",
			"\050\000",
			"\117\000",
			"\116\000",
			"\140\000",
			"\063\000",
			"\137\000",
			"\060\000",
			"\160\156\000",
			"\046\000",
			"\165\152\165\114\170\131\156\000",
			"\052\000",
			"\103\000",
			"\000",
		};
		int _rubric_s = 45;
      sprintf(str,"'%s' Random String Failed\n","\x53\x75\x58\x66\x20\x3c\x25\x28\x6a\x5b\x59\x61\x33\x45\x69\x39\x25\x5c\x3c\x47\x71\x21\x74\x36\x22\x3a\x55\x2b\x35\x49\x5c\x72\x75\x28\x2e\x78\x54\x2c\x0a\x5c\x46\x41\x32\x28\x4f\x4e\x60\x33\x5f\x30\x70\x6e\x26\x75\x6a\x75\x4c\x78\x59\x6e\x2a\x43");
      TSM_ASSERT(str,checkAgainstRubric("\x53\x75\x58\x66\x20\x3c\x25\x28\x6a\x5b\x59\x61\x33\x45\x69\x39\x25\x5c\x3c\x47\x71\x21\x74\x36\x22\x3a\x55\x2b\x35\x49\x5c\x72\x75\x28\x2e\x78\x54\x2c\x0a\x5c\x46\x41\x32\x28\x4f\x4e\x60\x33\x5f\x30\x70\x6e\x26\x75\x6a\x75\x4c\x78\x59\x6e\x2a\x43",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_184( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			plusSign,
			dash,
			percent,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"plusSign",
			"dash",
			"percent",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\000",
			"\176\000",
			"\124\000",
			"\156\107\000",
			"\053\000",
			"\055\000",
			"\045\000",
			"\127\000",
			"\063\000",
			"\117\000",
			"\174\000",
			"\000",
		};
		int _rubric_s = 12;
      sprintf(str,"'%s' Random String Failed\n","\x46\x7e\x54\x6e\x47\x2b\x2d\x25\x57\x33\x4f\x7c");
      TSM_ASSERT(str,checkAgainstRubric("\x46\x7e\x54\x6e\x47\x2b\x2d\x25\x57\x33\x4f\x7c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_185( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			dash,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			forwardSlash,
			leftAngle,
			variableName,
			star,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			rightParen,
			leftParen,
			lexicalError,
			forwardSlash,
			lexicalError,
			leftAngle,
			lexicalError,
			leftAngle,
			rightParen,
			variableName,
			star,
			lexicalError,
			lexicalError,
			variableName,
			colon,
			lexicalError,
			variableName,
			forwardSlash,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"dash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"forwardSlash",
			"leftAngle",
			"variableName",
			"star",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"rightParen",
			"leftParen",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"leftAngle",
			"lexicalError",
			"leftAngle",
			"rightParen",
			"variableName",
			"star",
			"lexicalError",
			"lexicalError",
			"variableName",
			"colon",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\145\144\110\103\123\000",
			"\073\000",
			"\111\000",
			"\055\000",
			"\176\000",
			"\113\000",
			"\125\000",
			"\163\070\170\000",
			"\174\000",
			"\066\000",
			"\132\000",
			"\057\000",
			"\074\000",
			"\144\065\000",
			"\052\000",
			"\143\107\000",
			"\136\000",
			"\160\067\116\000",
			"\100\000",
			"\161\142\071\000",
			"\051\000",
			"\050\000",
			"\121\000",
			"\057\000",
			"\111\000",
			"\074\000",
			"\121\000",
			"\074\000",
			"\051\000",
			"\163\106\000",
			"\052\000",
			"\136\000",
			"\104\000",
			"\166\172\124\102\000",
			"\072\000",
			"\102\000",
			"\154\110\000",
			"\057\000",
			"\142\000",
			"\176\000",
			"\123\000",
			"\071\000",
			"\000",
		};
		int _rubric_s = 44;
      sprintf(str,"'%s' Random String Failed\n","\x2e\x65\x64\x48\x43\x53\x3b\x49\x2d\x7e\x4b\x55\x73\x38\x78\x7c\x36\x09\x20\x5a\x2f\x3c\x64\x35\x2a\x63\x47\x5e\x70\x37\x4e\x40\x71\x62\x39\x29\x28\x51\x2f\x49\x3c\x51\x3c\x29\x73\x46\x2a\x5e\x44\x76\x7a\x54\x42\x3a\x42\x6c\x48\x2f\x62\x7e\x53\x39");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x65\x64\x48\x43\x53\x3b\x49\x2d\x7e\x4b\x55\x73\x38\x78\x7c\x36\x09\x20\x5a\x2f\x3c\x64\x35\x2a\x63\x47\x5e\x70\x37\x4e\x40\x71\x62\x39\x29\x28\x51\x2f\x49\x3c\x51\x3c\x29\x73\x46\x2a\x5e\x44\x76\x7a\x54\x42\x3a\x42\x6c\x48\x2f\x62\x7e\x53\x39",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_186( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","\x72");
      TSM_ASSERT(str,checkAgainstRubric("\x72",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_187( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\154\157\123\143\104\065\112\125\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","\x6c\x6f\x53\x63\x44\x35\x4a\x55");
      TSM_ASSERT(str,checkAgainstRubric("\x6c\x6f\x53\x63\x44\x35\x4a\x55",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_188( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			variableName,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"variableName",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\150\115\125\000",
			"\111\000",
			"\107\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","\x5b\x68\x4d\x55\x0a\x49\x47");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x68\x4d\x55\x0a\x49\x47",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_189( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			leftParen,
			variableName,
			lexicalError,
			colon,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			rightSquare,
			lexicalError,
			star,
			lexicalError,
			intConst,
			comma,
			lexicalError,
			lexicalError,
			rightAngle,
			variableName,
			leftParen,
			dash,
			lexicalError,
			rightAngle,
			lexicalError,
			intConst,
			rightAngle,
			variableName,
			forwardSlash,
			plusSign,
			backSlash,
			variableName,
			comma,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"leftParen",
			"variableName",
			"lexicalError",
			"colon",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"rightSquare",
			"lexicalError",
			"star",
			"lexicalError",
			"intConst",
			"comma",
			"lexicalError",
			"lexicalError",
			"rightAngle",
			"variableName",
			"leftParen",
			"dash",
			"lexicalError",
			"rightAngle",
			"lexicalError",
			"intConst",
			"rightAngle",
			"variableName",
			"forwardSlash",
			"plusSign",
			"backSlash",
			"variableName",
			"comma",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\043\000",
			"\050\000",
			"\150\150\000",
			"\077\000",
			"\072\000",
			"\164\166\000",
			"\174\000",
			"\124\000",
			"\125\000",
			"\135\000",
			"\112\000",
			"\052\000",
			"\104\000",
			"\060\000",
			"\054\000",
			"\047\000",
			"\112\000",
			"\076\000",
			"\155\070\130\141\000",
			"\050\000",
			"\055\000",
			"\113\000",
			"\076\000",
			"\137\000",
			"\071\000",
			"\076\000",
			"\142\117\126\000",
			"\057\000",
			"\053\000",
			"\134\000",
			"\157\117\000",
			"\054\000",
			"\140\000",
			"\162\060\000",
			"\176\000",
			"\136\000",
			"\120\000",
			"\105\000",
			"\000",
		};
		int _rubric_s = 39;
      sprintf(str,"'%s' Random String Failed\n","\x23\x28\x68\x68\x3f\x3a\x74\x76\x7c\x54\x55\x5d\x4a\x2a\x44\x30\x2c\x27\x4a\x3e\x6d\x38\x58\x61\x28\x2d\x4b\x3e\x5f\x39\x3e\x62\x4f\x56\x2f\x2b\x5c\x6f\x4f\x2c\x60\x72\x30\x7e\x5e\x50\x45");
      TSM_ASSERT(str,checkAgainstRubric("\x23\x28\x68\x68\x3f\x3a\x74\x76\x7c\x54\x55\x5d\x4a\x2a\x44\x30\x2c\x27\x4a\x3e\x6d\x38\x58\x61\x28\x2d\x4b\x3e\x5f\x39\x3e\x62\x4f\x56\x2f\x2b\x5c\x6f\x4f\x2c\x60\x72\x30\x7e\x5e\x50\x45",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_190( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			rightAngle,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			comma,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"rightAngle",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"comma",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\127\000",
			"\167\161\067\000",
			"\076\000",
			"\120\000",
			"\176\000",
			"\065\000",
			"\106\000",
			"\054\000",
			"\000",
		};
		int _rubric_s = 9;
      sprintf(str,"'%s' Random String Failed\n","\x57\x77\x71\x37\x3e\x50\x7e\x35\x46\x2c");
      TSM_ASSERT(str,checkAgainstRubric("\x57\x77\x71\x37\x3e\x50\x7e\x35\x46\x2c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_191( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			colon,
			lexicalError,
			variableName,
			leftAngle,
			variableName,
			rightParen,
			lexicalError,
			intConst,
			rightSquare,
			lexicalError,
			variableName,
			rightSquare,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			rightSquare,
			percent,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			variableName,
			rightSquare,
			variableName,
			semiColon,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"colon",
			"lexicalError",
			"variableName",
			"leftAngle",
			"variableName",
			"rightParen",
			"lexicalError",
			"intConst",
			"rightSquare",
			"lexicalError",
			"variableName",
			"rightSquare",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightSquare",
			"percent",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"variableName",
			"rightSquare",
			"variableName",
			"semiColon",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\072\000",
			"\042\000",
			"\161\000",
			"\074\000",
			"\165\000",
			"\051\000",
			"\110\000",
			"\070\000",
			"\135\000",
			"\123\000",
			"\152\000",
			"\135\000",
			"\041\000",
			"\172\000",
			"\044\000",
			"\062\000",
			"\041\000",
			"\174\000",
			"\125\000",
			"\160\000",
			"\135\000",
			"\045\000",
			"\164\110\167\000",
			"\046\000",
			"\043\000",
			"\154\160\110\102\163\145\112\104\156\157\104\000",
			"\050\000",
			"\163\000",
			"\140\000",
			"\047\000",
			"\176\000",
			"\066\000",
			"\146\127\167\131\144\107\000",
			"\164\065\127\114\000",
			"\135\000",
			"\144\000",
			"\073\000",
			"\115\000",
			"\000",
		};
		int _rubric_s = 39;
      sprintf(str,"'%s' Random String Failed\n","\x3a\x22\x71\x3c\x75\x29\x48\x38\x5d\x53\x6a\x5d\x21\x7a\x24\x32\x21\x7c\x55\x70\x5d\x25\x74\x48\x77\x26\x23\x6c\x70\x48\x42\x73\x65\x4a\x44\x6e\x6f\x44\x28\x73\x60\x27\x7e\x36\x66\x57\x77\x59\x64\x47\x0a\x74\x35\x57\x4c\x5d\x0a\x64\x3b\x4d");
      TSM_ASSERT(str,checkAgainstRubric("\x3a\x22\x71\x3c\x75\x29\x48\x38\x5d\x53\x6a\x5d\x21\x7a\x24\x32\x21\x7c\x55\x70\x5d\x25\x74\x48\x77\x26\x23\x6c\x70\x48\x42\x73\x65\x4a\x44\x6e\x6f\x44\x28\x73\x60\x27\x7e\x36\x66\x57\x77\x59\x64\x47\x0a\x74\x35\x57\x4c\x5d\x0a\x64\x3b\x4d",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_192( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			leftAngle,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			plusSign,
			lexicalError,
			backSlash,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftAngle",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"plusSign",
			"lexicalError",
			"backSlash",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\143\000",
			"\136\000",
			"\137\000",
			"\163\000",
			"\047\000",
			"\047\000",
			"\174\000",
			"\074\000",
			"\167\156\111\111\131\144\064\157\155\000",
			"\046\000",
			"\114\000",
			"\166\000",
			"\053\000",
			"\047\000",
			"\134\000",
			"\166\105\000",
			"\000",
		};
		int _rubric_s = 17;
      sprintf(str,"'%s' Random String Failed\n","\x63\x5e\x5f\x73\x27\x27\x7c\x3c\x77\x6e\x49\x49\x59\x64\x34\x6f\x6d\x26\x4c\x76\x2b\x27\x09\x5c\x76\x45");
      TSM_ASSERT(str,checkAgainstRubric("\x63\x5e\x5f\x73\x27\x27\x7c\x3c\x77\x6e\x49\x49\x59\x64\x34\x6f\x6d\x26\x4c\x76\x2b\x27\x09\x5c\x76\x45",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_193( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			colon,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			star,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			plusSign,
			lexicalError,
			variableName,
			lexicalError,
			rightAngle,
			variableName,
			forwardSlash,
			percent,
			lexicalError,
			variableName,
			forwardSlash,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"colon",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"star",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"plusSign",
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightAngle",
			"variableName",
			"forwardSlash",
			"percent",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\044\000",
			"\123\000",
			"\163\070\065\146\000",
			"\044\000",
			"\126\000",
			"\174\000",
			"\155\125\132\161\171\104\164\156\115\164\125\107\061\172\000",
			"\072\000",
			"\124\000",
			"\120\000",
			"\142\131\122\061\065\000",
			"\047\000",
			"\052\000",
			"\143\112\120\120\124\141\000",
			"\043\000",
			"\165\000",
			"\041\000",
			"\165\000",
			"\053\000",
			"\121\000",
			"\156\152\137\171\000",
			"\174\000",
			"\076\000",
			"\156\000",
			"\057\000",
			"\045\000",
			"\117\000",
			"\142\000",
			"\057\000",
			"\000",
		};
		int _rubric_s = 31;
      sprintf(str,"'%s' Random String Failed\n","\x29\x24\x53\x73\x38\x35\x66\x0a\x24\x56\x7c\x6d\x55\x5a\x71\x79\x44\x74\x6e\x4d\x74\x55\x47\x31\x7a\x3a\x54\x50\x62\x59\x52\x31\x35\x27\x2a\x63\x4a\x50\x50\x54\x61\x23\x75\x21\x75\x2b\x51\x6e\x6a\x5f\x79\x7c\x3e\x6e\x2f\x25\x4f\x62\x2f");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x24\x53\x73\x38\x35\x66\x0a\x24\x56\x7c\x6d\x55\x5a\x71\x79\x44\x74\x6e\x4d\x74\x55\x47\x31\x7a\x3a\x54\x50\x62\x59\x52\x31\x35\x27\x2a\x63\x4a\x50\x50\x54\x61\x23\x75\x21\x75\x2b\x51\x6e\x6a\x5f\x79\x7c\x3e\x6e\x2f\x25\x4f\x62\x2f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_194( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			percent,
			rightParen,
			variableName,
			intConst,
			lexicalError,
			dash,
			lexicalError,
			lexicalError,
			backSlash,
			forwardSlash,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			variableName,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"percent",
			"rightParen",
			"variableName",
			"intConst",
			"lexicalError",
			"dash",
			"lexicalError",
			"lexicalError",
			"backSlash",
			"forwardSlash",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"variableName",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\046\000",
			"\114\000",
			"\154\122\132\000",
			"\045\000",
			"\051\000",
			"\163\000",
			"\063\000",
			"\130\000",
			"\055\000",
			"\137\000",
			"\174\000",
			"\134\000",
			"\057\000",
			"\103\000",
			"\124\000",
			"\065\000",
			"\167\137\147\105\116\000",
			"\047\000",
			"\160\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 21;
      sprintf(str,"'%s' Random String Failed\n","\x26\x4c\x6c\x52\x5a\x25\x29\x73\x09\x33\x58\x2d\x5f\x7c\x5c\x2f\x43\x54\x35\x77\x5f\x67\x45\x4e\x27\x70\x3e");
      TSM_ASSERT(str,checkAgainstRubric("\x26\x4c\x6c\x52\x5a\x25\x29\x73\x09\x33\x58\x2d\x5f\x7c\x5c\x2f\x43\x54\x35\x77\x5f\x67\x45\x4e\x27\x70\x3e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_195( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			leftSquare,
			variableName,
			lexicalError,
			variableName,
			leftParen,
			variableName,
			forwardSlash,
			variableName,
			intConst,
			lexicalError,
			variableName,
			forwardSlash,
			variableName,
			rightSquare,
			lexicalError,
			lexicalError,
			rightSquare,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"leftSquare",
			"variableName",
			"lexicalError",
			"variableName",
			"leftParen",
			"variableName",
			"forwardSlash",
			"variableName",
			"intConst",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"variableName",
			"rightSquare",
			"lexicalError",
			"lexicalError",
			"rightSquare",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\131\000",
			"\147\000",
			"\133\000",
			"\141\000",
			"\174\000",
			"\157\000",
			"\050\000",
			"\144\110\123\000",
			"\057\000",
			"\154\124\101\115\170\144\105\132\165\070\103\000",
			"\070\000",
			"\105\000",
			"\151\161\160\170\166\137\000",
			"\057\000",
			"\147\000",
			"\135\000",
			"\113\000",
			"\120\000",
			"\135\000",
			"\153\143\155\071\171\154\000",
			"\000",
		};
		int _rubric_s = 21;
      sprintf(str,"'%s' Random String Failed\n","\x59\x67\x5b\x61\x7c\x6f\x28\x64\x48\x53\x2f\x6c\x54\x41\x4d\x78\x64\x45\x5a\x75\x38\x43\x09\x38\x45\x69\x71\x70\x78\x76\x5f\x20\x2f\x67\x5d\x4b\x50\x5d\x6b\x63\x6d\x39\x79\x6c");
      TSM_ASSERT(str,checkAgainstRubric("\x59\x67\x5b\x61\x7c\x6f\x28\x64\x48\x53\x2f\x6c\x54\x41\x4d\x78\x64\x45\x5a\x75\x38\x43\x09\x38\x45\x69\x71\x70\x78\x76\x5f\x20\x2f\x67\x5d\x4b\x50\x5d\x6b\x63\x6d\x39\x79\x6c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_196( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			rightAngle,
			rightSquare,
			rightParen,
			rightParen,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			dash,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			plusSign,
			intConst,
			variableName,
			rightParen,
			lexicalError,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"rightAngle",
			"rightSquare",
			"rightParen",
			"rightParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"dash",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"plusSign",
			"intConst",
			"variableName",
			"rightParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\147\000",
			"\076\000",
			"\135\000",
			"\051\000",
			"\051\000",
			"\165\000",
			"\042\000",
			"\101\000",
			"\155\000",
			"\055\000",
			"\106\000",
			"\064\000",
			"\122\000",
			"\152\107\000",
			"\053\000",
			"\071\000",
			"\164\155\114\146\170\063\000",
			"\051\000",
			"\107\000",
			"\144\000",
			"\041\000",
			"\000",
		};
		int _rubric_s = 22;
      sprintf(str,"'%s' Random String Failed\n","\x67\x3e\x5d\x29\x29\x75\x22\x41\x6d\x2d\x46\x34\x52\x6a\x47\x2b\x39\x74\x6d\x4c\x66\x78\x33\x29\x47\x64\x21");
      TSM_ASSERT(str,checkAgainstRubric("\x67\x3e\x5d\x29\x29\x75\x22\x41\x6d\x2d\x46\x34\x52\x6a\x47\x2b\x39\x74\x6d\x4c\x66\x78\x33\x29\x47\x64\x21",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_197( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			colon,
			variableName,
			rightParen,
			semiColon,
			rightSquare,
			percent,
			intConst,
			lexicalError,
			forwardSlash,
			dash,
			lexicalError,
			intConst,
			leftParen,
			lexicalError,
			intConst,
			dash,
			variableName,
			lexicalError,
			comma,
			lexicalError,
			leftParen,
			intConst,
			lexicalError,
			variableName,
			dash,
			percent,
			colon,
			lexicalError,
			lexicalError,
			variableName,
			percent,
			star,
			rightAngle,
			lexicalError,
			comma,
			leftParen,
			lexicalError,
			rightParen,
			intConst,
			variableName,
			semiColon,
			dash,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			equalsSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"colon",
			"variableName",
			"rightParen",
			"semiColon",
			"rightSquare",
			"percent",
			"intConst",
			"lexicalError",
			"forwardSlash",
			"dash",
			"lexicalError",
			"intConst",
			"leftParen",
			"lexicalError",
			"intConst",
			"dash",
			"variableName",
			"lexicalError",
			"comma",
			"lexicalError",
			"leftParen",
			"intConst",
			"lexicalError",
			"variableName",
			"dash",
			"percent",
			"colon",
			"lexicalError",
			"lexicalError",
			"variableName",
			"percent",
			"star",
			"rightAngle",
			"lexicalError",
			"comma",
			"leftParen",
			"lexicalError",
			"rightParen",
			"intConst",
			"variableName",
			"semiColon",
			"dash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"equalsSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\125\000",
			"\066\000",
			"\105\000",
			"\154\153\126\000",
			"\072\000",
			"\152\145\124\165\000",
			"\051\000",
			"\073\000",
			"\135\000",
			"\045\000",
			"\064\066\000",
			"\041\000",
			"\057\000",
			"\055\000",
			"\110\000",
			"\071\000",
			"\050\000",
			"\174\000",
			"\062\000",
			"\055\000",
			"\161\104\123\000",
			"\174\000",
			"\054\000",
			"\041\000",
			"\050\000",
			"\071\000",
			"\127\000",
			"\152\124\000",
			"\055\000",
			"\045\000",
			"\072\000",
			"\056\000",
			"\112\000",
			"\146\116\000",
			"\045\000",
			"\052\000",
			"\076\000",
			"\120\000",
			"\054\000",
			"\050\000",
			"\174\000",
			"\051\000",
			"\062\000",
			"\164\000",
			"\073\000",
			"\055\000",
			"\106\000",
			"\174\000",
			"\112\000",
			"\112\000",
			"\154\070\000",
			"\075\000",
			"\000",
		};
		int _rubric_s = 53;
      sprintf(str,"'%s' Random String Failed\n","\x55\x36\x45\x6c\x6b\x56\x3a\x6a\x65\x54\x75\x29\x3b\x5d\x25\x34\x36\x21\x2f\x2d\x48\x39\x28\x7c\x32\x2d\x71\x44\x53\x7c\x2c\x21\x28\x39\x57\x6a\x54\x2d\x25\x3a\x2e\x4a\x66\x4e\x25\x2a\x3e\x50\x2c\x28\x7c\x29\x32\x74\x3b\x2d\x46\x7c\x4a\x4a\x6c\x38\x3d");
      TSM_ASSERT(str,checkAgainstRubric("\x55\x36\x45\x6c\x6b\x56\x3a\x6a\x65\x54\x75\x29\x3b\x5d\x25\x34\x36\x21\x2f\x2d\x48\x39\x28\x7c\x32\x2d\x71\x44\x53\x7c\x2c\x21\x28\x39\x57\x6a\x54\x2d\x25\x3a\x2e\x4a\x66\x4e\x25\x2a\x3e\x50\x2c\x28\x7c\x29\x32\x74\x3b\x2d\x46\x7c\x4a\x4a\x6c\x38\x3d",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_198( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			rightSquare,
			rightSquare,
			variableName,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"rightSquare",
			"rightSquare",
			"variableName",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\114\000",
			"\155\000",
			"\135\000",
			"\135\000",
			"\172\114\143\104\000",
			"\141\151\147\106\000",
			"\000",
		};
		int _rubric_s = 7;
      sprintf(str,"'%s' Random String Failed\n","\x4c\x6d\x5d\x5d\x7a\x4c\x63\x44\x0a\x61\x69\x67\x46");
      TSM_ASSERT(str,checkAgainstRubric("\x4c\x6d\x5d\x5d\x7a\x4c\x63\x44\x0a\x61\x69\x67\x46",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_199( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			backSlash,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			percent,
			leftParen,
			leftAngle,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"backSlash",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"percent",
			"leftParen",
			"leftAngle",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\110\000",
			"\116\000",
			"\151\166\000",
			"\134\000",
			"\047\000",
			"\147\131\064\065\104\165\131\116\152\000",
			"\174\000",
			"\071\000",
			"\045\000",
			"\050\000",
			"\074\000",
			"\176\000",
			"\172\152\060\066\130\107\000",
			"\041\000",
			"\140\000",
			"\063\000",
			"\122\000",
			"\000",
		};
		int _rubric_s = 18;
      sprintf(str,"'%s' Random String Failed\n","\x48\x4e\x69\x76\x5c\x27\x67\x59\x34\x35\x44\x75\x59\x4e\x6a\x7c\x39\x25\x28\x3c\x7e\x7a\x6a\x30\x36\x58\x47\x21\x60\x33\x0a\x52");
      TSM_ASSERT(str,checkAgainstRubric("\x48\x4e\x69\x76\x5c\x27\x67\x59\x34\x35\x44\x75\x59\x4e\x6a\x7c\x39\x25\x28\x3c\x7e\x7a\x6a\x30\x36\x58\x47\x21\x60\x33\x0a\x52",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_200( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			dash,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			dash,
			intConst,
			variableName,
			forwardSlash,
			variableName,
			lexicalError,
			variableName,
			comma,
			comma,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"dash",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"dash",
			"intConst",
			"variableName",
			"forwardSlash",
			"variableName",
			"lexicalError",
			"variableName",
			"comma",
			"comma",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\120\000",
			"\055\000",
			"\106\000",
			"\172\000",
			"\046\000",
			"\146\000",
			"\055\000",
			"\061\000",
			"\171\113\107\065\124\141\153\000",
			"\057\000",
			"\162\000",
			"\176\000",
			"\163\000",
			"\054\000",
			"\054\000",
			"\140\000",
			"\103\000",
			"\167\167\145\130\154\120\155\000",
			"\044\000",
			"\174\000",
			"\115\000",
			"\044\000",
			"\000",
		};
		int _rubric_s = 23;
      sprintf(str,"'%s' Random String Failed\n","\x0a\x50\x2d\x46\x7a\x26\x66\x2d\x31\x79\x4b\x47\x35\x54\x61\x6b\x2f\x72\x7e\x73\x2c\x2c\x20\x60\x43\x77\x77\x65\x58\x6c\x50\x6d\x24\x7c\x4d\x24");
      TSM_ASSERT(str,checkAgainstRubric("\x0a\x50\x2d\x46\x7a\x26\x66\x2d\x31\x79\x4b\x47\x35\x54\x61\x6b\x2f\x72\x7e\x73\x2c\x2c\x20\x60\x43\x77\x77\x65\x58\x6c\x50\x6d\x24\x7c\x4d\x24",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_201( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			forwardSlash,
			intConst,
			lexicalError,
			backSlash,
			variableName,
			backSlash,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			leftParen,
			variableName,
			leftParen,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			rightSquare,
			lexicalError,
			forwardSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			leftSquare,
			variableName,
			leftSquare,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"forwardSlash",
			"intConst",
			"lexicalError",
			"backSlash",
			"variableName",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"leftParen",
			"variableName",
			"leftParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightSquare",
			"lexicalError",
			"forwardSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftSquare",
			"variableName",
			"leftSquare",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\057\000",
			"\070\000",
			"\121\000",
			"\134\000",
			"\146\160\000",
			"\134\000",
			"\114\000",
			"\140\000",
			"\063\000",
			"\127\000",
			"\157\122\000",
			"\050\000",
			"\146\103\102\000",
			"\050\000",
			"\114\000",
			"\146\166\131\141\126\000",
			"\046\000",
			"\100\000",
			"\112\000",
			"\166\104\000",
			"\135\000",
			"\077\000",
			"\057\000",
			"\107\000",
			"\114\000",
			"\174\000",
			"\133\000",
			"\157\107\163\000",
			"\133\000",
			"\100\000",
			"\000",
		};
		int _rubric_s = 32;
      sprintf(str,"'%s' Random String Failed\n","\x29\x2f\x38\x51\x5c\x66\x70\x5c\x4c\x60\x33\x57\x6f\x52\x28\x66\x43\x42\x28\x4c\x66\x76\x59\x61\x56\x26\x40\x4a\x76\x44\x5d\x3f\x2f\x47\x4c\x7c\x5b\x6f\x47\x73\x5b\x40");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x2f\x38\x51\x5c\x66\x70\x5c\x4c\x60\x33\x57\x6f\x52\x28\x66\x43\x42\x28\x4c\x66\x76\x59\x61\x56\x26\x40\x4a\x76\x44\x5d\x3f\x2f\x47\x4c\x7c\x5b\x6f\x47\x73\x5b\x40",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_202( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			intConst,
			colon,
			lexicalError,
			leftAngle,
			lexicalError,
			leftParen,
			lexicalError,
			intConst,
			rightParen,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			leftAngle,
			variableName,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"intConst",
			"colon",
			"lexicalError",
			"leftAngle",
			"lexicalError",
			"leftParen",
			"lexicalError",
			"intConst",
			"rightParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"leftAngle",
			"variableName",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\061\070\132\103\137\106\000",
			"\062\060\000",
			"\072\000",
			"\111\000",
			"\074\000",
			"\043\000",
			"\050\000",
			"\123\000",
			"\070\000",
			"\051\000",
			"\123\000",
			"\144\127\113\154\146\143\160\000",
			"\047\000",
			"\131\000",
			"\047\000",
			"\041\000",
			"\042\000",
			"\166\110\166\000",
			"\044\000",
			"\074\000",
			"\143\115\064\154\000",
			"\077\000",
			"\172\000",
			"\000",
		};
		int _rubric_s = 24;
      sprintf(str,"'%s' Random String Failed\n","\x66\x31\x38\x5a\x43\x5f\x46\x09\x32\x30\x3a\x49\x3c\x23\x28\x53\x38\x29\x53\x64\x57\x4b\x6c\x66\x63\x70\x27\x59\x27\x21\x22\x76\x48\x76\x24\x3c\x63\x4d\x34\x6c\x3f\x7a");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x31\x38\x5a\x43\x5f\x46\x09\x32\x30\x3a\x49\x3c\x23\x28\x53\x38\x29\x53\x64\x57\x4b\x6c\x66\x63\x70\x27\x59\x27\x21\x22\x76\x48\x76\x24\x3c\x63\x4d\x34\x6c\x3f\x7a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_203( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			comma,
			lexicalError,
			variableName,
			dash,
			backSlash,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			forwardSlash,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"comma",
			"lexicalError",
			"variableName",
			"dash",
			"backSlash",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\117\000",
			"\153\120\106\172\000",
			"\056\000",
			"\044\000",
			"\054\000",
			"\104\000",
			"\142\000",
			"\055\000",
			"\134\000",
			"\104\000",
			"\104\000",
			"\151\000",
			"\136\000",
			"\151\122\111\116\124\000",
			"\057\000",
			"\155\070\131\132\124\105\120\071\000",
			"\000",
		};
		int _rubric_s = 18;
      sprintf(str,"'%s' Random String Failed\n","\x3c\x4f\x6b\x50\x46\x7a\x2e\x24\x2c\x44\x62\x2d\x5c\x44\x44\x69\x5e\x69\x52\x49\x4e\x54\x2f\x6d\x38\x59\x5a\x54\x45\x50\x39");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x4f\x6b\x50\x46\x7a\x2e\x24\x2c\x44\x62\x2d\x5c\x44\x44\x69\x5e\x69\x52\x49\x4e\x54\x2f\x6d\x38\x59\x5a\x54\x45\x50\x39",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_204( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			leftParen,
			lexicalError,
			variableName,
			forwardSlash,
			variableName,
			lexicalError,
			variableName,
			star,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			comma,
			intConst,
			variableName,
			lexicalError,
			colon,
			variableName,
			percent,
			leftSquare,
			lexicalError,
			lexicalError,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"leftParen",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"variableName",
			"lexicalError",
			"variableName",
			"star",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"comma",
			"intConst",
			"variableName",
			"lexicalError",
			"colon",
			"variableName",
			"percent",
			"leftSquare",
			"lexicalError",
			"lexicalError",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\044\000",
			"\050\000",
			"\115\000",
			"\167\000",
			"\057\000",
			"\145\000",
			"\077\000",
			"\160\112\105\126\102\115\142\145\127\064\000",
			"\052\000",
			"\142\063\000",
			"\102\000",
			"\174\000",
			"\146\000",
			"\046\000",
			"\111\000",
			"\127\000",
			"\153\146\000",
			"\077\000",
			"\155\000",
			"\136\000",
			"\113\000",
			"\054\000",
			"\066\000",
			"\164\000",
			"\056\000",
			"\072\000",
			"\152\000",
			"\045\000",
			"\133\000",
			"\176\000",
			"\046\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 33;
      sprintf(str,"'%s' Random String Failed\n","\x24\x28\x4d\x77\x2f\x65\x3f\x70\x4a\x45\x56\x42\x4d\x62\x65\x57\x34\x2a\x62\x33\x0a\x42\x7c\x66\x26\x49\x57\x6b\x66\x3f\x6d\x5e\x4b\x2c\x36\x74\x2e\x3a\x6a\x25\x5b\x7e\x26\x2b");
      TSM_ASSERT(str,checkAgainstRubric("\x24\x28\x4d\x77\x2f\x65\x3f\x70\x4a\x45\x56\x42\x4d\x62\x65\x57\x34\x2a\x62\x33\x0a\x42\x7c\x66\x26\x49\x57\x6b\x66\x3f\x6d\x5e\x4b\x2c\x36\x74\x2e\x3a\x6a\x25\x5b\x7e\x26\x2b",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_205( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			equalsSign,
			rightSquare,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			leftSquare,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			comma,
			variableName,
			leftAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"equalsSign",
			"rightSquare",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"leftSquare",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"comma",
			"variableName",
			"leftAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\101\000",
			"\113\000",
			"\144\111\114\000",
			"\044\000",
			"\157\151\112\000",
			"\075\000",
			"\135\000",
			"\116\000",
			"\112\000",
			"\062\000",
			"\136\000",
			"\141\162\154\000",
			"\133\000",
			"\116\000",
			"\070\000",
			"\130\000",
			"\170\000",
			"\077\000",
			"\044\000",
			"\157\154\116\117\000",
			"\054\000",
			"\143\121\000",
			"\074\000",
			"\000",
		};
		int _rubric_s = 24;
      sprintf(str,"'%s' Random String Failed\n","\x41\x4b\x64\x49\x4c\x24\x6f\x69\x4a\x3d\x5d\x4e\x4a\x32\x5e\x61\x72\x6c\x5b\x4e\x38\x58\x78\x3f\x0a\x24\x6f\x6c\x4e\x4f\x2c\x63\x51\x3c");
      TSM_ASSERT(str,checkAgainstRubric("\x41\x4b\x64\x49\x4c\x24\x6f\x69\x4a\x3d\x5d\x4e\x4a\x32\x5e\x61\x72\x6c\x5b\x4e\x38\x58\x78\x3f\x0a\x24\x6f\x6c\x4e\x4f\x2c\x63\x51\x3c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_206( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			forwardSlash,
			semiColon,
			variableName,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			backSlash,
			rightParen,
			lexicalError,
			variableName,
			lexicalError,
			equalsSign,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"forwardSlash",
			"semiColon",
			"variableName",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"backSlash",
			"rightParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"equalsSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\000",
			"\057\000",
			"\073\000",
			"\171\123\000",
			"\041\000",
			"\150\165\112\113\000",
			"\050\000",
			"\174\000",
			"\172\000",
			"\136\000",
			"\163\106\144\144\130\000",
			"\073\000",
			"\121\000",
			"\122\000",
			"\064\065\000",
			"\136\000",
			"\142\167\116\000",
			"\134\000",
			"\051\000",
			"\104\000",
			"\141\000",
			"\047\000",
			"\075\000",
			"\105\000",
			"\130\000",
			"\044\000",
			"\116\000",
			"\100\000",
			"\102\000",
			"\000",
		};
		int _rubric_s = 30;
      sprintf(str,"'%s' Random String Failed\n","\x6e\x2f\x3b\x79\x53\x21\x68\x75\x4a\x4b\x28\x7c\x7a\x5e\x73\x46\x64\x64\x58\x3b\x51\x52\x34\x35\x5e\x62\x77\x4e\x5c\x29\x44\x61\x27\x3d\x45\x58\x24\x4e\x40\x42");
      TSM_ASSERT(str,checkAgainstRubric("\x6e\x2f\x3b\x79\x53\x21\x68\x75\x4a\x4b\x28\x7c\x7a\x5e\x73\x46\x64\x64\x58\x3b\x51\x52\x34\x35\x5e\x62\x77\x4e\x5c\x29\x44\x61\x27\x3d\x45\x58\x24\x4e\x40\x42",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_207( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			percent,
			lexicalError,
			leftAngle,
			leftSquare,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"percent",
			"lexicalError",
			"leftAngle",
			"leftSquare",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\116\000",
			"\145\000",
			"\137\000",
			"\174\000",
			"\170\144\150\126\000",
			"\045\000",
			"\130\000",
			"\074\000",
			"\133\000",
			"\170\151\061\153\156\066\000",
			"\000",
		};
		int _rubric_s = 11;
      sprintf(str,"'%s' Random String Failed\n","\x4e\x65\x0a\x09\x5f\x7c\x78\x64\x68\x56\x25\x58\x3c\x5b\x78\x69\x31\x6b\x6e\x36");
      TSM_ASSERT(str,checkAgainstRubric("\x4e\x65\x0a\x09\x5f\x7c\x78\x64\x68\x56\x25\x58\x3c\x5b\x78\x69\x31\x6b\x6e\x36",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_208( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			star,
			variableName,
			rightParen,
			leftAngle,
			variableName,
			leftAngle,
			lexicalError,
			variableName,
			leftParen,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"star",
			"variableName",
			"rightParen",
			"leftAngle",
			"variableName",
			"leftAngle",
			"lexicalError",
			"variableName",
			"leftParen",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\000",
			"\117\000",
			"\052\000",
			"\167\103\105\066\110\000",
			"\051\000",
			"\074\000",
			"\153\145\121\000",
			"\074\000",
			"\112\000",
			"\145\124\000",
			"\050\000",
			"\150\000",
			"\043\000",
			"\000",
		};
		int _rubric_s = 14;
      sprintf(str,"'%s' Random String Failed\n","\x30\x4f\x2a\x77\x43\x45\x36\x48\x29\x3c\x6b\x65\x51\x3c\x4a\x65\x54\x28\x68\x23");
      TSM_ASSERT(str,checkAgainstRubric("\x30\x4f\x2a\x77\x43\x45\x36\x48\x29\x3c\x6b\x65\x51\x3c\x4a\x65\x54\x28\x68\x23",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_209( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			variableName,
			colon,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			variableName,
			colon,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"variableName",
			"colon",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"variableName",
			"colon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\065\000",
			"\161\102\106\000",
			"\072\000",
			"\126\000",
			"\060\000",
			"\141\000",
			"\047\000",
			"\144\147\124\060\000",
			"\072\000",
			"\000",
		};
		int _rubric_s = 11;
      sprintf(str,"'%s' Random String Failed\n","\x2e\x35\x71\x42\x46\x3a\x56\x30\x61\x27\x64\x67\x54\x30\x3a");
      TSM_ASSERT(str,checkAgainstRubric("\x2e\x35\x71\x42\x46\x3a\x56\x30\x61\x27\x64\x67\x54\x30\x3a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_210( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			colon,
			lexicalError,
			variableName,
			star,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			backSlash,
			variableName,
			lexicalError,
			plusSign,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			dash,
			variableName,
			comma,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"colon",
			"lexicalError",
			"variableName",
			"star",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"backSlash",
			"variableName",
			"lexicalError",
			"plusSign",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"dash",
			"variableName",
			"comma",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\101\000",
			"\124\000",
			"\072\000",
			"\106\000",
			"\162\104\000",
			"\052\000",
			"\157\142\000",
			"\077\000",
			"\046\000",
			"\151\000",
			"\073\000",
			"\111\000",
			"\134\000",
			"\171\000",
			"\077\000",
			"\053\000",
			"\170\170\127\125\067\067\120\142\116\164\141\000",
			"\042\000",
			"\100\000",
			"\151\000",
			"\077\000",
			"\055\000",
			"\142\152\064\111\000",
			"\054\000",
			"\112\000",
			"\117\000",
			"\163\155\066\162\000",
			"\000",
		};
		int _rubric_s = 28;
      sprintf(str,"'%s' Random String Failed\n","\x41\x54\x3a\x46\x72\x44\x2a\x6f\x62\x3f\x09\x26\x69\x3b\x49\x5c\x79\x3f\x2b\x78\x78\x57\x55\x37\x37\x50\x62\x4e\x74\x61\x22\x40\x69\x3f\x2d\x62\x6a\x34\x49\x2c\x4a\x4f\x73\x6d\x36\x72");
      TSM_ASSERT(str,checkAgainstRubric("\x41\x54\x3a\x46\x72\x44\x2a\x6f\x62\x3f\x09\x26\x69\x3b\x49\x5c\x79\x3f\x2b\x78\x78\x57\x55\x37\x37\x50\x62\x4e\x74\x61\x22\x40\x69\x3f\x2d\x62\x6a\x34\x49\x2c\x4a\x4f\x73\x6d\x36\x72",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_211( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			variableName,
			star,
			lexicalError,
			lexicalError,
			variableName,
			dash,
			lexicalError,
			variableName,
			leftAngle,
			variableName,
			forwardSlash,
			variableName,
			rightParen,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			comma,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"variableName",
			"star",
			"lexicalError",
			"lexicalError",
			"variableName",
			"dash",
			"lexicalError",
			"variableName",
			"leftAngle",
			"variableName",
			"forwardSlash",
			"variableName",
			"rightParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"comma",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\153\121\130\000",
			"\140\000",
			"\166\144\160\114\167\141\000",
			"\052\000",
			"\105\000",
			"\140\000",
			"\155\062\122\172\000",
			"\055\000",
			"\116\000",
			"\165\146\000",
			"\074\000",
			"\171\126\105\170\104\000",
			"\057\000",
			"\167\000",
			"\051\000",
			"\141\066\131\170\111\120\000",
			"\042\000",
			"\113\000",
			"\105\000",
			"\152\120\000",
			"\054\000",
			"\137\000",
			"\000",
		};
		int _rubric_s = 23;
      sprintf(str,"'%s' Random String Failed\n","\x6b\x51\x58\x60\x76\x64\x70\x4c\x77\x61\x2a\x45\x60\x6d\x32\x52\x7a\x2d\x4e\x75\x66\x3c\x79\x56\x45\x78\x44\x2f\x77\x29\x61\x36\x59\x78\x49\x50\x22\x4b\x45\x6a\x50\x2c\x5f");
      TSM_ASSERT(str,checkAgainstRubric("\x6b\x51\x58\x60\x76\x64\x70\x4c\x77\x61\x2a\x45\x60\x6d\x32\x52\x7a\x2d\x4e\x75\x66\x3c\x79\x56\x45\x78\x44\x2f\x77\x29\x61\x36\x59\x78\x49\x50\x22\x4b\x45\x6a\x50\x2c\x5f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_212( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			rightParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"rightParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\117\000",
			"\142\160\127\162\066\110\124\156\151\106\000",
			"\077\000",
			"\166\155\112\000",
			"\051\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Random String Failed\n","\x4f\x62\x70\x57\x72\x36\x48\x54\x6e\x69\x46\x3f\x76\x6d\x4a\x29");
      TSM_ASSERT(str,checkAgainstRubric("\x4f\x62\x70\x57\x72\x36\x48\x54\x6e\x69\x46\x3f\x76\x6d\x4a\x29",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_213( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			star,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			star,
			lexicalError,
			lexicalError,
			variableName,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"star",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"star",
			"lexicalError",
			"lexicalError",
			"variableName",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\124\000",
			"\141\144\067\143\126\126\145\124\151\064\060\000",
			"\052\000",
			"\044\000",
			"\172\146\000",
			"\077\000",
			"\102\000",
			"\103\000",
			"\124\000",
			"\120\000",
			"\106\000",
			"\052\000",
			"\122\000",
			"\044\000",
			"\143\000",
			"\142\162\066\000",
			"\000",
		};
		int _rubric_s = 17;
      sprintf(str,"'%s' Random String Failed\n","\x54\x61\x64\x37\x63\x56\x56\x65\x54\x69\x34\x30\x2a\x24\x7a\x66\x3f\x42\x43\x54\x50\x46\x2a\x52\x24\x63\x09\x62\x72\x36");
      TSM_ASSERT(str,checkAgainstRubric("\x54\x61\x64\x37\x63\x56\x56\x65\x54\x69\x34\x30\x2a\x24\x7a\x66\x3f\x42\x43\x54\x50\x46\x2a\x52\x24\x63\x09\x62\x72\x36",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_214( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			leftParen,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"leftParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\170\117\147\143\065\160\000",
			"\050\000",
			"\165\124\062\000",
			"\047\000",
			"\105\000",
			"\105\000",
			"\103\000",
			"\131\000",
			"\156\123\117\070\172\165\172\115\125\000",
			"\056\000",
			"\167\000",
			"\146\071\130\071\111\172\067\160\071\151\000",
			"\046\000",
			"\060\000",
			"\123\000",
			"\164\062\067\102\115\000",
			"\000",
		};
		int _rubric_s = 17;
      sprintf(str,"'%s' Random String Failed\n","\x70\x78\x4f\x67\x63\x35\x70\x28\x75\x54\x32\x27\x45\x45\x43\x59\x6e\x53\x4f\x38\x7a\x75\x7a\x4d\x55\x2e\x77\x0a\x66\x39\x58\x39\x49\x7a\x37\x70\x39\x69\x26\x30\x53\x74\x32\x37\x42\x4d");
      TSM_ASSERT(str,checkAgainstRubric("\x70\x78\x4f\x67\x63\x35\x70\x28\x75\x54\x32\x27\x45\x45\x43\x59\x6e\x53\x4f\x38\x7a\x75\x7a\x4d\x55\x2e\x77\x0a\x66\x39\x58\x39\x49\x7a\x37\x70\x39\x69\x26\x30\x53\x74\x32\x37\x42\x4d",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_215( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			rightParen,
			variableName,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			lexicalError,
			dash,
			plusSign,
			variableName,
			lexicalError,
			variableName,
			leftParen,
			rightSquare,
			variableName,
			lexicalError,
			rightParen,
			variableName,
			rightSquare,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"rightParen",
			"variableName",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"lexicalError",
			"dash",
			"plusSign",
			"variableName",
			"lexicalError",
			"variableName",
			"leftParen",
			"rightSquare",
			"variableName",
			"lexicalError",
			"rightParen",
			"variableName",
			"rightSquare",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\051\000",
			"\160\000",
			"\044\000",
			"\071\000",
			"\147\104\000",
			"\056\000",
			"\107\000",
			"\055\000",
			"\053\000",
			"\165\070\147\000",
			"\140\000",
			"\145\101\147\000",
			"\050\000",
			"\135\000",
			"\150\152\162\160\114\000",
			"\140\000",
			"\051\000",
			"\167\063\000",
			"\135\000",
			"\041\000",
			"\172\000",
			"\000",
		};
		int _rubric_s = 22;
      sprintf(str,"'%s' Random String Failed\n","\x29\x70\x24\x39\x67\x44\x2e\x47\x2d\x2b\x75\x38\x67\x60\x65\x41\x67\x09\x28\x5d\x68\x6a\x72\x70\x4c\x60\x29\x77\x33\x5d\x21\x7a");
      TSM_ASSERT(str,checkAgainstRubric("\x29\x70\x24\x39\x67\x44\x2e\x47\x2d\x2b\x75\x38\x67\x60\x65\x41\x67\x09\x28\x5d\x68\x6a\x72\x70\x4c\x60\x29\x77\x33\x5d\x21\x7a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_216( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			lexicalError,
			rightSquare,
			forwardSlash,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			forwardSlash,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftSquare,
			intConst,
			backSlash,
			lexicalError,
			rightParen,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			forwardSlash,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			plusSign,
			variableName,
			rightSquare,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"lexicalError",
			"rightSquare",
			"forwardSlash",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftSquare",
			"intConst",
			"backSlash",
			"lexicalError",
			"rightParen",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"plusSign",
			"variableName",
			"rightSquare",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\000",
			"\122\000",
			"\101\000",
			"\135\000",
			"\057\000",
			"\061\000",
			"\121\000",
			"\115\000",
			"\162\000",
			"\057\000",
			"\162\164\101\131\130\000",
			"\056\000",
			"\110\000",
			"\176\000",
			"\121\000",
			"\172\000",
			"\133\000",
			"\070\000",
			"\134\000",
			"\104\000",
			"\051\000",
			"\063\000",
			"\126\000",
			"\111\000",
			"\161\000",
			"\174\000",
			"\122\000",
			"\110\000",
			"\127\000",
			"\171\000",
			"\057\000",
			"\131\000",
			"\070\000",
			"\122\000",
			"\101\000",
			"\160\000",
			"\041\000",
			"\053\000",
			"\161\157\165\000",
			"\135\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 42;
      sprintf(str,"'%s' Random String Failed\n","\x33\x52\x41\x5d\x2f\x31\x51\x4d\x72\x2f\x72\x74\x41\x59\x58\x2e\x48\x7e\x51\x7a\x5b\x38\x5c\x44\x29\x0a\x33\x56\x20\x49\x71\x7c\x52\x48\x57\x79\x2f\x59\x38\x52\x41\x70\x21\x2b\x71\x6f\x75\x5d\x2e");
      TSM_ASSERT(str,checkAgainstRubric("\x33\x52\x41\x5d\x2f\x31\x51\x4d\x72\x2f\x72\x74\x41\x59\x58\x2e\x48\x7e\x51\x7a\x5b\x38\x5c\x44\x29\x0a\x33\x56\x20\x49\x71\x7c\x52\x48\x57\x79\x2f\x59\x38\x52\x41\x70\x21\x2b\x71\x6f\x75\x5d\x2e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_217( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			rightParen,
			lexicalError,
			lexicalError,
			variableName,
			leftSquare,
			intConst,
			equalsSign,
			variableName,
			leftParen,
			lexicalError,
			variableName,
			lexicalError,
			leftParen,
			dash,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			semiColon,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftSquare",
			"intConst",
			"equalsSign",
			"variableName",
			"leftParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"leftParen",
			"dash",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"semiColon",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\000",
			"\051\000",
			"\174\000",
			"\106\000",
			"\157\000",
			"\133\000",
			"\070\000",
			"\075\000",
			"\170\000",
			"\050\000",
			"\140\000",
			"\171\115\105\000",
			"\044\000",
			"\050\000",
			"\055\000",
			"\043\000",
			"\043\000",
			"\154\000",
			"\046\000",
			"\157\117\121\115\163\000",
			"\113\000",
			"\073\000",
			"\106\000",
			"\155\000",
			"\000",
		};
		int _rubric_s = 25;
      sprintf(str,"'%s' Random String Failed\n","\x49\x29\x0a\x7c\x46\x6f\x5b\x38\x3d\x78\x28\x60\x79\x4d\x45\x24\x28\x2d\x23\x23\x6c\x26\x6f\x4f\x51\x4d\x73\x0a\x4b\x3b\x46\x6d");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x29\x0a\x7c\x46\x6f\x5b\x38\x3d\x78\x28\x60\x79\x4d\x45\x24\x28\x2d\x23\x23\x6c\x26\x6f\x4f\x51\x4d\x73\x0a\x4b\x3b\x46\x6d",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_218( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			equalsSign,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			rightAngle,
			variableName,
			leftSquare,
			variableName,
			rightParen,
			lexicalError,
			variableName,
			leftSquare,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"equalsSign",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightAngle",
			"variableName",
			"leftSquare",
			"variableName",
			"rightParen",
			"lexicalError",
			"variableName",
			"leftSquare",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\161\000",
			"\047\000",
			"\122\000",
			"\147\000",
			"\075\000",
			"\163\000",
			"\136\000",
			"\123\000",
			"\151\142\000",
			"\076\000",
			"\162\171\000",
			"\133\000",
			"\154\144\000",
			"\051\000",
			"\113\000",
			"\167\000",
			"\133\000",
			"\062\000",
			"\127\000",
			"\105\000",
			"\153\150\000",
			"\043\000",
			"\000",
		};
		int _rubric_s = 23;
      sprintf(str,"'%s' Random String Failed\n","\x0a\x71\x27\x52\x67\x3d\x73\x5e\x53\x69\x62\x3e\x72\x79\x5b\x6c\x64\x29\x4b\x77\x5b\x32\x57\x45\x6b\x68\x23");
      TSM_ASSERT(str,checkAgainstRubric("\x0a\x71\x27\x52\x67\x3d\x73\x5e\x53\x69\x62\x3e\x72\x79\x5b\x6c\x64\x29\x4b\x77\x5b\x32\x57\x45\x6b\x68\x23",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_219( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			backSlash,
			lexicalError,
			intConst,
			leftSquare,
			variableName,
			leftParen,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			equalsSign,
			variableName,
			lexicalError,
			intConst,
			variableName,
			rightAngle,
			lexicalError,
			lexicalError,
			variableName,
			star,
			lexicalError,
			intConst,
			lexicalError,
			dash,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			intConst,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"backSlash",
			"lexicalError",
			"intConst",
			"leftSquare",
			"variableName",
			"leftParen",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"equalsSign",
			"variableName",
			"lexicalError",
			"intConst",
			"variableName",
			"rightAngle",
			"lexicalError",
			"lexicalError",
			"variableName",
			"star",
			"lexicalError",
			"intConst",
			"lexicalError",
			"dash",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"intConst",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\112\000",
			"\134\000",
			"\137\000",
			"\064\000",
			"\133\000",
			"\164\000",
			"\050\000",
			"\120\000",
			"\060\000",
			"\137\000",
			"\164\000",
			"\075\000",
			"\163\000",
			"\176\000",
			"\067\000",
			"\155\000",
			"\076\000",
			"\137\000",
			"\121\000",
			"\160\000",
			"\052\000",
			"\121\000",
			"\071\000",
			"\116\000",
			"\055\000",
			"\070\000",
			"\041\000",
			"\103\000",
			"\056\000",
			"\165\000",
			"\050\000",
			"\066\000",
			"\166\000",
			"\042\000",
			"\000",
		};
		int _rubric_s = 35;
      sprintf(str,"'%s' Random String Failed\n","\x4a\x5c\x5f\x34\x5b\x74\x28\x50\x30\x5f\x74\x3d\x73\x7e\x37\x6d\x3e\x5f\x51\x0a\x70\x2a\x51\x39\x4e\x2d\x38\x0a\x21\x43\x2e\x75\x28\x36\x76\x22");
      TSM_ASSERT(str,checkAgainstRubric("\x4a\x5c\x5f\x34\x5b\x74\x28\x50\x30\x5f\x74\x3d\x73\x7e\x37\x6d\x3e\x5f\x51\x0a\x70\x2a\x51\x39\x4e\x2d\x38\x0a\x21\x43\x2e\x75\x28\x36\x76\x22",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_220( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			equalsSign,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			lexicalError,
			variableName,
			leftAngle,
			rightParen,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			backSlash,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"equalsSign",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftAngle",
			"rightParen",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"backSlash",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\144\062\063\141\000",
			"\174\000",
			"\110\000",
			"\075\000",
			"\160\000",
			"\046\000",
			"\070\000",
			"\102\000",
			"\162\067\103\107\164\131\000",
			"\050\000",
			"\114\000",
			"\117\000",
			"\150\113\060\061\103\155\000",
			"\074\000",
			"\051\000",
			"\160\000",
			"\046\000",
			"\142\000",
			"\174\000",
			"\151\167\000",
			"\134\000",
			"\154\000",
			"\000",
		};
		int _rubric_s = 23;
      sprintf(str,"'%s' Random String Failed\n","\x64\x32\x33\x61\x7c\x48\x3d\x70\x26\x38\x0a\x42\x72\x37\x43\x47\x74\x59\x28\x4c\x4f\x68\x4b\x30\x31\x43\x6d\x3c\x29\x70\x26\x62\x7c\x69\x77\x5c\x20\x6c");
      TSM_ASSERT(str,checkAgainstRubric("\x64\x32\x33\x61\x7c\x48\x3d\x70\x26\x38\x0a\x42\x72\x37\x43\x47\x74\x59\x28\x4c\x4f\x68\x4b\x30\x31\x43\x6d\x3c\x29\x70\x26\x62\x7c\x69\x77\x5c\x20\x6c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_221( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			backSlash,
			lexicalError,
			colon,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"backSlash",
			"lexicalError",
			"colon",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\104\000",
			"\126\000",
			"\164\000",
			"\134\000",
			"\105\000",
			"\072\000",
			"\124\000",
			"\121\000",
			"\071\000",
			"\111\000",
			"\115\000",
			"\105\000",
			"\156\170\067\167\154\060\000",
			"\000",
		};
		int _rubric_s = 14;
      sprintf(str,"'%s' Random String Failed\n","\x44\x56\x74\x5c\x45\x3a\x54\x51\x39\x49\x4d\x45\x6e\x78\x37\x77\x6c\x30");
      TSM_ASSERT(str,checkAgainstRubric("\x44\x56\x74\x5c\x45\x3a\x54\x51\x39\x49\x4d\x45\x6e\x78\x37\x77\x6c\x30",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_222( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			equalsSign,
			lexicalError,
			lexicalError,
			rightSquare,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			rightParen,
			lexicalError,
			lexicalError,
			variableName,
			colon,
			lexicalError,
			rightParen,
			variableName,
			rightParen,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			leftSquare,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"equalsSign",
			"lexicalError",
			"lexicalError",
			"rightSquare",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"colon",
			"lexicalError",
			"rightParen",
			"variableName",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftSquare",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\000",
			"\075\000",
			"\105\000",
			"\125\000",
			"\135\000",
			"\124\000",
			"\144\000",
			"\077\000",
			"\047\000",
			"\106\000",
			"\063\000",
			"\152\000",
			"\051\000",
			"\105\000",
			"\126\000",
			"\142\163\156\000",
			"\072\000",
			"\043\000",
			"\051\000",
			"\146\150\106\103\122\066\000",
			"\051\000",
			"\136\000",
			"\122\000",
			"\103\000",
			"\131\000",
			"\165\171\137\115\000",
			"\133\000",
			"\163\000",
			"\000",
		};
		int _rubric_s = 29;
      sprintf(str,"'%s' Random String Failed\n","\x66\x3d\x45\x55\x5d\x54\x64\x3f\x27\x46\x33\x6a\x29\x45\x56\x62\x73\x6e\x3a\x23\x29\x66\x68\x46\x43\x52\x36\x29\x5e\x52\x43\x59\x75\x79\x5f\x4d\x5b\x73");
      TSM_ASSERT(str,checkAgainstRubric("\x66\x3d\x45\x55\x5d\x54\x64\x3f\x27\x46\x33\x6a\x29\x45\x56\x62\x73\x6e\x3a\x23\x29\x66\x68\x46\x43\x52\x36\x29\x5e\x52\x43\x59\x75\x79\x5f\x4d\x5b\x73",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_223( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			star,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"star",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\052\000",
			"\067\065\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","\x2a\x37\x35");
      TSM_ASSERT(str,checkAgainstRubric("\x2a\x37\x35",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_224( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftAngle,
			lexicalError,
			variableName,
			lexicalError,
			rightAngle,
			lexicalError,
			lexicalError,
			colon,
			lexicalError,
			lexicalError,
			intConst,
			percent,
			variableName,
			rightAngle,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftAngle",
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightAngle",
			"lexicalError",
			"lexicalError",
			"colon",
			"lexicalError",
			"lexicalError",
			"intConst",
			"percent",
			"variableName",
			"rightAngle",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\074\000",
			"\102\000",
			"\171\000",
			"\140\000",
			"\076\000",
			"\106\000",
			"\107\000",
			"\072\000",
			"\125\000",
			"\041\000",
			"\067\000",
			"\045\000",
			"\163\000",
			"\076\000",
			"\000",
		};
		int _rubric_s = 15;
      sprintf(str,"'%s' Random String Failed\n","\x3c\x42\x79\x60\x3e\x46\x47\x20\x3a\x55\x09\x21\x37\x25\x73\x3e");
      TSM_ASSERT(str,checkAgainstRubric("\x3c\x42\x79\x60\x3e\x46\x47\x20\x3a\x55\x09\x21\x37\x25\x73\x3e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_225( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			percent,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			comma,
			lexicalError,
			plusSign,
			lexicalError,
			leftSquare,
			variableName,
			semiColon,
			lexicalError,
			variableName,
			semiColon,
			variableName,
			lexicalError,
			variableName,
			forwardSlash,
			lexicalError,
			lexicalError,
			lexicalError,
			forwardSlash,
			semiColon,
			rightSquare,
			variableName,
			leftSquare,
			rightAngle,
			variableName,
			colon,
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"percent",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"comma",
			"lexicalError",
			"plusSign",
			"lexicalError",
			"leftSquare",
			"variableName",
			"semiColon",
			"lexicalError",
			"variableName",
			"semiColon",
			"variableName",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"forwardSlash",
			"semiColon",
			"rightSquare",
			"variableName",
			"leftSquare",
			"rightAngle",
			"variableName",
			"colon",
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\042\000",
			"\045\000",
			"\067\000",
			"\132\000",
			"\136\000",
			"\137\000",
			"\070\000",
			"\043\000",
			"\046\000",
			"\171\172\144\144\000",
			"\054\000",
			"\117\000",
			"\053\000",
			"\113\000",
			"\133\000",
			"\163\067\120\000",
			"\073\000",
			"\123\000",
			"\146\000",
			"\073\000",
			"\154\120\000",
			"\136\000",
			"\164\153\000",
			"\057\000",
			"\125\000",
			"\124\000",
			"\047\000",
			"\057\000",
			"\073\000",
			"\135\000",
			"\166\163\124\000",
			"\133\000",
			"\076\000",
			"\170\144\105\143\161\165\167\123\064\122\000",
			"\072\000",
			"\061\000",
			"\137\000",
			"\142\000",
			"\000",
		};
		int _rubric_s = 39;
      sprintf(str,"'%s' Random String Failed\n","\x22\x25\x37\x5a\x5e\x5f\x38\x23\x26\x79\x7a\x64\x64\x2c\x4f\x2b\x4b\x5b\x73\x37\x50\x3b\x53\x66\x0a\x3b\x6c\x50\x5e\x74\x6b\x2f\x55\x54\x27\x2f\x3b\x5d\x76\x73\x54\x5b\x3e\x78\x64\x45\x63\x71\x75\x77\x53\x34\x52\x3a\x31\x5f\x62");
      TSM_ASSERT(str,checkAgainstRubric("\x22\x25\x37\x5a\x5e\x5f\x38\x23\x26\x79\x7a\x64\x64\x2c\x4f\x2b\x4b\x5b\x73\x37\x50\x3b\x53\x66\x0a\x3b\x6c\x50\x5e\x74\x6b\x2f\x55\x54\x27\x2f\x3b\x5d\x76\x73\x54\x5b\x3e\x78\x64\x45\x63\x71\x75\x77\x53\x34\x52\x3a\x31\x5f\x62",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_226( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			rightAngle,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			semiColon,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"rightAngle",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"semiColon",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\143\000",
			"\136\000",
			"\160\167\146\154\160\000",
			"\100\000",
			"\136\000",
			"\076\000",
			"\115\000",
			"\120\000",
			"\071\000",
			"\111\000",
			"\102\000",
			"\046\000",
			"\073\000",
			"\156\000",
			"\176\000",
			"\110\000",
			"\176\000",
			"\157\163\156\123\000",
			"\051\000",
			"\046\000",
			"\000",
		};
		int _rubric_s = 21;
      sprintf(str,"'%s' Random String Failed\n","\x63\x5e\x70\x77\x66\x6c\x70\x40\x5e\x3e\x4d\x50\x39\x49\x42\x26\x3b\x6e\x7e\x48\x7e\x6f\x73\x6e\x53\x29\x26");
      TSM_ASSERT(str,checkAgainstRubric("\x63\x5e\x70\x77\x66\x6c\x70\x40\x5e\x3e\x4d\x50\x39\x49\x42\x26\x3b\x6e\x7e\x48\x7e\x6f\x73\x6e\x53\x29\x26",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_227( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			leftSquare,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			forwardSlash,
			lexicalError,
			leftParen,
			comma,
			intConst,
			semiColon,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			intConst,
			variableName,
			leftParen,
			lexicalError,
			lexicalError,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"leftSquare",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"lexicalError",
			"leftParen",
			"comma",
			"intConst",
			"semiColon",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"intConst",
			"variableName",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\112\000",
			"\153\115\127\000",
			"\133\000",
			"\150\060\000",
			"\136\000",
			"\162\000",
			"\041\000",
			"\077\000",
			"\105\000",
			"\147\000",
			"\057\000",
			"\102\000",
			"\050\000",
			"\054\000",
			"\062\000",
			"\073\000",
			"\113\000",
			"\112\000",
			"\174\000",
			"\162\000",
			"\060\000",
			"\154\000",
			"\050\000",
			"\102\000",
			"\122\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 27;
      sprintf(str,"'%s' Random String Failed\n","\x4a\x6b\x4d\x57\x5b\x68\x30\x5e\x72\x21\x3f\x45\x67\x2f\x42\x28\x2c\x32\x3b\x4b\x4a\x7c\x72\x0a\x30\x6c\x28\x42\x52\x3b");
      TSM_ASSERT(str,checkAgainstRubric("\x4a\x6b\x4d\x57\x5b\x68\x30\x5e\x72\x21\x3f\x45\x67\x2f\x42\x28\x2c\x32\x3b\x4b\x4a\x7c\x72\x0a\x30\x6c\x28\x42\x52\x3b",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_228( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			semiColon,
			variableName,
			colon,
			lexicalError,
			variableName,
			forwardSlash,
			variableName,
			leftParen,
			leftParen,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			leftSquare,
			lexicalError,
			rightParen,
			semiColon,
			lexicalError,
			intConst,
			leftParen,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"semiColon",
			"variableName",
			"colon",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"variableName",
			"leftParen",
			"leftParen",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftSquare",
			"lexicalError",
			"rightParen",
			"semiColon",
			"lexicalError",
			"intConst",
			"leftParen",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\000",
			"\073\000",
			"\150\170\160\000",
			"\072\000",
			"\121\000",
			"\162\000",
			"\057\000",
			"\153\064\000",
			"\050\000",
			"\050\000",
			"\161\000",
			"\107\000",
			"\103\000",
			"\153\000",
			"\133\000",
			"\127\000",
			"\051\000",
			"\073\000",
			"\110\000",
			"\065\000",
			"\050\000",
			"\150\156\150\101\161\000",
			"\000",
		};
		int _rubric_s = 23;
      sprintf(str,"'%s' Random String Failed\n","\x49\x3b\x68\x78\x70\x3a\x51\x72\x20\x2f\x6b\x34\x28\x28\x71\x0a\x47\x43\x6b\x5b\x57\x29\x3b\x48\x35\x28\x68\x6e\x68\x41\x71");
      TSM_ASSERT(str,checkAgainstRubric("\x49\x3b\x68\x78\x70\x3a\x51\x72\x20\x2f\x6b\x34\x28\x28\x71\x0a\x47\x43\x6b\x5b\x57\x29\x3b\x48\x35\x28\x68\x6e\x68\x41\x71",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_229( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			equalsSign,
			variableName,
			colon,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"equalsSign",
			"variableName",
			"colon",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\000",
			"\174\000",
			"\117\000",
			"\070\000",
			"\155\141\167\000",
			"\075\000",
			"\146\127\000",
			"\072\000",
			"\042\000",
			"\105\000",
			"\147\062\170\165\105\000",
			"\174\000",
			"\000",
		};
		int _rubric_s = 13;
      sprintf(str,"'%s' Random String Failed\n","\x65\x7c\x4f\x38\x20\x6d\x61\x77\x3d\x66\x57\x3a\x22\x45\x67\x32\x78\x75\x45\x7c");
      TSM_ASSERT(str,checkAgainstRubric("\x65\x7c\x4f\x38\x20\x6d\x61\x77\x3d\x66\x57\x3a\x22\x45\x67\x32\x78\x75\x45\x7c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_230( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			comma,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"comma",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\111\062\150\071\114\000",
			"\054\000",
			"\044\000",
			"\043\000",
			"\110\000",
			"\165\172\000",
			"\000",
		};
		int _rubric_s = 7;
      sprintf(str,"'%s' Random String Failed\n","\x77\x49\x32\x68\x39\x4c\x2c\x24\x23\x48\x75\x7a");
      TSM_ASSERT(str,checkAgainstRubric("\x77\x49\x32\x68\x39\x4c\x2c\x24\x23\x48\x75\x7a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_231( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			rightAngle,
			lexicalError,
			lexicalError,
			intConst,
			forwardSlash,
			percent,
			variableName,
			leftParen,
			variableName,
			lexicalError,
			variableName,
			intConst,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			star,
			star,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			rightParen,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightAngle",
			"lexicalError",
			"lexicalError",
			"intConst",
			"forwardSlash",
			"percent",
			"variableName",
			"leftParen",
			"variableName",
			"lexicalError",
			"variableName",
			"intConst",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"star",
			"star",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"rightParen",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\143\102\000",
			"\174\000",
			"\131\000",
			"\112\000",
			"\131\000",
			"\146\000",
			"\174\000",
			"\076\000",
			"\132\000",
			"\100\000",
			"\064\000",
			"\057\000",
			"\045\000",
			"\160\063\061\000",
			"\050\000",
			"\146\115\000",
			"\044\000",
			"\170\000",
			"\061\000",
			"\101\000",
			"\174\000",
			"\067\000",
			"\106\000",
			"\137\000",
			"\163\137\071\132\167\160\165\000",
			"\052\000",
			"\052\000",
			"\062\000",
			"\126\000",
			"\077\000",
			"\077\000",
			"\150\165\152\000",
			"\051\000",
			"\115\000",
			"\143\000",
			"\044\000",
			"\047\000",
			"\166\117\000",
			"\073\000",
			"\000",
		};
		int _rubric_s = 40;
      sprintf(str,"'%s' Random String Failed\n","\x63\x42\x7c\x59\x4a\x59\x66\x7c\x3e\x0a\x5a\x40\x34\x2f\x25\x70\x33\x31\x28\x66\x4d\x24\x78\x20\x31\x41\x7c\x37\x46\x5f\x73\x5f\x39\x5a\x77\x70\x75\x2a\x2a\x32\x56\x3f\x3f\x68\x75\x6a\x29\x4d\x63\x24\x27\x76\x4f\x0a\x3b");
      TSM_ASSERT(str,checkAgainstRubric("\x63\x42\x7c\x59\x4a\x59\x66\x7c\x3e\x0a\x5a\x40\x34\x2f\x25\x70\x33\x31\x28\x66\x4d\x24\x78\x20\x31\x41\x7c\x37\x46\x5f\x73\x5f\x39\x5a\x77\x70\x75\x2a\x2a\x32\x56\x3f\x3f\x68\x75\x6a\x29\x4d\x63\x24\x27\x76\x4f\x0a\x3b",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_232( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			star,
			rightParen,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"star",
			"rightParen",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\112\000",
			"\052\000",
			"\051\000",
			"\137\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","\x4a\x2a\x29\x5f");
      TSM_ASSERT(str,checkAgainstRubric("\x4a\x2a\x29\x5f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_233( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			percent,
			percent,
			lexicalError,
			lexicalError,
			rightAngle,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			backSlash,
			lexicalError,
			variableName,
			leftParen,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"percent",
			"percent",
			"lexicalError",
			"lexicalError",
			"rightAngle",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"backSlash",
			"lexicalError",
			"variableName",
			"leftParen",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\121\000",
			"\112\000",
			"\141\164\172\000",
			"\045\000",
			"\045\000",
			"\126\000",
			"\137\000",
			"\076\000",
			"\150\171\000",
			"\176\000",
			"\164\104\161\164\000",
			"\043\000",
			"\144\000",
			"\140\000",
			"\154\102\000",
			"\134\000",
			"\120\000",
			"\146\172\000",
			"\050\000",
			"\147\000",
			"\000",
		};
		int _rubric_s = 21;
      sprintf(str,"'%s' Random String Failed\n","\x51\x4a\x61\x74\x7a\x25\x25\x56\x5f\x3e\x68\x79\x7e\x74\x44\x71\x74\x23\x64\x60\x6c\x42\x5c\x50\x66\x7a\x28\x67");
      TSM_ASSERT(str,checkAgainstRubric("\x51\x4a\x61\x74\x7a\x25\x25\x56\x5f\x3e\x68\x79\x7e\x74\x44\x71\x74\x23\x64\x60\x6c\x42\x5c\x50\x66\x7a\x28\x67",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_234( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			equalsSign,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			percent,
			variableName,
			rightParen,
			rightSquare,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"equalsSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"percent",
			"variableName",
			"rightParen",
			"rightSquare",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\172\160\117\156\123\143\132\102\000",
			"\140\000",
			"\100\000",
			"\131\000",
			"\075\000",
			"\130\000",
			"\101\000",
			"\103\000",
			"\154\111\142\000",
			"\174\000",
			"\160\000",
			"\045\000",
			"\144\061\000",
			"\051\000",
			"\135\000",
			"\110\000",
			"\000",
		};
		int _rubric_s = 17;
      sprintf(str,"'%s' Random String Failed\n","\x7a\x70\x4f\x6e\x53\x63\x5a\x42\x20\x0a\x60\x40\x59\x3d\x58\x41\x43\x6c\x49\x62\x7c\x70\x25\x64\x31\x29\x5d\x48");
      TSM_ASSERT(str,checkAgainstRubric("\x7a\x70\x4f\x6e\x53\x63\x5a\x42\x20\x0a\x60\x40\x59\x3d\x58\x41\x43\x6c\x49\x62\x7c\x70\x25\x64\x31\x29\x5d\x48",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_235( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			leftSquare,
			intConst,
			lexicalError,
			variableName,
			equalsSign,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			rightParen,
			lexicalError,
			lexicalError,
			leftParen,
			variableName,
			lexicalError,
			variableName,
			colon,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"leftSquare",
			"intConst",
			"lexicalError",
			"variableName",
			"equalsSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"variableName",
			"lexicalError",
			"variableName",
			"colon",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\133\000",
			"\061\000",
			"\174\000",
			"\157\102\141\130\151\000",
			"\075\000",
			"\176\000",
			"\102\000",
			"\125\000",
			"\143\067\000",
			"\136\000",
			"\167\000",
			"\043\000",
			"\172\070\164\064\117\161\000",
			"\046\000",
			"\051\000",
			"\124\000",
			"\113\000",
			"\050\000",
			"\141\067\145\153\000",
			"\041\000",
			"\166\147\000",
			"\072\000",
			"\146\102\105\127\000",
			"\000",
		};
		int _rubric_s = 24;
      sprintf(str,"'%s' Random String Failed\n","\x5b\x31\x7c\x6f\x42\x61\x58\x69\x3d\x7e\x42\x55\x63\x37\x5e\x77\x23\x7a\x38\x74\x34\x4f\x71\x26\x29\x54\x4b\x28\x61\x37\x65\x6b\x0a\x21\x76\x67\x3a\x0a\x66\x42\x45\x57");
      TSM_ASSERT(str,checkAgainstRubric("\x5b\x31\x7c\x6f\x42\x61\x58\x69\x3d\x7e\x42\x55\x63\x37\x5e\x77\x23\x7a\x38\x74\x34\x4f\x71\x26\x29\x54\x4b\x28\x61\x37\x65\x6b\x0a\x21\x76\x67\x3a\x0a\x66\x42\x45\x57",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_236( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			leftParen,
			lexicalError,
			variableName,
			stringConst,
			lexicalError,
			leftParen,
			variableName,
			dash,
			variableName,
			star,
			variableName,
			lexicalError,
			rightParen,
			variableName,
			leftSquare,
			leftParen,
			rightParen,
			variableName,
			backSlash,
			lexicalError,
			variableName,
			star,
			intConst,
			variableName,
			lexicalError,
			intConst,
			variableName,
			leftParen,
			lexicalError,
			lexicalError,
			variableName,
			leftParen,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"leftParen",
			"lexicalError",
			"variableName",
			"stringConst",
			"lexicalError",
			"leftParen",
			"variableName",
			"dash",
			"variableName",
			"star",
			"variableName",
			"lexicalError",
			"rightParen",
			"variableName",
			"leftSquare",
			"leftParen",
			"rightParen",
			"variableName",
			"backSlash",
			"lexicalError",
			"variableName",
			"star",
			"intConst",
			"variableName",
			"lexicalError",
			"intConst",
			"variableName",
			"leftParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"leftParen",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\126\000",
			"\144\061\104\000",
			"\050\000",
			"\112\000",
			"\147\150\165\000",
			"\042\137\137\106\132\156\154\107\122\071\064\071\077\042\000",
			"\136\000",
			"\050\000",
			"\164\000",
			"\055\000",
			"\151\000",
			"\052\000",
			"\156\000",
			"\043\000",
			"\051\000",
			"\170\106\000",
			"\133\000",
			"\050\000",
			"\051\000",
			"\145\000",
			"\134\000",
			"\137\000",
			"\141\163\147\000",
			"\052\000",
			"\063\000",
			"\162\120\131\000",
			"\056\000",
			"\063\000",
			"\154\170\000",
			"\050\000",
			"\126\000",
			"\104\000",
			"\163\000",
			"\050\000",
			"\000",
		};
		int _rubric_s = 35;
      sprintf(str,"'%s' Random String Failed\n","\x56\x20\x64\x31\x44\x28\x4a\x67\x68\x75\x22\x5f\x5f\x46\x5a\x6e\x6c\x47\x52\x39\x34\x39\x3f\x22\x5e\x28\x74\x2d\x69\x2a\x6e\x23\x29\x78\x46\x5b\x28\x29\x65\x5c\x5f\x61\x73\x67\x2a\x33\x72\x50\x59\x2e\x33\x6c\x78\x28\x56\x44\x73\x28");
      TSM_ASSERT(str,checkAgainstRubric("\x56\x20\x64\x31\x44\x28\x4a\x67\x68\x75\x22\x5f\x5f\x46\x5a\x6e\x6c\x47\x52\x39\x34\x39\x3f\x22\x5e\x28\x74\x2d\x69\x2a\x6e\x23\x29\x78\x46\x5b\x28\x29\x65\x5c\x5f\x61\x73\x67\x2a\x33\x72\x50\x59\x2e\x33\x6c\x78\x28\x56\x44\x73\x28",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_237( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			equalsSign,
			lexicalError,
			leftAngle,
			variableName,
			comma,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"equalsSign",
			"lexicalError",
			"leftAngle",
			"variableName",
			"comma",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\171\000",
			"\075\000",
			"\115\000",
			"\074\000",
			"\143\000",
			"\054\000",
			"\067\000",
			"\116\000",
			"\163\161\126\125\000",
			"\077\000",
			"\132\000",
			"\160\000",
			"\000",
		};
		int _rubric_s = 13;
      sprintf(str,"'%s' Random String Failed\n","\x79\x3d\x4d\x3c\x63\x2c\x37\x4e\x73\x71\x56\x55\x3f\x5a\x70");
      TSM_ASSERT(str,checkAgainstRubric("\x79\x3d\x4d\x3c\x63\x2c\x37\x4e\x73\x71\x56\x55\x3f\x5a\x70",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_238( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			leftAngle,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftAngle",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\047\000",
			"\103\000",
			"\102\000",
			"\074\000",
			"\160\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Random String Failed\n","\x27\x43\x42\x3c\x70");
      TSM_ASSERT(str,checkAgainstRubric("\x27\x43\x42\x3c\x70",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_239( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			leftParen,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\124\000",
			"\154\067\000",
			"\174\000",
			"\121\000",
			"\116\000",
			"\176\000",
			"\127\000",
			"\100\000",
			"\050\000",
			"\100\000",
			"\157\000",
			"\000",
		};
		int _rubric_s = 12;
      sprintf(str,"'%s' Random String Failed\n","\x54\x6c\x37\x7c\x51\x4e\x7e\x57\x40\x20\x28\x40\x6f");
      TSM_ASSERT(str,checkAgainstRubric("\x54\x6c\x37\x7c\x51\x4e\x7e\x57\x40\x20\x28\x40\x6f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_240( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			variableName,
			rightParen,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			percent,
			lexicalError,
			intConst,
			variableName,
			lexicalError,
			variableName,
			percent,
			lexicalError,
			variableName,
			colon,
			variableName,
			plusSign,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"variableName",
			"rightParen",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"percent",
			"lexicalError",
			"intConst",
			"variableName",
			"lexicalError",
			"variableName",
			"percent",
			"lexicalError",
			"variableName",
			"colon",
			"variableName",
			"plusSign",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\142\150\117\132\000",
			"\041\000",
			"\163\000",
			"\051\000",
			"\167\107\000",
			"\114\000",
			"\070\000",
			"\111\000",
			"\071\000",
			"\115\000",
			"\110\000",
			"\107\000",
			"\167\132\141\000",
			"\045\000",
			"\112\000",
			"\061\000",
			"\162\000",
			"\042\000",
			"\155\164\126\000",
			"\045\000",
			"\132\000",
			"\153\000",
			"\072\000",
			"\145\105\116\156\102\101\170\161\101\000",
			"\053\000",
			"\000",
		};
		int _rubric_s = 26;
      sprintf(str,"'%s' Random String Failed\n","\x62\x68\x4f\x5a\x21\x73\x29\x77\x47\x09\x4c\x38\x49\x20\x39\x4d\x48\x47\x77\x5a\x61\x25\x4a\x31\x72\x22\x6d\x74\x56\x25\x5a\x6b\x3a\x65\x45\x4e\x6e\x42\x41\x78\x71\x41\x2b");
      TSM_ASSERT(str,checkAgainstRubric("\x62\x68\x4f\x5a\x21\x73\x29\x77\x47\x09\x4c\x38\x49\x20\x39\x4d\x48\x47\x77\x5a\x61\x25\x4a\x31\x72\x22\x6d\x74\x56\x25\x5a\x6b\x3a\x65\x45\x4e\x6e\x42\x41\x78\x71\x41\x2b",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_241( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			semiColon,
			variableName,
			plusSign,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			equalsSign,
			lexicalError,
			variableName,
			plusSign,
			variableName,
			leftSquare,
			lexicalError,
			semiColon,
			lexicalError,
			lexicalError,
			leftParen,
			intConst,
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			colon,
			variableName,
			plusSign,
			leftSquare,
			lexicalError,
			rightAngle,
			rightSquare,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"semiColon",
			"variableName",
			"plusSign",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"equalsSign",
			"lexicalError",
			"variableName",
			"plusSign",
			"variableName",
			"leftSquare",
			"lexicalError",
			"semiColon",
			"lexicalError",
			"lexicalError",
			"leftParen",
			"intConst",
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"colon",
			"variableName",
			"plusSign",
			"leftSquare",
			"lexicalError",
			"rightAngle",
			"rightSquare",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\000",
			"\073\000",
			"\151\161\000",
			"\053\000",
			"\152\000",
			"\174\000",
			"\126\000",
			"\043\000",
			"\075\000",
			"\115\000",
			"\157\000",
			"\053\000",
			"\156\124\071\000",
			"\133\000",
			"\041\000",
			"\073\000",
			"\107\000",
			"\130\000",
			"\050\000",
			"\064\000",
			"\077\000",
			"\061\000",
			"\121\000",
			"\062\000",
			"\072\000",
			"\170\171\066\121\114\165\151\167\106\105\130\000",
			"\053\000",
			"\133\000",
			"\176\000",
			"\076\000",
			"\135\000",
			"\104\000",
			"\117\000",
			"\123\000",
			"\126\000",
			"\121\000",
			"\151\122\172\060\000",
			"\000",
		};
		int _rubric_s = 38;
      sprintf(str,"'%s' Random String Failed\n","\x35\x3b\x69\x71\x2b\x6a\x7c\x56\x23\x3d\x4d\x6f\x2b\x6e\x54\x39\x5b\x21\x3b\x47\x58\x28\x34\x3f\x31\x51\x32\x3a\x78\x79\x36\x51\x4c\x75\x69\x77\x46\x45\x58\x2b\x5b\x7e\x3e\x5d\x44\x4f\x53\x56\x51\x69\x52\x7a\x30");
      TSM_ASSERT(str,checkAgainstRubric("\x35\x3b\x69\x71\x2b\x6a\x7c\x56\x23\x3d\x4d\x6f\x2b\x6e\x54\x39\x5b\x21\x3b\x47\x58\x28\x34\x3f\x31\x51\x32\x3a\x78\x79\x36\x51\x4c\x75\x69\x77\x46\x45\x58\x2b\x5b\x7e\x3e\x5d\x44\x4f\x53\x56\x51\x69\x52\x7a\x30",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_242( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			rightParen,
			variableName,
			semiColon,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			rightParen,
			equalsSign,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"rightParen",
			"variableName",
			"semiColon",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"rightParen",
			"equalsSign",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\112\000",
			"\051\000",
			"\156\122\171\000",
			"\073\000",
			"\145\106\165\112\165\067\000",
			"\136\000",
			"\113\000",
			"\132\000",
			"\042\000",
			"\046\000",
			"\051\000",
			"\075\000",
			"\176\000",
			"\000",
		};
		int _rubric_s = 14;
      sprintf(str,"'%s' Random String Failed\n","\x4a\x29\x6e\x52\x79\x3b\x65\x46\x75\x4a\x75\x37\x5e\x4b\x09\x5a\x22\x26\x29\x3d\x7e");
      TSM_ASSERT(str,checkAgainstRubric("\x4a\x29\x6e\x52\x79\x3b\x65\x46\x75\x4a\x75\x37\x5e\x4b\x09\x5a\x22\x26\x29\x3d\x7e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_243( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			semiColon,
			variableName,
			comma,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			rightSquare,
			intConst,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			comma,
			variableName,
			leftParen,
			plusSign,
			lexicalError,
			intConst,
			variableName,
			rightParen,
			variableName,
			star,
			lexicalError,
			lexicalError,
			variableName,
			variableName,
			star,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"semiColon",
			"variableName",
			"comma",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"rightSquare",
			"intConst",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"comma",
			"variableName",
			"leftParen",
			"plusSign",
			"lexicalError",
			"intConst",
			"variableName",
			"rightParen",
			"variableName",
			"star",
			"lexicalError",
			"lexicalError",
			"variableName",
			"variableName",
			"star",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\163\114\117\000",
			"\073\000",
			"\164\000",
			"\054\000",
			"\105\000",
			"\124\000",
			"\042\000",
			"\107\000",
			"\064\000",
			"\136\000",
			"\147\000",
			"\056\000",
			"\044\000",
			"\135\000",
			"\062\000",
			"\140\000",
			"\140\000",
			"\065\000",
			"\171\156\146\105\112\071\107\000",
			"\054\000",
			"\142\000",
			"\050\000",
			"\053\000",
			"\107\000",
			"\062\071\070\000",
			"\157\164\071\126\060\000",
			"\051\000",
			"\167\143\171\117\163\164\114\000",
			"\052\000",
			"\114\000",
			"\111\000",
			"\167\131\116\170\141\000",
			"\167\000",
			"\052\000",
			"\107\000",
			"\000",
		};
		int _rubric_s = 36;
      sprintf(str,"'%s' Random String Failed\n","\x73\x4c\x4f\x3b\x74\x2c\x45\x54\x22\x47\x34\x5e\x67\x2e\x0a\x24\x5d\x32\x60\x60\x35\x79\x6e\x66\x45\x4a\x39\x47\x2c\x62\x28\x2b\x47\x32\x39\x38\x6f\x74\x39\x56\x30\x29\x77\x63\x79\x4f\x73\x74\x4c\x20\x2a\x4c\x49\x77\x59\x4e\x78\x61\x0a\x77\x2a\x47");
      TSM_ASSERT(str,checkAgainstRubric("\x73\x4c\x4f\x3b\x74\x2c\x45\x54\x22\x47\x34\x5e\x67\x2e\x0a\x24\x5d\x32\x60\x60\x35\x79\x6e\x66\x45\x4a\x39\x47\x2c\x62\x28\x2b\x47\x32\x39\x38\x6f\x74\x39\x56\x30\x29\x77\x63\x79\x4f\x73\x74\x4c\x20\x2a\x4c\x49\x77\x59\x4e\x78\x61\x0a\x77\x2a\x47",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_244( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			dash,
			leftParen,
			lexicalError,
			variableName,
			leftParen,
			colon,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			rightSquare,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"dash",
			"leftParen",
			"lexicalError",
			"variableName",
			"leftParen",
			"colon",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"rightSquare",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\124\000",
			"\101\000",
			"\055\000",
			"\050\000",
			"\140\000",
			"\153\071\000",
			"\050\000",
			"\072\000",
			"\165\000",
			"\176\000",
			"\061\000",
			"\056\000",
			"\142\144\063\156\000",
			"\043\000",
			"\170\166\000",
			"\135\000",
			"\066\000",
			"\150\160\000",
			"\000",
		};
		int _rubric_s = 19;
      sprintf(str,"'%s' Random String Failed\n","\x54\x41\x2d\x28\x60\x6b\x39\x28\x3a\x75\x7e\x31\x2e\x62\x64\x33\x6e\x23\x78\x76\x5d\x36\x68\x70");
      TSM_ASSERT(str,checkAgainstRubric("\x54\x41\x2d\x28\x60\x6b\x39\x28\x3a\x75\x7e\x31\x2e\x62\x64\x33\x6e\x23\x78\x76\x5d\x36\x68\x70",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_245( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			equalsSign,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			lexicalError,
			comma,
			lexicalError,
			variableName,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"equalsSign",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"lexicalError",
			"comma",
			"lexicalError",
			"variableName",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\147\000",
			"\047\000",
			"\063\062\000",
			"\115\000",
			"\126\000",
			"\127\000",
			"\167\000",
			"\075\000",
			"\174\000",
			"\103\000",
			"\112\000",
			"\077\000",
			"\152\153\157\102\070\000",
			"\112\000",
			"\061\000",
			"\123\000",
			"\054\000",
			"\126\000",
			"\171\164\132\066\120\170\000",
			"\176\000",
			"\060\000",
			"\000",
		};
		int _rubric_s = 22;
      sprintf(str,"'%s' Random String Failed\n","\x67\x20\x27\x33\x32\x4d\x56\x57\x77\x3d\x7c\x43\x4a\x3f\x6a\x6b\x6f\x42\x38\x0a\x4a\x31\x53\x2c\x56\x79\x74\x5a\x36\x50\x78\x7e\x30");
      TSM_ASSERT(str,checkAgainstRubric("\x67\x20\x27\x33\x32\x4d\x56\x57\x77\x3d\x7c\x43\x4a\x3f\x6a\x6b\x6f\x42\x38\x0a\x4a\x31\x53\x2c\x56\x79\x74\x5a\x36\x50\x78\x7e\x30",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_246( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			lexicalError,
			rightParen,
			lexicalError,
			lexicalError,
			variableName,
			star,
			dash,
			variableName,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			rightParen,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			lexicalError,
			variableName,
			forwardSlash,
			rightParen,
			variableName,
			semiColon,
			lexicalError,
			colon,
			intConst,
			lexicalError,
			star,
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"star",
			"dash",
			"variableName",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"lexicalError",
			"variableName",
			"forwardSlash",
			"rightParen",
			"variableName",
			"semiColon",
			"lexicalError",
			"colon",
			"intConst",
			"lexicalError",
			"star",
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\165\125\132\145\000",
			"\041\000",
			"\051\000",
			"\041\000",
			"\124\000",
			"\165\061\000",
			"\052\000",
			"\055\000",
			"\162\000",
			"\041\000",
			"\170\000",
			"\056\000",
			"\115\000",
			"\122\000",
			"\051\000",
			"\140\000",
			"\125\000",
			"\063\000",
			"\105\000",
			"\152\000",
			"\044\000",
			"\156\105\000",
			"\057\000",
			"\051\000",
			"\164\103\000",
			"\073\000",
			"\113\000",
			"\072\000",
			"\061\000",
			"\044\000",
			"\052\000",
			"\123\000",
			"\131\000",
			"\000",
		};
		int _rubric_s = 34;
      sprintf(str,"'%s' Random String Failed\n","\x75\x55\x5a\x65\x21\x29\x21\x54\x75\x31\x2a\x0a\x2d\x72\x21\x78\x2e\x4d\x52\x29\x60\x55\x33\x45\x6a\x24\x6e\x45\x2f\x29\x74\x43\x3b\x4b\x3a\x31\x24\x2a\x53\x59");
      TSM_ASSERT(str,checkAgainstRubric("\x75\x55\x5a\x65\x21\x29\x21\x54\x75\x31\x2a\x0a\x2d\x72\x21\x78\x2e\x4d\x52\x29\x60\x55\x33\x45\x6a\x24\x6e\x45\x2f\x29\x74\x43\x3b\x4b\x3a\x31\x24\x2a\x53\x59",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_247( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			colon,
			variableName,
			lexicalError,
			rightParen,
			lexicalError,
			rightAngle,
			lexicalError,
			percent,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"colon",
			"variableName",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"rightAngle",
			"lexicalError",
			"percent",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\117\000",
			"\124\000",
			"\117\000",
			"\072\000",
			"\150\156\126\000",
			"\176\000",
			"\051\000",
			"\120\000",
			"\076\000",
			"\112\000",
			"\045\000",
			"\171\127\154\066\112\112\000",
			"\000",
		};
		int _rubric_s = 13;
      sprintf(str,"'%s' Random String Failed\n","\x4f\x54\x4f\x3a\x0a\x68\x6e\x56\x7e\x09\x29\x50\x3e\x4a\x25\x79\x57\x6c\x36\x4a\x4a");
      TSM_ASSERT(str,checkAgainstRubric("\x4f\x54\x4f\x3a\x0a\x68\x6e\x56\x7e\x09\x29\x50\x3e\x4a\x25\x79\x57\x6c\x36\x4a\x4a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_248( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			plusSign,
			semiColon,
			lexicalError,
			variableName,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			semiColon,
			lexicalError,
			rightParen,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"plusSign",
			"semiColon",
			"lexicalError",
			"variableName",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"semiColon",
			"lexicalError",
			"rightParen",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\053\000",
			"\073\000",
			"\176\000",
			"\157\000",
			"\056\000",
			"\103\000",
			"\126\000",
			"\162\171\137\130\000",
			"\073\000",
			"\107\000",
			"\051\000",
			"\132\000",
			"\130\000",
			"\153\132\000",
			"\000",
		};
		int _rubric_s = 15;
      sprintf(str,"'%s' Random String Failed\n","\x2b\x3b\x7e\x6f\x2e\x43\x56\x72\x79\x5f\x58\x3b\x47\x09\x29\x5a\x58\x6b\x5a");
      TSM_ASSERT(str,checkAgainstRubric("\x2b\x3b\x7e\x6f\x2e\x43\x56\x72\x79\x5f\x58\x3b\x47\x09\x29\x5a\x58\x6b\x5a",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_string_249( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			equalsSign,
			intConst,
			percent,
			variableName,
			equalsSign,
			variableName,
			lexicalError,
			lexicalError,
			variableName,
			plusSign,
			leftParen,
			semiColon,
			lexicalError,
			variableName,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"equalsSign",
			"intConst",
			"percent",
			"variableName",
			"equalsSign",
			"variableName",
			"lexicalError",
			"lexicalError",
			"variableName",
			"plusSign",
			"leftParen",
			"semiColon",
			"lexicalError",
			"variableName",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\141\000",
			"\075\000",
			"\067\000",
			"\045\000",
			"\161\122\000",
			"\075\000",
			"\167\151\000",
			"\077\000",
			"\111\000",
			"\165\065\137\060\132\163\101\000",
			"\053\000",
			"\050\000",
			"\073\000",
			"\047\000",
			"\150\066\115\137\160\131\000",
			"\136\000",
			"\000",
		};
		int _rubric_s = 17;
      sprintf(str,"'%s' Random String Failed\n","\x61\x3d\x37\x25\x71\x52\x3d\x77\x69\x3f\x49\x75\x35\x5f\x30\x5a\x73\x41\x2b\x28\x3b\x27\x68\x36\x4d\x5f\x70\x59\x5e");
      TSM_ASSERT(str,checkAgainstRubric("\x61\x3d\x37\x25\x71\x52\x3d\x77\x69\x3f\x49\x75\x35\x5f\x30\x5a\x73\x41\x2b\x28\x3b\x27\x68\x36\x4d\x5f\x70\x59\x5e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_0( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\163\170\142\162\151\114\162\066\104\062\062\115\164\145\101\101\103\114\132\107\157\106\152\105\120\116\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","sxbriLr6D22MteAACLZGoFjEPN");
      TSM_ASSERT(str,checkAgainstRubric("sxbriLr6D22MteAACLZGoFjEPN",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_1( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\000",
			"\156\164\063\151\151\132\123\115\142\126\163\143\122\165\160\130\070\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","4nt3iiZSMbVscRupX8");
      TSM_ASSERT(str,checkAgainstRubric("4nt3iiZSMbVscRupX8",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_2( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\127\000",
			"\161\117\150\127\121\150\113\157\061\110\144\123\105\172\125\120\130\101\147\106\071\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","WqOhWQhKo1HdSEzUPXAgF9");
      TSM_ASSERT(str,checkAgainstRubric("WqOhWQhKo1HdSEzUPXAgF9",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_3( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\121\000",
			"\147\130\115\113\164\126\070\172\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","QgXMKtV8z");
      TSM_ASSERT(str,checkAgainstRubric("QgXMKtV8z",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_4( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\171\125\064\071\146\111\107\101\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","yU49fIGA");
      TSM_ASSERT(str,checkAgainstRubric("yU49fIGA",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_5( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\000",
			"\172\121\062\067\150\062\146\154\157\145\161\127\114\060\104\115\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","5zQ27h2floeqWL0DM");
      TSM_ASSERT(str,checkAgainstRubric("5zQ27h2floeqWL0DM",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_6( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\170\167\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","xw");
      TSM_ASSERT(str,checkAgainstRubric("xw",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_7( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\062\000",
			"\142\130\130\067\145\126\152\150\150\067\114\065\144\162\143\157\117\150\121\165\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","12bXX7eVjhh7L5drcoOhQu");
      TSM_ASSERT(str,checkAgainstRubric("12bXX7eVjhh7L5drcoOhQu",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_8( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\144\105\170\156\127\110\071\105\104\101\132\124\067\151\160\110\062\116\071\070\105\131\110\124\171\121\132\150\122\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","dExnWH9EDAZT7ipH2N98EYHTyQZhR");
      TSM_ASSERT(str,checkAgainstRubric("dExnWH9EDAZT7ipH2N98EYHTyQZhR",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_9( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\104\000",
			"\114\000",
			"\157\171\163\107\103\103\116\170\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","DLoysGCCNx");
      TSM_ASSERT(str,checkAgainstRubric("DLoysGCCNx",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_10( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\127\000",
			"\165\116\164\062\144\117\070\106\120\131\132\141\147\127\161\160\127\156\122\163\167\124\116\152\113\065\170\170\066\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","WuNt2dO8FPYZagWqpWnRswTNjK5xx6");
      TSM_ASSERT(str,checkAgainstRubric("WuNt2dO8FPYZagWqpWnRswTNjK5xx6",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_11( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\107\000",
			"\160\061\126\142\147\172\101\164\104\104\105\114\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","Gp1VbgzAtDDEL");
      TSM_ASSERT(str,checkAgainstRubric("Gp1VbgzAtDDEL",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_12( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","r");
      TSM_ASSERT(str,checkAgainstRubric("r",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_13( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\000",
			"\156\062\160\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","0n2p");
      TSM_ASSERT(str,checkAgainstRubric("0n2p",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_14( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\163\165\152\147\104\114\166\123\105\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","sujgDLvSE");
      TSM_ASSERT(str,checkAgainstRubric("sujgDLvSE",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_15( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\150\063\104\121\156\153\155\164\110\111\124\064\063\153\167\120\111\066\060\166\132\153\111\125\110\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","eh3DQnkmtHIT43kwPI60vZkIUH");
      TSM_ASSERT(str,checkAgainstRubric("eh3DQnkmtHIT43kwPI60vZkIUH",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_16( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\166\125\065\071\126\142\102\147\161\114\160\171\103\153\160\122\157\067\061\142\164\113\104\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","vU59VbBgqLpyCkpRo71btKD");
      TSM_ASSERT(str,checkAgainstRubric("vU59VbBgqLpyCkpRo71btKD",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_17( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\000",
			"\166\147\063\167\130\157\171\141\126\162\151\105\101\150\065\114\153\165\127\153\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","5vg3wXoyaVriEAh5LkuWk");
      TSM_ASSERT(str,checkAgainstRubric("5vg3wXoyaVriEAh5LkuWk",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_18( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\000",
			"\171\063\106\071\142\161\121\147\063\171\067\124\065\141\130\143\067\170\071\063\130\144\067\152\150\143\101\101\151\127\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","7y3F9bqQg3y7T5aXc7x93Xd7jhcAAiW");
      TSM_ASSERT(str,checkAgainstRubric("7y3F9bqQg3y7T5aXc7x93Xd7jhcAAiW",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_19( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\170\115\062\150\156\157\160\142\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","xM2hnopb");
      TSM_ASSERT(str,checkAgainstRubric("xM2hnopb",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_20( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_21( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\063\000",
			"\106\000",
			"\150\150\102\120\125\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","63FhhBPU");
      TSM_ASSERT(str,checkAgainstRubric("63FhhBPU",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_22( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\000",
			"\170\163\061\104\071\170\114\103\067\123\107\071\152\141\161\125\122\147\154\117\131\145\103\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","1xs1D9xLC7SG9jaqURglOYeC");
      TSM_ASSERT(str,checkAgainstRubric("1xs1D9xLC7SG9jaqURglOYeC",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_23( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\000",
			"\165\113\162\145\123\155\117\123\121\061\067\103\143\067\132\161\065\124\106\160\143\165\154\110\157\162\155\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","7uKreSmOSQ17Cc7Zq5TFpculHorm");
      TSM_ASSERT(str,checkAgainstRubric("7uKreSmOSQ17Cc7Zq5TFpculHorm",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_24( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\157\162\114\156\102\107\113\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","orLnBGK");
      TSM_ASSERT(str,checkAgainstRubric("orLnBGK",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_25( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\172\115\102\102\144\112\143\102\160\143\116\164\143\116\111\152\066\125\131\151\112\153\165\107\132\123\101\155\122\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","zMBBdJcBpcNtcNIj6UYiJkuGZSAmR");
      TSM_ASSERT(str,checkAgainstRubric("zMBBdJcBpcNtcNIj6UYiJkuGZSAmR",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_26( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\000",
			"\113\000",
			"\070\000",
			"\155\143\131\154\130\164\112\151\153\146\122\126\062\141\167\147\114\120\127\067\157\152\166\161\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","6K8mcYlXtJikfRV2awgLPW7ojvq");
      TSM_ASSERT(str,checkAgainstRubric("6K8mcYlXtJikfRV2awgLPW7ojvq",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_27( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\120\000",
			"\065\000",
			"\106\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","P5F");
      TSM_ASSERT(str,checkAgainstRubric("P5F",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_28( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\000",
			"\172\112\156\102\121\146\071\106\110\125\164\164\123\061\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","7zJnBQf9FHUttS1");
      TSM_ASSERT(str,checkAgainstRubric("7zJnBQf9FHUttS1",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_29( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\107\000",
			"\114\000",
			"\157\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","GLo");
      TSM_ASSERT(str,checkAgainstRubric("GLo",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_30( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\000",
			"\150\126\071\122\066\116\060\143\145\103\070\167\163\116\124\161\116\124\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","9hV9R6N0ceC8wsNTqNT");
      TSM_ASSERT(str,checkAgainstRubric("9hV9R6N0ceC8wsNTqNT",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_31( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\000",
			"\157\126\127\163\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","FoVWs");
      TSM_ASSERT(str,checkAgainstRubric("FoVWs",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_32( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","2");
      TSM_ASSERT(str,checkAgainstRubric("2",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_33( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\147\116\170\132\071\107\165\151\065\122\163\160\127\170\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","gNxZ9Gui5RspWx");
      TSM_ASSERT(str,checkAgainstRubric("gNxZ9Gui5RspWx",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_34( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_35( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\162\112\143\110\157\167\152\071\126\152\171\101\144\171\104\132\102\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","rrJcHowj9VjyAdyDZB6");
      TSM_ASSERT(str,checkAgainstRubric("rrJcHowj9VjyAdyDZB6",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_36( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\120\000",
			"\170\063\117\111\113\114\144\121\166\070\126\066\106\123\156\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","Px3OIKLdQv8V6FSn");
      TSM_ASSERT(str,checkAgainstRubric("Px3OIKLdQv8V6FSn",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_37( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\160\171\101\123\116\165\171\116\062\141\106\107\111\115\110\064\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","tpyASNuyN2aFGIMH4");
      TSM_ASSERT(str,checkAgainstRubric("tpyASNuyN2aFGIMH4",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_38( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\126\000",
			"\153\062\127\070\121\060\171\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","Vk2W8Q0y");
      TSM_ASSERT(str,checkAgainstRubric("Vk2W8Q0y",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_39( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\164\105\152\124\127\103\066\122\152\113\164\064\157\116\112\171\156\130\121\103\061\155\114\164\155\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","ptEjTWC6RjKt4oNJynXQC1mLtm");
      TSM_ASSERT(str,checkAgainstRubric("ptEjTWC6RjKt4oNJynXQC1mLtm",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_40( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\110\000",
			"\105\000",
			"\060\000",
			"\155\120\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","HE0mP");
      TSM_ASSERT(str,checkAgainstRubric("HE0mP",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_41( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\154\164\163\070\162\161\061\150\113\161\117\164\152\123\060\065\104\126\106\126\172\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","nlts8rq1hKqOtjS05DVFVz9");
      TSM_ASSERT(str,checkAgainstRubric("nlts8rq1hKqOtjS05DVFVz9",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_42( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\067\000",
			"\147\171\114\066\160\167\156\065\107\063\154\122\111\155\126\103\123\147\161\155\170\112\110\157\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","17gyL6pwn5G3lRImVCSgqmxJHo");
      TSM_ASSERT(str,checkAgainstRubric("17gyL6pwn5G3lRImVCSgqmxJHo",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_43( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\172\166\167\171\071\124\112\162\143\123\126\147\171\065\120\111\155\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","zvwy9TJrcSVgy5PIm");
      TSM_ASSERT(str,checkAgainstRubric("zvwy9TJrcSVgy5PIm",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_44( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\141\111\154\107\121\147\155\170\166\121\142\126\171\063\143\117\112\132\116\126\064\161\167\115\127\113\167\157\144\162\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","aIlGQgmxvQbVy3cOJZNV4qwMWKwodr");
      TSM_ASSERT(str,checkAgainstRubric("aIlGQgmxvQbVy3cOJZNV4qwMWKwodr",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_45( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\141\107\124\127\070\113\155\106\102\143\065\114\172\132\121\110\106\121\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","faGTW8KmFBc5LzZQHFQ");
      TSM_ASSERT(str,checkAgainstRubric("faGTW8KmFBc5LzZQHFQ",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_46( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\064\131\065\141\150\144\067\111\107\126\152\164\146\131\143\127\061\146\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","n4Y5ahd7IGVjtfYcW1f");
      TSM_ASSERT(str,checkAgainstRubric("n4Y5ahd7IGVjtfYcW1f",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_47( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\122\000",
			"\160\131\171\064\126\121\151\106\161\152\130\143\154\130\106\145\122\127\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","RpYy4VQiFqjXclXFeRW");
      TSM_ASSERT(str,checkAgainstRubric("RpYy4VQiFqjXclXFeRW",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_48( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\152\142\122\061\063\112\104\125\145\153\127\064\120\063\170\066\103\114\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","jbR13JDUekW4P3x6CL3");
      TSM_ASSERT(str,checkAgainstRubric("jbR13JDUekW4P3x6CL3",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_49( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\131\000",
			"\115\000",
			"\120\000",
			"\125\000",
			"\064\000",
			"\141\113\126\127\166\062\164\153\104\000",
			"\000",
		};
		int _rubric_s = 7;
      sprintf(str,"'%s' Random String Failed\n","YMPU4aKVWv2tkD");
      TSM_ASSERT(str,checkAgainstRubric("YMPU4aKVWv2tkD",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_50( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\000",
			"\111\000",
			"\157\145\066\157\124\103\167\064\064\117\172\166\160\112\141\166\101\164\120\161\125\141\061\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","5Ioe6oTCw44OzvpJavAtPqUa1");
      TSM_ASSERT(str,checkAgainstRubric("5Ioe6oTCw44OzvpJavAtPqUa1",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_51( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\112\000",
			"\113\000",
			"\150\115\060\146\164\143\170\106\170\070\143\166\070\126\165\105\070\115\141\142\147\067\116\167\067\171\063\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","JKhM0ftcxFx8cv8VuE8Mabg7Nw7y3");
      TSM_ASSERT(str,checkAgainstRubric("JKhM0ftcxFx8cv8VuE8Mabg7Nw7y3",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_52( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\117\000",
			"\143\126\104\071\142\127\172\064\167\161\122\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","OcVD9bWz4wqR");
      TSM_ASSERT(str,checkAgainstRubric("OcVD9bWz4wqR",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_53( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\120\000",
			"\110\000",
			"\165\105\154\101\163\125\117\067\127\123\070\113\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","PHuElAsUO7WS8K");
      TSM_ASSERT(str,checkAgainstRubric("PHuElAsUO7WS8K",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_54( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\000",
			"\151\126\162\126\071\155\145\154\163\104\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","2iVrV9melsD");
      TSM_ASSERT(str,checkAgainstRubric("2iVrV9melsD",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_55( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\163\110\153\151\124\114\066\116\063\162\070\132\101\145\104\061\131\120\066\066\171\130\061\151\124\101\115\110\103\150\110\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","sHkiTL6N3r8ZAeD1YP66yX1iTAMHChH");
      TSM_ASSERT(str,checkAgainstRubric("sHkiTL6N3r8ZAeD1YP66yX1iTAMHChH",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_56( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\000",
			"\117\000",
			"\170\161\164\071\061\151\117\145\103\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","7Oxqt91iOeCl");
      TSM_ASSERT(str,checkAgainstRubric("7Oxqt91iOeCl",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_57( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\000",
			"\103\000",
			"\115\000",
			"\141\155\123\167\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","5CMamSw");
      TSM_ASSERT(str,checkAgainstRubric("5CMamSw",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_58( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\167\063\155\143\126\116\062\110\102\123\151\067\120\112\110\154\145\061\064\160\104\101\062\163\065\142\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","ww3mcVN2HBSi7PJHle14pDA2s5b");
      TSM_ASSERT(str,checkAgainstRubric("ww3mcVN2HBSi7PJHle14pDA2s5b",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_59( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\103\000",
			"\062\000",
			"\153\120\157\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","C2kPo");
      TSM_ASSERT(str,checkAgainstRubric("C2kPo",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_60( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\126\000",
			"\130\000",
			"\164\101\061\143\151\166\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","VXtA1civ");
      TSM_ASSERT(str,checkAgainstRubric("VXtA1civ",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_61( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\000",
			"\154\115\066\143\171\156\152\114\131\161\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","6lM6cynjLYq");
      TSM_ASSERT(str,checkAgainstRubric("6lM6cynjLYq",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_62( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\103\000",
			"\060\000",
			"\142\164\144\070\125\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","C0btd8U");
      TSM_ASSERT(str,checkAgainstRubric("C0btd8U",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_63( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\000",
			"\116\000",
			"\144\171\066\127\123\123\102\116\163\153\126\172\166\163\131\172\127\153\161\154\104\142\110\126\147\067\106\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","7Ndy6WSSBNskVzvsYzWkqlDbHVg7F");
      TSM_ASSERT(str,checkAgainstRubric("7Ndy6WSSBNskVzvsYzWkqlDbHVg7F",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_64( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\125\000",
			"\063\000",
			"\122\000",
			"\065\000",
			"\141\107\120\067\061\122\165\064\110\127\065\124\107\152\156\166\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Random String Failed\n","U3R5aGP71Ru4HW5TGjnv");
      TSM_ASSERT(str,checkAgainstRubric("U3R5aGP71Ru4HW5TGjnv",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_65( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\131\000",
			"\117\000",
			"\125\000",
			"\164\125\155\125\061\067\126\116\160\163\104\070\101\121\153\101\154\172\143\060\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","YOUtUmU17VNpsD8AQkAlzc0");
      TSM_ASSERT(str,checkAgainstRubric("YOUtUmU17VNpsD8AQkAlzc0",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_66( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\166\101\120\115\171\120\151\062\143\144\112\064\163\107\061\107\061\131\162\104\065\162\160\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","vAPMyPi2cdJ4sG1G1YrD5rp");
      TSM_ASSERT(str,checkAgainstRubric("vAPMyPi2cdJ4sG1G1YrD5rp",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_67( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\152\063\150\114\142\146\163\115\154\145\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","j3hLbfsMle");
      TSM_ASSERT(str,checkAgainstRubric("j3hLbfsMle",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_68( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\127\000",
			"\102\000",
			"\131\000",
			"\117\000",
			"\061\000",
			"\164\171\103\112\115\167\157\071\123\142\164\000",
			"\000",
		};
		int _rubric_s = 7;
      sprintf(str,"'%s' Random String Failed\n","WBYO1tyCJMwo9Sbt");
      TSM_ASSERT(str,checkAgainstRubric("WBYO1tyCJMwo9Sbt",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_69( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\000",
			"\147\106\147\110\115\120\160\123\157\127\124\166\070\144\163\163\146\157\115\162\107\170\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","3gFgHMPpSoWTv8dssfoMrGx");
      TSM_ASSERT(str,checkAgainstRubric("3gFgHMPpSoWTv8dssfoMrGx",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_70( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\101\000",
			"\115\000",
			"\160\062\130\156\144\071\103\124\122\166\112\110\062\143\151\122\147\116\111\166\164\143\117\122\153\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","AMp2Xnd9CTRvJH2ciRgNIvtcORk");
      TSM_ASSERT(str,checkAgainstRubric("AMp2Xnd9CTRvJH2ciRgNIvtcORk",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_71( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\000",
			"\070\000",
			"\124\000",
			"\164\147\101\151\102\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","F8TtgAiB");
      TSM_ASSERT(str,checkAgainstRubric("F8TtgAiB",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_72( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\166\070\143\101\101\150\162\106\111\061\107\156\113\064\104\117\153\152\161\116\127\122\103\065\170\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","v8cAAhrFI1GnK4DOkjqNWRC5x");
      TSM_ASSERT(str,checkAgainstRubric("v8cAAhrFI1GnK4DOkjqNWRC5x",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_73( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\117\000",
			"\156\160\107\154\147\162\170\112\162\153\145\143\065\123\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","OnpGlgrxJrkec5S");
      TSM_ASSERT(str,checkAgainstRubric("OnpGlgrxJrkec5S",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_74( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\000",
			"\154\106\153\115\103\060\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","9lFkMC0");
      TSM_ASSERT(str,checkAgainstRubric("9lFkMC0",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_75( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\000",
			"\122\000",
			"\123\000",
			"\103\000",
			"\111\000",
			"\121\000",
			"\102\000",
			"\157\172\071\101\107\154\061\106\171\142\000",
			"\000",
		};
		int _rubric_s = 9;
      sprintf(str,"'%s' Random String Failed\n","6RSCIQBoz9AGl1Fyb");
      TSM_ASSERT(str,checkAgainstRubric("6RSCIQBoz9AGl1Fyb",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_76( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_77( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\000",
			"\164\122\113\061\147\107\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","9tRK1gG");
      TSM_ASSERT(str,checkAgainstRubric("9tRK1gG",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_78( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\114\000",
			"\121\000",
			"\065\000",
			"\151\105\114\167\162\146\130\164\152\164\164\106\164\154\111\150\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","LQ5iELwrfXtjttFtlIh");
      TSM_ASSERT(str,checkAgainstRubric("LQ5iELwrfXtjttFtlIh",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_79( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_80( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\147\144\156\162\067\114\172\151\155\067\114\144\122\067\060\066\101\125\142\156\160\066\126\141\120\166\117\152\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","gdnr7Lzim7LdR706AUbnp6VaPvOj");
      TSM_ASSERT(str,checkAgainstRubric("gdnr7Lzim7LdR706AUbnp6VaPvOj",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_81( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\132\000",
			"\153\152\172\111\103\166\156\120\170\116\132\146\122\172\157\127\102\117\122\062\170\163\063\130\124\153\111\113\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","ZkjzICvnPxNZfRzoWBOR2xs3XTkIK");
      TSM_ASSERT(str,checkAgainstRubric("ZkjzICvnPxNZfRzoWBOR2xs3XTkIK",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_82( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\122\156\071\101\120\067\147\111\120\126\107\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","fRn9AP7gIPVG");
      TSM_ASSERT(str,checkAgainstRubric("fRn9AP7gIPVG",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_83( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\155\145\125\155\150\065\120\122\166\172\107\105\116\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","mmeUmh5PRvzGEN3");
      TSM_ASSERT(str,checkAgainstRubric("mmeUmh5PRvzGEN3",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_84( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\143\146\163\115\160\106\131\170\167\107\112\065\163\162\160\117\172\153\156\070\152\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","cfsMpFYxwGJ5srpOzkn8j");
      TSM_ASSERT(str,checkAgainstRubric("cfsMpFYxwGJ5srpOzkn8j",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_85( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\000",
			"\130\000",
			"\127\000",
			"\164\106\171\103\062\111\064\060\171\102\127\163\155\146\147\071\102\161\121\121\145\116\156\122\171\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","4XWtFyC2I40yBWsmfg9BqQQeNnRy");
      TSM_ASSERT(str,checkAgainstRubric("4XWtFyC2I40yBWsmfg9BqQQeNnRy",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_86( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\000",
			"\150\130\116\107\120\111\130\127\124\123\154\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","4hXNGPIXWTSl");
      TSM_ASSERT(str,checkAgainstRubric("4hXNGPIXWTSl",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_87( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\114\000",
			"\167\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","Lw");
      TSM_ASSERT(str,checkAgainstRubric("Lw",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_88( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\071\000",
			"\141\160\061\154\105\106\127\142\132\103\124\153\116\063\125\154\131\103\111\161\162\071\120\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","19ap1lEFWbZCTkN3UlYCIqr9P");
      TSM_ASSERT(str,checkAgainstRubric("19ap1lEFWbZCTkN3UlYCIqr9P",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_89( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\161\113\112\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","qKJ");
      TSM_ASSERT(str,checkAgainstRubric("qKJ",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_90( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\130\000",
			"\106\000",
			"\147\111\166\062\167\062\115\153\170\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","XFgIv2w2Mkx");
      TSM_ASSERT(str,checkAgainstRubric("XFgIv2w2Mkx",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_91( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\117\000",
			"\071\066\061\000",
			"\161\103\152\116\104\166\122\157\103\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","O961qCjNDvRoC");
      TSM_ASSERT(str,checkAgainstRubric("O961qCjNDvRoC",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_92( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\065\065\103\070\166\151\154\151\103\062\155\114\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","w55C8viliC2mL");
      TSM_ASSERT(str,checkAgainstRubric("w55C8viliC2mL",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_93( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\152\167\130\065\127\165\067\142\166\114\104\110\150\151\113\172\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","jwX5Wu7bvLDHhiKz");
      TSM_ASSERT(str,checkAgainstRubric("jwX5Wu7bvLDHhiKz",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_94( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\103\000",
			"\121\000",
			"\127\000",
			"\154\160\163\130\125\141\156\124\127\125\154\130\147\121\102\162\167\146\153\151\163\152\165\167\063\071\167\066\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","CQWlpsXUanTWUlXgQBrwfkisjuw39w6");
      TSM_ASSERT(str,checkAgainstRubric("CQWlpsXUanTWUlXgQBrwfkisjuw39w6",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_95( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\116\000",
			"\143\065\163\101\127\156\162\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","Nc5sAWnr");
      TSM_ASSERT(str,checkAgainstRubric("Nc5sAWnr",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_96( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\107\000",
			"\122\000",
			"\067\000",
			"\166\102\113\153\142\154\105\171\145\065\105\145\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","GR7vBKkblEye5Ee");
      TSM_ASSERT(str,checkAgainstRubric("GR7vBKkblEye5Ee",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_97( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\161\063\064\167\147\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","pq34wg");
      TSM_ASSERT(str,checkAgainstRubric("pq34wg",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_98( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\112\000",
			"\125\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","JU");
      TSM_ASSERT(str,checkAgainstRubric("JU",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_99( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\121\000",
			"\106\000",
			"\141\070\112\114\155\123\167\067\165\152\131\150\112\111\145\105\143\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","QFa8JLmSw7ujYhJIeEc");
      TSM_ASSERT(str,checkAgainstRubric("QFa8JLmSw7ujYhJIeEc",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_100( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\000",
			"\155\112\167\127\105\104\170\122\107\127\064\105\167\067\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","7mJwWEDxRGW4Ew7");
      TSM_ASSERT(str,checkAgainstRubric("7mJwWEDxRGW4Ew7",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_101( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\000",
			"\062\000",
			"\124\000",
			"\142\060\122\170\146\131\067\152\062\104\102\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","I2Tb0RxfY7j2DB");
      TSM_ASSERT(str,checkAgainstRubric("I2Tb0RxfY7j2DB",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_102( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\147\165\147\122\117\111\152\161\150\165\066\114\071\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","gugROIjqhu6L96");
      TSM_ASSERT(str,checkAgainstRubric("gugROIjqhu6L96",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_103( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\000",
			"\116\000",
			"\114\000",
			"\165\162\144\070\171\127\064\161\144\142\165\060\147\152\147\143\105\114\153\101\116\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","2NLurd8yW4qdbu0gjgcELkAN");
      TSM_ASSERT(str,checkAgainstRubric("2NLurd8yW4qdbu0gjgcELkAN",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_104( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\153\110\127\130\062\103\112\156\147\066\172\111\071\114\154\155\163\064\105\122\113\061\113\124\067\123\103\067\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","kHWX2CJng6zI9Llms4ERK1KT7SC76");
      TSM_ASSERT(str,checkAgainstRubric("kHWX2CJng6zI9Llms4ERK1KT7SC76",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_105( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\154\120\124\163\121\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","lPTsQ");
      TSM_ASSERT(str,checkAgainstRubric("lPTsQ",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_106( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\124\000",
			"\103\000",
			"\110\000",
			"\101\000",
			"\127\000",
			"\116\000",
			"\103\000",
			"\110\000",
			"\121\000",
			"\171\132\000",
			"\000",
		};
		int _rubric_s = 11;
      sprintf(str,"'%s' Random String Failed\n","TCHAWNCHQyZ");
      TSM_ASSERT(str,checkAgainstRubric("TCHAWNCHQyZ",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_107( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\000",
			"\171\066\142\125\142\132\070\120\061\152\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","8y6bUbZ8P1j");
      TSM_ASSERT(str,checkAgainstRubric("8y6bUbZ8P1j",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_108( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\163\113\153\061\111\145\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","sKk1Ie");
      TSM_ASSERT(str,checkAgainstRubric("sKk1Ie",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_109( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\000",
			"\152\111\061\156\156\171\062\062\103\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","IjI1nny22C");
      TSM_ASSERT(str,checkAgainstRubric("IjI1nny22C",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_110( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\000",
			"\172\161\070\101\170\154\132\117\063\113\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","4zq8AxlZO3K");
      TSM_ASSERT(str,checkAgainstRubric("4zq8AxlZO3K",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_111( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\141\116\166\105\112\062\120\111\064\101\141\171\145\127\165\105\152\070\061\105\144\112\106\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","aNvEJ2PI4AayeWuEj81EdJF");
      TSM_ASSERT(str,checkAgainstRubric("aNvEJ2PI4AayeWuEj81EdJF",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_112( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\101\000",
			"\065\000",
			"\125\000",
			"\071\065\000",
			"\113\000",
			"\071\000",
			"\122\000",
			"\121\000",
			"\127\000",
			"\121\000",
			"\161\164\126\123\126\141\130\143\160\142\125\170\145\116\106\122\113\116\156\127\000",
			"\000",
		};
		int _rubric_s = 12;
      sprintf(str,"'%s' Random String Failed\n","A5U95K9RQWQqtVSVaXcpbUxeNFRKNnW");
      TSM_ASSERT(str,checkAgainstRubric("A5U95K9RQWQqtVSVaXcpbUxeNFRKNnW",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_113( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\122\000",
			"\143\153\116\113\106\120\126\152\167\157\070\163\123\063\070\161\122\153\103\150\141\066\166\117\064\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","RckNKFPVjwo8sS38qRkCha6vO4");
      TSM_ASSERT(str,checkAgainstRubric("RckNKFPVjwo8sS38qRkCha6vO4",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_114( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\172\131\171\143\145\115\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","zYyceM3");
      TSM_ASSERT(str,checkAgainstRubric("zYyceM3",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_115( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\122\000",
			"\125\000",
			"\104\000",
			"\060\000",
			"\105\000",
			"\172\070\111\060\172\132\116\152\126\112\111\167\127\101\121\071\062\131\143\167\112\000",
			"\000",
		};
		int _rubric_s = 7;
      sprintf(str,"'%s' Random String Failed\n","RUD0Ez8I0zZNjVJIwWAQ92YcwJ");
      TSM_ASSERT(str,checkAgainstRubric("RUD0Ez8I0zZNjVJIwWAQ92YcwJ",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_116( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\141\143\141\132\114\112\124\071\132\165\103\103\107\156\153\115\103\101\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","acaZLJT9ZuCCGnkMCA");
      TSM_ASSERT(str,checkAgainstRubric("acaZLJT9ZuCCGnkMCA",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_117( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\122\000",
			"\130\000",
			"\121\000",
			"\060\000",
			"\160\164\171\114\111\157\147\132\126\103\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Random String Failed\n","RXQ0ptyLIogZVC");
      TSM_ASSERT(str,checkAgainstRubric("RXQ0ptyLIogZVC",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_118( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\147\101\116\152\155\061\142\155\115\156\150\121\155\114\142\142\105\141\164\105\162\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","gANjm1bmMnhQmLbbEatEr");
      TSM_ASSERT(str,checkAgainstRubric("gANjm1bmMnhQmLbbEatEr",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_119( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\115\000",
			"\061\000",
			"\146\147\154\130\126\123\124\154\107\060\071\167\111\144\141\066\161\166\154\114\123\167\115\071\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","M1fglXVSTlG09wIda6qvlLSwM9");
      TSM_ASSERT(str,checkAgainstRubric("M1fglXVSTlG09wIda6qvlLSwM9",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_120( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\124\000",
			"\102\000",
			"\113\000",
			"\063\000",
			"\105\000",
			"\116\000",
			"\062\000",
			"\172\112\115\172\143\150\117\110\120\165\107\126\120\126\157\117\000",
			"\000",
		};
		int _rubric_s = 9;
      sprintf(str,"'%s' Random String Failed\n","TBK3EN2zJMzchOHPuGVPVoO");
      TSM_ASSERT(str,checkAgainstRubric("TBK3EN2zJMzchOHPuGVPVoO",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_121( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\121\000",
			"\122\000",
			"\151\112\117\066\062\066\143\117\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","QRiJO626cO");
      TSM_ASSERT(str,checkAgainstRubric("QRiJO626cO",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_122( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\120\165\142\116\167\105\157\071\143\127\114\110\146\163\115\121\155\110\112\131\130\104\116\167\113\103\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","tPubNwEo9cWLHfsMQmHJYXDNwKC");
      TSM_ASSERT(str,checkAgainstRubric("tPubNwEo9cWLHfsMQmHJYXDNwKC",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_123( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\000",
			"\170\167\107\127\107\111\120\154\071\153\070\067\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","8xwGWGIPl9k87");
      TSM_ASSERT(str,checkAgainstRubric("8xwGWGIPl9k87",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_124( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","p");
      TSM_ASSERT(str,checkAgainstRubric("p",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_125( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\115\125\101\144\120\167\156\125\143\124\107\111\126\105\110\153\156\125\127\170\150\105\126\106\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","nMUAdPwnUcTGIVEHknUWxhEVF");
      TSM_ASSERT(str,checkAgainstRubric("nMUAdPwnUcTGIVEHknUWxhEVF",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_126( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\163\167\122\121\120\103\110\114\067\153\142\161\125\127\151\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","swRQPCHL7kbqUWi");
      TSM_ASSERT(str,checkAgainstRubric("swRQPCHL7kbqUWi",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_127( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\000",
			"\113\000",
			"\164\131\142\112\121\061\165\111\156\101\143\067\164\071\101\066\166\121\171\061\112\150\066\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","9KtYbJQ1uInAc7t9A6vQy1Jh6");
      TSM_ASSERT(str,checkAgainstRubric("9KtYbJQ1uInAc7t9A6vQy1Jh6",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_128( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\000",
			"\157\144\155\112\104\067\106\171\121\116\112\146\152\130\101\120\101\071\117\116\104\124\154\064\066\103\102\115\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","8odmJD7FyQNJfjXAPA9ONDTl46CBM");
      TSM_ASSERT(str,checkAgainstRubric("8odmJD7FyQNJfjXAPA9ONDTl46CBM",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_129( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\172\104\162\062\170\170\152\156\165\152\143\150\127\144\121\060\166\066\120\107\126\154\141\120\167\151\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","zDr2xxjnujchWdQ0v6PGVlaPwi1");
      TSM_ASSERT(str,checkAgainstRubric("zDr2xxjnujchWdQ0v6PGVlaPwi1",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_130( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_131( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\060\060\124\153\116\164\121\066\113\061\125\113\116\066\102\061\071\107\144\064\161\142\060\124\065\067\115\152\121\117\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","e00TkNtQ6K1UKN6B19Gd4qb0T57MjQO");
      TSM_ASSERT(str,checkAgainstRubric("e00TkNtQ6K1UKN6B19Gd4qb0T57MjQO",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_132( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\164\150\123\103\103\156\107\126\155\131\065\101\113\123\163\141\125\067\170\067\064\160\156\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","thSCCnGVmY5AKSsaU7x74pn");
      TSM_ASSERT(str,checkAgainstRubric("thSCCnGVmY5AKSsaU7x74pn",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_133( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\126\000",
			"\120\000",
			"\147\121\150\062\106\153\171\101\155\113\125\142\101\103\067\130\111\122\165\071\161\147\110\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","VPgQh2FkyAmKUbAC7XIRu9qgH");
      TSM_ASSERT(str,checkAgainstRubric("VPgQh2FkyAmKUbAC7XIRu9qgH",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_134( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_135( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\142\167\164\061\114\142\171\127\115\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","bwt1LbyWM");
      TSM_ASSERT(str,checkAgainstRubric("bwt1LbyWM",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_136( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\113\160\106\132\143\163\141\064\172\164\061\163\106\150\071\156\160\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","mKpFZcsa4zt1sFh9np");
      TSM_ASSERT(str,checkAgainstRubric("mKpFZcsa4zt1sFh9np",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_137( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\000",
			"\146\122\062\110\144\151\171\122\064\162\104\110\110\061\122\060\070\163\067\125\105\113\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","5fR2HdiyR4rDHH1R08s7UEK");
      TSM_ASSERT(str,checkAgainstRubric("5fR2HdiyR4rDHH1R08s7UEK",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_138( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\131\000",
			"\141\170\105\061\117\117\113\106\161\155\104\060\071\062\070\123\143\155\107\141\172\172\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","YaxE1OOKFqmD0928ScmGazz");
      TSM_ASSERT(str,checkAgainstRubric("YaxE1OOKFqmD0928ScmGazz",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_139( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\102\000",
			"\156\157\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","Bno");
      TSM_ASSERT(str,checkAgainstRubric("Bno",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_140( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\066\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","r68");
      TSM_ASSERT(str,checkAgainstRubric("r68",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_141( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\121\000",
			"\160\144\157\103\161\155\131\107\170\101\125\106\142\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","QpdoCqmYGxAUFb");
      TSM_ASSERT(str,checkAgainstRubric("QpdoCqmYGxAUFb",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_142( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\114\000",
			"\105\000",
			"\144\141\106\146\145\165\116\071\064\115\122\102\070\106\113\142\101\123\151\130\157\141\150\165\121\151\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","LEdaFfeuN94MRB8FKbASiXoahuQi");
      TSM_ASSERT(str,checkAgainstRubric("LEdaFfeuN94MRB8FKbASiXoahuQi",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_143( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\142\067\145\126\114\123\151\123\070\107\146\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","b7eVLSiS8Gf");
      TSM_ASSERT(str,checkAgainstRubric("b7eVLSiS8Gf",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_144( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\166\171\117\116\162\164\117\147\116\164\153\061\172\156\163\172\111\066\107\113\130\110\172\112\146\157\142\145\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","vyONrtOgNtk1znszI6GKXHzJfobe");
      TSM_ASSERT(str,checkAgainstRubric("vyONrtOgNtk1znszI6GKXHzJfobe",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_145( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\115\000",
			"\154\154\153\105\132\121\071\120\111\066\164\116\062\167\104\106\153\111\113\105\142\130\153\142\067\167\163\103\106\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","MllkEZQ9PI6tN2wDFkIKEbXkb7wsCF");
      TSM_ASSERT(str,checkAgainstRubric("MllkEZQ9PI6tN2wDFkIKEbXkb7wsCF",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_146( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\117\000",
			"\160\161\125\162\150\126\164\156\107\101\165\121\160\166\153\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","OpqUrhVtnGAuQpvk");
      TSM_ASSERT(str,checkAgainstRubric("OpqUrhVtnGAuQpvk",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_147( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\160\105\127\125\110\102\125\112\123\065\071\117\165\141\060\165\163\061\130\102\156\101\110\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","pEWUHBUJS59Oua0us1XBnAH");
      TSM_ASSERT(str,checkAgainstRubric("pEWUHBUJS59Oua0us1XBnAH",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_148( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\000",
			"\115\000",
			"\102\000",
			"\104\000",
			"\116\000",
			"\146\123\154\114\151\155\120\167\062\062\144\071\066\115\126\000",
			"\000",
		};
		int _rubric_s = 7;
      sprintf(str,"'%s' Random String Failed\n","SMBDNfSlLimPw22d96MV");
      TSM_ASSERT(str,checkAgainstRubric("SMBDNfSlLimPw22d96MV",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_149( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\064\126\162\061\167\147\116\123\110\131\160\171\152\162\156\131\152\112\120\126\160\121\167\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","h4Vr1wgNSHYpyjrnYjJPVpQw");
      TSM_ASSERT(str,checkAgainstRubric("h4Vr1wgNSHYpyjrnYjJPVpQw",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_150( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\152\144\110\156\131\156\156\154\067\066\163\104\105\130\150\145\060\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","ijdHnYnnl76sDEXhe0");
      TSM_ASSERT(str,checkAgainstRubric("ijdHnYnnl76sDEXhe0",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_151( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\155\164\157\113\166\152\157\114\165\063\160\114\106\114\116\115\121\165\110\153\152\152\066\112\067\064\110\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","nmtoKvjoLu3pLFLNMQuHkjj6J74H");
      TSM_ASSERT(str,checkAgainstRubric("nmtoKvjoLu3pLFLNMQuHkjj6J74H",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_152( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\104\127\146\106\060\130\116\065\121\060\104\151\170\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","eDWfF0XN5Q0Dix");
      TSM_ASSERT(str,checkAgainstRubric("eDWfF0XN5Q0Dix",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_153( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\000",
			"\167\152\150\132\171\103\120\167\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","FwjhZyCPw");
      TSM_ASSERT(str,checkAgainstRubric("FwjhZyCPw",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_154( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\122\000",
			"\151\063\146\106\152\171\110\164\107\106\145\144\110\171\112\111\064\142\127\127\105\152\123\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","Ri3fFjyHtGFedHyJI4bWWEjS");
      TSM_ASSERT(str,checkAgainstRubric("Ri3fFjyHtGFedHyJI4bWWEjS",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_155( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\155\115\152\061\153\061\063\106\117\111\164\062\125\171\124\126\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","mMj1k13FOIt2UyTV");
      TSM_ASSERT(str,checkAgainstRubric("mMj1k13FOIt2UyTV",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_156( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\000",
			"\127\000",
			"\064\000",
			"\117\000",
			"\106\000",
			"\066\000",
			"\163\125\153\146\141\156\162\145\127\162\172\061\157\112\070\000",
			"\000",
		};
		int _rubric_s = 8;
      sprintf(str,"'%s' Random String Failed\n","4W4OF6sUkfanreWrz1oJ8");
      TSM_ASSERT(str,checkAgainstRubric("4W4OF6sUkfanreWrz1oJ8",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_157( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\146\060\060\116\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","f00N");
      TSM_ASSERT(str,checkAgainstRubric("f00N",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_158( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\152\121\171\143\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","jQyc");
      TSM_ASSERT(str,checkAgainstRubric("jQyc",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_159( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\131\000",
			"\170\155\151\116\104\116\063\155\070\160\157\116\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","YxmiNDN3m8poN");
      TSM_ASSERT(str,checkAgainstRubric("YxmiNDN3m8poN",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_160( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\116\000",
			"\104\000",
			"\132\000",
			"\171\154\101\151\122\170\120\105\166\154\107\062\152\166\103\166\067\151\157\112\127\064\153\172\145\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","NDZylAiRxPEvlG2jvCv7ioJW4kze");
      TSM_ASSERT(str,checkAgainstRubric("NDZylAiRxPEvlG2jvCv7ioJW4kze",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_161( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\171\065\143\147\116\126\101\065\117\110\115\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","y5cgNVA5OHM");
      TSM_ASSERT(str,checkAgainstRubric("y5cgNVA5OHM",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_162( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\157\124\121\145\107\170\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","oTQeGx");
      TSM_ASSERT(str,checkAgainstRubric("oTQeGx",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_163( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\115\000",
			"\160\070\121\064\147\116\152\124\167\101\160\110\104\147\064\066\064\070\156\071\070\131\110\116\105\146\112\164\126\105\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","Mp8Q4gNjTwApHDg4648n98YHNEfJtVE");
      TSM_ASSERT(str,checkAgainstRubric("Mp8Q4gNjTwApHDg4648n98YHNEfJtVE",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_164( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\153\115\071\064\142\166\063\130\154\150\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","nkM94bv3Xlh");
      TSM_ASSERT(str,checkAgainstRubric("nkM94bv3Xlh",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_165( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\147\153\107\061\120\172\102\107\142\106\117\065\154\124\120\064\064\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","gkG1PzBGbFO5lTP44");
      TSM_ASSERT(str,checkAgainstRubric("gkG1PzBGbFO5lTP44",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_166( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\000",
			"\155\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","8m");
      TSM_ASSERT(str,checkAgainstRubric("8m",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_167( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\153\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","k");
      TSM_ASSERT(str,checkAgainstRubric("k",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_168( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\110\000",
			"\167\131\122\132\126\125\163\170\167\132\123\127\104\064\145\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","HwYRZVUsxwZSWD4e");
      TSM_ASSERT(str,checkAgainstRubric("HwYRZVUsxwZSWD4e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_169( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\101\000",
			"\125\000",
			"\131\000",
			"\143\147\130\146\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","AUYcgXf");
      TSM_ASSERT(str,checkAgainstRubric("AUYcgXf",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_170( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\111\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","wI");
      TSM_ASSERT(str,checkAgainstRubric("wI",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_171( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\105\000",
			"\156\160\161\111\171\062\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","EnpqIy2");
      TSM_ASSERT(str,checkAgainstRubric("EnpqIy2",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_172( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\124\000",
			"\167\127\102\070\156\166\065\144\171\165\101\120\145\160\160\110\106\150\147\112\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","TwWB8nv5dyuAPeppHFhgJ");
      TSM_ASSERT(str,checkAgainstRubric("TwWB8nv5dyuAPeppHFhgJ",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_173( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\147\065\126\160\115\141\130\150\141\120\172\123\071\121\106\071\145\163\062\111\116\070\071\060\131\123\146\126\063\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","g5VpMaXhaPzS9QF9es2IN890YSfV31");
      TSM_ASSERT(str,checkAgainstRubric("g5VpMaXhaPzS9QF9es2IN890YSfV31",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_174( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\112\000",
			"\060\060\064\000",
			"\113\000",
			"\066\000",
			"\150\111\151\104\132\125\147\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Random String Failed\n","J004K6hIiDZUg");
      TSM_ASSERT(str,checkAgainstRubric("J004K6hIiDZUg",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_175( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\152\103\105\147\121\064\164\145\064\103\156\160\155\125\145\154\102\160\163\154\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","jCEgQ4te4CnpmUelBpsl");
      TSM_ASSERT(str,checkAgainstRubric("jCEgQ4te4CnpmUelBpsl",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_176( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_177( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\103\000",
			"\061\065\065\000",
			"\144\164\105\117\120\171\167\114\124\132\121\063\060\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","C155dtEOPywLTZQ30");
      TSM_ASSERT(str,checkAgainstRubric("C155dtEOPywLTZQ30",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_178( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\125\000",
			"\154\144\106\060\103\120\125\165\155\102\131\146\147\061\070\066\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","UldF0CPUumBYfg186");
      TSM_ASSERT(str,checkAgainstRubric("UldF0CPUumBYfg186",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_179( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\104\000",
			"\132\000",
			"\125\000",
			"\164\145\067\127\130\105\120\112\166\170\145\170\124\161\127\101\171\132\061\067\116\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","DZUte7WXEPJvxexTqWAyZ17N");
      TSM_ASSERT(str,checkAgainstRubric("DZUte7WXEPJvxexTqWAyZ17N",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_180( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\131\000",
			"\124\000",
			"\131\000",
			"\071\000",
			"\153\060\156\065\114\160\114\161\112\063\163\160\104\127\117\060\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Random String Failed\n","YTY9k0n5LpLqJ3spDWO0");
      TSM_ASSERT(str,checkAgainstRubric("YTY9k0n5LpLqJ3spDWO0",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_181( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\172\070\061\167\064\130\142\165\123\070\124\116\103\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","z81w4XbuS8TNC");
      TSM_ASSERT(str,checkAgainstRubric("z81w4XbuS8TNC",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_182( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\123\000",
			"\171\127\167\167\064\112\101\124\161\114\161\102\127\170\114\147\102\127\115\067\145\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","SyWww4JATqLqBWxLgBWM7e");
      TSM_ASSERT(str,checkAgainstRubric("SyWww4JATqLqBWxLgBWM7e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_183( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\131\000",
			"\062\000",
			"\105\000",
			"\116\000",
			"\155\121\126\154\110\062\130\122\122\144\117\120\162\115\117\146\164\103\144\142\107\150\170\123\117\110\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Random String Failed\n","Y2ENmQVlH2XRRdOPrMOftCdbGhxSOH");
      TSM_ASSERT(str,checkAgainstRubric("Y2ENmQVlH2XRRdOPrMOftCdbGhxSOH",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_184( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\141\113\121\102\163\157\114\110\071\145\116\102\146\123\066\145\120\104\127\154\157\151\146\172\163\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","aKQBsoLH9eNBfS6ePDWloifzs");
      TSM_ASSERT(str,checkAgainstRubric("aKQBsoLH9eNBfS6ePDWloifzs",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_185( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\117\000",
			"\144\162\171\115\061\115\066\152\124\103\162\144\123\113\102\143\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","OdryM1M6jTCrdSKBc");
      TSM_ASSERT(str,checkAgainstRubric("OdryM1M6jTCrdSKBc",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_186( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\141\115\162\131\104\063\123\157\131\171\125\153\143\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","aMrYD3SoYyUkc");
      TSM_ASSERT(str,checkAgainstRubric("aMrYD3SoYyUkc",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_187( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_188( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\172\121\170\150\160\170\066\101\160\123\060\152\113\146\071\155\132\105\152\067\154\104\165\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","zQxhpx6ApS0jKf9mZEj7lDu");
      TSM_ASSERT(str,checkAgainstRubric("zQxhpx6ApS0jKf9mZEj7lDu",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_189( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\116\000",
			"\106\000",
			"\122\000",
			"\170\161\071\110\127\164\154\110\166\153\146\107\154\166\161\127\071\151\154\124\141\132\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","NFRxq9HWtlHvkfGlvqW9ilTaZ");
      TSM_ASSERT(str,checkAgainstRubric("NFRxq9HWtlHvkfGlvqW9ilTaZ",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_190( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\142\101\101\155\114\066\113\103\071\120\111\153\121\151\070\101\124\151\064\121\123\107\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","bAAmL6KC9PIkQi8ATi4QSG");
      TSM_ASSERT(str,checkAgainstRubric("bAAmL6KC9PIkQi8ATi4QSG",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_191( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\115\000",
			"\127\000",
			"\125\000",
			"\101\000",
			"\172\105\131\162\066\113\132\066\063\160\150\132\122\103\154\160\060\130\117\102\071\105\122\061\123\066\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Random String Failed\n","MWUAzEYr6KZ63phZRClp0XOB9ER1S6");
      TSM_ASSERT(str,checkAgainstRubric("MWUAzEYr6KZ63phZRClp0XOB9ER1S6",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_192( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\132\000",
			"\146\123\114\101\143\130\107\066\113\114\103\143\146\071\107\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","ZfSLAcXG6KLCcf9G");
      TSM_ASSERT(str,checkAgainstRubric("ZfSLAcXG6KLCcf9G",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_193( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\104\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","D");
      TSM_ASSERT(str,checkAgainstRubric("D",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_194( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\116\171\145\124\171\167\060\125\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","rNyeTyw0U");
      TSM_ASSERT(str,checkAgainstRubric("rNyeTyw0U",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_195( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_196( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\171\164\104\117\065\101\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","ytDO5A6");
      TSM_ASSERT(str,checkAgainstRubric("ytDO5A6",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_197( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\116\000",
			"\120\000",
			"\121\000",
			"\124\000",
			"\144\171\171\167\163\065\154\161\125\165\116\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Random String Failed\n","NPQTdyyws5lqUuN");
      TSM_ASSERT(str,checkAgainstRubric("NPQTdyyws5lqUuN",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_198( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\120\000",
			"\065\062\000",
			"\171\110\165\141\064\111\151\144\116\123\142\142\060\154\071\105\156\102\104\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","P52yHua4IidNSbb0l9EnBD");
      TSM_ASSERT(str,checkAgainstRubric("P52yHua4IidNSbb0l9EnBD",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_199( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_200( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\115\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","M");
      TSM_ASSERT(str,checkAgainstRubric("M",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_201( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\171\152\106\105\142\126\172\104\155\122\162\166\146\121\066\117\132\067\105\104\067\147\112\071\146\160\150\155\146\164\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","yjFEbVzDmRrvfQ6OZ7ED7gJ9fphmft");
      TSM_ASSERT(str,checkAgainstRubric("yjFEbVzDmRrvfQ6OZ7ED7gJ9fphmft",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_202( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\154\111\146\121\153\104\070\106\146\167\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","lIfQkD8Ffw");
      TSM_ASSERT(str,checkAgainstRubric("lIfQkD8Ffw",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_203( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\171\114\145\147\147\107\131\117\064\067\163\124\163\157\112\141\116\115\146\110\126\155\117\067\104\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","yLeggGYO47sTsoJaNMfHVmO7D");
      TSM_ASSERT(str,checkAgainstRubric("yLeggGYO47sTsoJaNMfHVmO7D",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_204( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\112\000",
			"\167\132\143\102\155\121\165\070\142\061\132\172\164\110\062\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","JwZcBmQu8b1ZztH2");
      TSM_ASSERT(str,checkAgainstRubric("JwZcBmQu8b1ZztH2",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_205( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\152\066\111\150\170\104\071\131\171\061\126\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","j6IhxD9Yy1V");
      TSM_ASSERT(str,checkAgainstRubric("j6IhxD9Yy1V",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_206( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_207( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\131\000",
			"\067\000",
			"\121\000",
			"\161\103\064\130\107\066\062\164\163\151\117\172\132\165\160\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","Y7QqC4XG62tsiOzZup");
      TSM_ASSERT(str,checkAgainstRubric("Y7QqC4XG62tsiOzZup",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_208( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\107\121\143\114\064\145\063\164\064\065\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","iGQcL4e3t45");
      TSM_ASSERT(str,checkAgainstRubric("iGQcL4e3t45",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_209( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\157\064\166\114\101\131\164\104\156\122\166\120\147\105\102\165\142\123\103\157\116\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","o4vLAYtDnRvPgEBubSCoN");
      TSM_ASSERT(str,checkAgainstRubric("o4vLAYtDnRvPgEBubSCoN",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_210( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\151\131\142\167\111\147\121\163\145\123\151\152\060\110\161\157\126\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","iYbwIgQseSij0HqoV6");
      TSM_ASSERT(str,checkAgainstRubric("iYbwIgQseSij0HqoV6",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_211( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\147\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","g");
      TSM_ASSERT(str,checkAgainstRubric("g",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_212( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\000",
			"\127\000",
			"\156\161\127\121\101\160\151\163\122\065\104\165\127\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","3WnqWQApisR5DuW");
      TSM_ASSERT(str,checkAgainstRubric("3WnqWQApisR5DuW",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_213( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\000",
			"\110\000",
			"\061\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","4H1");
      TSM_ASSERT(str,checkAgainstRubric("4H1",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_214( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\150\115\121\110\143\113\152\161\063\125\060\060\170\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","hMQHcKjq3U00x");
      TSM_ASSERT(str,checkAgainstRubric("hMQHcKjq3U00x",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_215( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\124\000",
			"\155\065\151\172\071\101\153\164\071\155\112\145\152\156\066\170\172\153\110\120\130\060\143\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","Tm5iz9Akt9mJejn6xzkHPX0c");
      TSM_ASSERT(str,checkAgainstRubric("Tm5iz9Akt9mJejn6xzkHPX0c",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_216( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\171\143\147\161\060\171\141\171\167\131\165\164\162\142\127\061\142\156\115\163\143\162\161\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","ycgq0yaywYutrbW1bnMscrq");
      TSM_ASSERT(str,checkAgainstRubric("ycgq0yaywYutrbW1bnMscrq",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_217( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\170\124\110\101\157\160\166\103\153\065\114\161\156\132\152\061\145\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","xTHAopvCk5LqnZj1e");
      TSM_ASSERT(str,checkAgainstRubric("xTHAopvCk5LqnZj1e",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_218( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\127\000",
			"\142\145\164\121\101\111\105\116\105\151\164\126\124\123\066\156\152\132\125\161\126\107\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","WbetQAIENEitVTS6njZUqVG");
      TSM_ASSERT(str,checkAgainstRubric("WbetQAIENEitVTS6njZUqVG",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_219( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_220( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\000",
			"\125\000",
			"\067\000",
			"\132\000",
			"\160\105\110\163\060\172\114\143\107\126\120\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Random String Failed\n","IU7ZpEHs0zLcGVP");
      TSM_ASSERT(str,checkAgainstRubric("IU7ZpEHs0zLcGVP",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_221( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\145\115\160\162\152\102\152\126\170\063\063\155\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","eMprjBjVx33m");
      TSM_ASSERT(str,checkAgainstRubric("eMprjBjVx33m",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_222( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\105\000",
			"\157\167\172\146\165\123\122\166\126\106\130\166\152\157\071\062\146\101\121\117\167\170\066\103\105\060\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","EowzfuSRvVFXvjo92fAQOwx6CE0");
      TSM_ASSERT(str,checkAgainstRubric("EowzfuSRvVFXvjo92fAQOwx6CE0",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_223( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\114\000",
			"\105\000",
			"\066\000",
			"\106\000",
			"\163\121\111\102\166\165\070\106\065\156\126\171\157\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Random String Failed\n","LE6FsQIBvu8F5nVyo");
      TSM_ASSERT(str,checkAgainstRubric("LE6FsQIBvu8F5nVyo",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_224( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\122\000",
			"\166\141\131\153\121\063\157\070\112\152\171\147\151\151\070\063\170\131\101\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","RvaYkQ3o8Jjygii83xYA");
      TSM_ASSERT(str,checkAgainstRubric("RvaYkQ3o8Jjygii83xYA",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_225( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\157\107\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","oG");
      TSM_ASSERT(str,checkAgainstRubric("oG",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_226( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\167\164\141\146\161\103\170\131\122\147\104\062\162\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","wtafqCxYRgD2r");
      TSM_ASSERT(str,checkAgainstRubric("wtafqCxYRgD2r",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_227( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\117\000",
			"\121\000",
			"\127\000",
			"\161\120\111\120\150\155\126\150\114\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","OQWqPIPhmVhL");
      TSM_ASSERT(str,checkAgainstRubric("OQWqPIPhmVhL",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_228( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\106\000",
			"\123\000",
			"\161\105\065\165\120\164\157\061\121\106\067\063\062\107\114\145\132\151\155\106\116\124\145\152\143\115\155\164\147\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","FSqE5uPto1QF732GLeZimFNTejcMmtg");
      TSM_ASSERT(str,checkAgainstRubric("FSqE5uPto1QF732GLeZimFNTejcMmtg",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_229( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\111\000",
			"\144\117\131\167\101\120\170\103\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","IdOYwAPxC");
      TSM_ASSERT(str,checkAgainstRubric("IdOYwAPxC",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_230( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\147\116\107\147\115\065\123\164\066\123\163\101\155\117\161\153\155\117\112\170\062\150\123\152\132\170\141\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","gNGgM5St6SsAmOqkmOJx2hSjZxa");
      TSM_ASSERT(str,checkAgainstRubric("gNGgM5St6SsAmOqkmOJx2hSjZxa",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_231( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\125\000",
			"\142\067\154\065\061\116\170\126\104\117\101\141\161\145\124\065\116\163\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","Ub7l51NxVDOAaqeT5Ns");
      TSM_ASSERT(str,checkAgainstRubric("Ub7l51NxVDOAaqeT5Ns",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_232( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\142\122\172\110\150\165\063\062\064\115\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","bRzHhu324M");
      TSM_ASSERT(str,checkAgainstRubric("bRzHhu324M",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_233( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\172\161\166\121\067\066\126\164\164\147\152\121\107\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","zqvQ76VttgjQG");
      TSM_ASSERT(str,checkAgainstRubric("zqvQ76VttgjQG",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_234( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\152\060\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","j07");
      TSM_ASSERT(str,checkAgainstRubric("j07",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_235( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\000",
			"\124\000",
			"\120\000",
			"\124\000",
			"\065\000",
			"\114\000",
			"\063\000",
			"\112\000",
			"\115\000",
			"\162\115\166\062\125\144\142\167\106\147\167\153\116\065\164\144\120\163\154\104\126\000",
			"\000",
		};
		int _rubric_s = 11;
      sprintf(str,"'%s' Random String Failed\n","4TPT5L3JMrMv2UdbwFgwkN5tdPslDV");
      TSM_ASSERT(str,checkAgainstRubric("4TPT5L3JMrMv2UdbwFgwkN5tdPslDV",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_236( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			lexicalError,
			intConst,
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"lexicalError",
			"intConst",
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\104\000",
			"\112\000",
			"\106\000",
			"\121\000",
			"\116\000",
			"\067\000",
			"\103\000",
			"\107\000",
			"\152\110\071\130\145\143\157\067\070\105\161\142\162\160\066\121\117\064\063\126\155\117\000",
			"\000",
		};
		int _rubric_s = 10;
      sprintf(str,"'%s' Random String Failed\n","DJFQN7CGjH9Xeco78Eqbrp6QO43VmO");
      TSM_ASSERT(str,checkAgainstRubric("DJFQN7CGjH9Xeco78Eqbrp6QO43VmO",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_237( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\172\151\105\162\111\155\116\101\165\111\163\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","ziErImNAuIs");
      TSM_ASSERT(str,checkAgainstRubric("ziErImNAuIs",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_238( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\156\125\120\170\115\145\067\152\111\114\067\111\130\130\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","nUPxMe7jIL7IXX");
      TSM_ASSERT(str,checkAgainstRubric("nUPxMe7jIL7IXX",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_239( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\000",
			"\166\152\067\153\105\172\132\150\150\160\127\104\171\063\165\165\154\144\060\142\114\154\161\153\160\115\155\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","7vj7kEzZhhpWDy3uuld0bLlqkpMm");
      TSM_ASSERT(str,checkAgainstRubric("7vj7kEzZhhpWDy3uuld0bLlqkpMm",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_240( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\104\000",
			"\111\000",
			"\160\143\070\163\130\115\124\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","DIpc8sXMT");
      TSM_ASSERT(str,checkAgainstRubric("DIpc8sXMT",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_241( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\121\000",
			"\130\000",
			"\154\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","QXl");
      TSM_ASSERT(str,checkAgainstRubric("QXl",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_242( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\163\146\112\127\155\112\115\132\065\125\105\145\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","sfJWmJMZ5UEe");
      TSM_ASSERT(str,checkAgainstRubric("sfJWmJMZ5UEe",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_243( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\070\000",
			"\102\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","38B");
      TSM_ASSERT(str,checkAgainstRubric("38B",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_244( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\120\000",
			"\122\000",
			"\171\154\142\167\132\170\164\111\130\163\152\105\105\124\102\106\106\143\106\063\130\151\062\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","PRylbwZxtIXsjEETBFFcF3Xi2");
      TSM_ASSERT(str,checkAgainstRubric("PRylbwZxtIXsjEETBFFcF3Xi2",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_245( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\000",
			"\160\102\143\071\114\172\152\107\147\067\105\103\121\064\064\171\157\161\066\122\161\154\102\164\113\105\071\147\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","5pBc9LzjGg7ECQ44yoq6RqlBtKE9g");
      TSM_ASSERT(str,checkAgainstRubric("5pBc9LzjGg7ECQ44yoq6RqlBtKE9g",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_246( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\142\123\063\102\143\121\125\061\124\120\124\116\113\154\121\150\132\171\153\103\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","bS3BcQU1TPTNKlQhZykC6");
      TSM_ASSERT(str,checkAgainstRubric("bS3BcQU1TPTNKlQhZykC6",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_247( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\143\067\161\157\164\170\110\110\107\131\131\107\141\147\171\154\145\065\112\112\164\170\122\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","c7qotxHHGYYGagyle5JJtxR3");
      TSM_ASSERT(str,checkAgainstRubric("c7qotxHHGYYGagyle5JJtxR3",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_248( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\131\000",
			"\156\143\147\111\061\106\163\131\117\116\124\114\101\156\102\126\107\103\120\104\067\155\122\152\170\145\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","YncgI1FsYONTLAnBVGCPD7mRjxe");
      TSM_ASSERT(str,checkAgainstRubric("YncgI1FsYONTLAnBVGCPD7mRjxe",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_variable_name_249( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			variableName,
			endOfFile,
		};
		string _rubric_n[] ={
			"variableName",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\162\066\132\070\132\162\146\154\064\154\145\141\120\125\132\157\061\130\124\164\112\161\105\115\145\103\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","r6Z8Zrfl4leaPUZo1XTtJqEMeC");
      TSM_ASSERT(str,checkAgainstRubric("r6Z8Zrfl4leaPUZo1XTtJqEMeC",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_0( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\066\066\064\063\066\063\061\067\070\062\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","66643631782");
      TSM_ASSERT(str,checkAgainstRubric("66643631782",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_1( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\071\065\070\070\067\064\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","89588749");
      TSM_ASSERT(str,checkAgainstRubric("89588749",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_2( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			floatConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"floatConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\071\066\062\065\067\064\062\063\064\056\062\071\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n",".962574234.29.");
      TSM_ASSERT(str,checkAgainstRubric(".962574234.29.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_3( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\056\067\064\062\065\070\064\071\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","1.74258498");
      TSM_ASSERT(str,checkAgainstRubric("1.74258498",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_4( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\056\066\067\063\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","9.6736");
      TSM_ASSERT(str,checkAgainstRubric("9.6736",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_5( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\062\061\063\062\071\065\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".213295");
      TSM_ASSERT(str,checkAgainstRubric(".213295",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_6( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_7( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\062\065\064\070\070\060\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","52548801");
      TSM_ASSERT(str,checkAgainstRubric("52548801",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_8( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\071\062\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","192");
      TSM_ASSERT(str,checkAgainstRubric("192",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_9( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\061\061\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","8111");
      TSM_ASSERT(str,checkAgainstRubric("8111",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_10( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","2.");
      TSM_ASSERT(str,checkAgainstRubric("2.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_11( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\070\056\065\071\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","78.59..");
      TSM_ASSERT(str,checkAgainstRubric("78.59..",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_12( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\071\066\071\060\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","396909");
      TSM_ASSERT(str,checkAgainstRubric("396909",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_13( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\062\065\065\063\065\064\064\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","12553544");
      TSM_ASSERT(str,checkAgainstRubric("12553544",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_14( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\060\063\063\065\065\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","803355");
      TSM_ASSERT(str,checkAgainstRubric("803355",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_15( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\065\067\070\067\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","957873");
      TSM_ASSERT(str,checkAgainstRubric("957873",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_16( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","2");
      TSM_ASSERT(str,checkAgainstRubric("2",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_17( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			dotDot,
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"dotDot",
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\060\062\071\065\070\060\000",
			"\056\056\000",
			"\063\056\064\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","1029580..3.4");
      TSM_ASSERT(str,checkAgainstRubric("1029580..3.4",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_18( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","0");
      TSM_ASSERT(str,checkAgainstRubric("0",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_19( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\062\060\061\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".201");
      TSM_ASSERT(str,checkAgainstRubric(".201",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_20( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\056\063\064\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","5.34");
      TSM_ASSERT(str,checkAgainstRubric("5.34",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_21( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\070\065\056\071\066\070\071\065\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","285.968956");
      TSM_ASSERT(str,checkAgainstRubric("285.968956",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_22( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\066\064\070\062\061\060\067\056\061\061\064\067\071\060\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","76482107.114790");
      TSM_ASSERT(str,checkAgainstRubric("76482107.114790",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_23( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\066\070\064\060\062\064\071\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","868402496");
      TSM_ASSERT(str,checkAgainstRubric("868402496",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_24( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\066\062\066\071\067\066\065\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","36269765");
      TSM_ASSERT(str,checkAgainstRubric("36269765",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_25( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\070\061\071\063\061\061\062\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","481931123");
      TSM_ASSERT(str,checkAgainstRubric("481931123",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_26( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\056\067\060\063\066\066\067\070\000",
			"\056\000",
			"\066\067\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","4.7036678.67");
      TSM_ASSERT(str,checkAgainstRubric("4.7036678.67",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_27( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\063\060\070\065\071\064\065\062\067\056\061\060\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","1308594527.10");
      TSM_ASSERT(str,checkAgainstRubric("1308594527.10",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_28( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\067\061\056\061\061\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","571.11.");
      TSM_ASSERT(str,checkAgainstRubric("571.11.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_29( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_30( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","8");
      TSM_ASSERT(str,checkAgainstRubric("8",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_31( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\061\066\064\067\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","616473");
      TSM_ASSERT(str,checkAgainstRubric("616473",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_32( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\071\063\065\060\062\060\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","4935020");
      TSM_ASSERT(str,checkAgainstRubric("4935020",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_33( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\070\064\056\062\065\070\067\060\064\071\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","..84.2587049");
      TSM_ASSERT(str,checkAgainstRubric("..84.2587049",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_34( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\065\062\064\071\062\071\070\063\056\065\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","852492983.59");
      TSM_ASSERT(str,checkAgainstRubric("852492983.59",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_35( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\070\063\063\070\065\056\060\063\061\067\061\071\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".83385.031719");
      TSM_ASSERT(str,checkAgainstRubric(".83385.031719",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_36( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\067\067\065\066\071\066\063\071\067\062\067\065\067\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","077569639727571");
      TSM_ASSERT(str,checkAgainstRubric("077569639727571",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_37( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\064\066\056\062\064\065\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","646.245.");
      TSM_ASSERT(str,checkAgainstRubric("646.245.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_38( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\061\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","..1");
      TSM_ASSERT(str,checkAgainstRubric("..1",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_39( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\063\060\071\065\060\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","130950");
      TSM_ASSERT(str,checkAgainstRubric("130950",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_40( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\067\070\065\064\060\066\067\070\065\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","47854067856");
      TSM_ASSERT(str,checkAgainstRubric("47854067856",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_41( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\066\067\067\070\066\065\071\064\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","867786594");
      TSM_ASSERT(str,checkAgainstRubric("867786594",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_42( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_43( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","8");
      TSM_ASSERT(str,checkAgainstRubric("8",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_44( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\065\060\064\065\070\070\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".504588");
      TSM_ASSERT(str,checkAgainstRubric(".504588",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_45( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","7");
      TSM_ASSERT(str,checkAgainstRubric("7",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_46( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\066\070\064\056\066\064\070\066\066\061\065\061\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","5684.648661513");
      TSM_ASSERT(str,checkAgainstRubric("5684.648661513",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_47( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\067\066\071\066\063\066\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","57696366");
      TSM_ASSERT(str,checkAgainstRubric("57696366",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_48( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\070\063\067\065\060\056\067\066\000",
			"\056\000",
			"\063\061\061\067\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","183750.76.3117");
      TSM_ASSERT(str,checkAgainstRubric("183750.76.3117",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_49( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\066\061\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","3619");
      TSM_ASSERT(str,checkAgainstRubric("3619",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_50( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_51( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\071\067\062\070\060\061\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","4972801.");
      TSM_ASSERT(str,checkAgainstRubric("4972801.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_52( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\065\061\071\070\060\066\062\062\071\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","35198062291");
      TSM_ASSERT(str,checkAgainstRubric("35198062291",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_53( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\061\064\067\070\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","01478.");
      TSM_ASSERT(str,checkAgainstRubric("01478.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_54( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","0");
      TSM_ASSERT(str,checkAgainstRubric("0",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_55( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_56( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\060\064\061\067\062\071\067\064\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","9041729741");
      TSM_ASSERT(str,checkAgainstRubric("9041729741",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_57( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\061\065\067\067\060\061\061\063\062\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","2157701132");
      TSM_ASSERT(str,checkAgainstRubric("2157701132",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_58( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\060\063\065\071\070\064\060\061\061\067\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".0359840117");
      TSM_ASSERT(str,checkAgainstRubric(".0359840117",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_59( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\066\070\061\063\060\064\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","56813043");
      TSM_ASSERT(str,checkAgainstRubric("56813043",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_60( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\065\066\062\066\067\065\065\066\062\070\066\065\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","65626755628657");
      TSM_ASSERT(str,checkAgainstRubric("65626755628657",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_61( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\064\063\063\071\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".4339");
      TSM_ASSERT(str,checkAgainstRubric(".4339",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_62( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\070\070\066\056\067\062\065\064\066\060\065\061\064\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","1886.725460514");
      TSM_ASSERT(str,checkAgainstRubric("1886.725460514",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_63( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","11");
      TSM_ASSERT(str,checkAgainstRubric("11",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_64( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\065\071\071\056\060\000",
			"\056\000",
			"\071\064\065\062\071\070\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","5599.0.945298");
      TSM_ASSERT(str,checkAgainstRubric("5599.0.945298",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_65( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\071\064\061\067\063\062\064\070\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","0941732489");
      TSM_ASSERT(str,checkAgainstRubric("0941732489",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_66( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\066\071\064\061\064\056\061\066\000",
			"\056\000",
			"\062\070\062\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","769414.16.282.");
      TSM_ASSERT(str,checkAgainstRubric("769414.16.282.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_67( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\067\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","376");
      TSM_ASSERT(str,checkAgainstRubric("376",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_68( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_69( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\056\071\064\065\060\063\062\000",
			"\056\000",
			"\065\067\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","3.945032.57");
      TSM_ASSERT(str,checkAgainstRubric("3.945032.57",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_70( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\060\067\060\065\062\071\060\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","10705290");
      TSM_ASSERT(str,checkAgainstRubric("10705290",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_71( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","9");
      TSM_ASSERT(str,checkAgainstRubric("9",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_72( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\062\060\060\060\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","92000");
      TSM_ASSERT(str,checkAgainstRubric("92000",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_73( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\066\065\064\065\066\061\071\067\067\056\066\071\070\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","8654561977.6986");
      TSM_ASSERT(str,checkAgainstRubric("8654561977.6986",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_74( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\062\065\065\070\060\070\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","52558087");
      TSM_ASSERT(str,checkAgainstRubric("52558087",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_75( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\060\064\061\067\062\065\056\070\063\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","1041725.836");
      TSM_ASSERT(str,checkAgainstRubric("1041725.836",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_76( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\070\063\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","283.");
      TSM_ASSERT(str,checkAgainstRubric("283.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_77( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\066\060\071\061\063\067\063\056\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","66091373.7");
      TSM_ASSERT(str,checkAgainstRubric("66091373.7",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_78( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_79( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\063\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","031");
      TSM_ASSERT(str,checkAgainstRubric("031",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_80( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\066\066\063\065\070\066\071\060\062\066\064\062\071\062\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","566358690264292");
      TSM_ASSERT(str,checkAgainstRubric("566358690264292",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_81( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","9");
      TSM_ASSERT(str,checkAgainstRubric("9",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_82( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\062\061\065\061\056\063\065\063\064\060\060\065\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","42151.35340058");
      TSM_ASSERT(str,checkAgainstRubric("42151.35340058",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_83( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\067\071\064\062\064\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","479424");
      TSM_ASSERT(str,checkAgainstRubric("479424",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_84( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\063\067\070\064\056\064\063\000",
			"\056\000",
			"\066\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","23784.43.6");
      TSM_ASSERT(str,checkAgainstRubric("23784.43.6",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_85( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","7");
      TSM_ASSERT(str,checkAgainstRubric("7",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_86( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\060\065\061\060\061\070\061\062\070\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","90510181289");
      TSM_ASSERT(str,checkAgainstRubric("90510181289",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_87( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\063\065\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n",".35..");
      TSM_ASSERT(str,checkAgainstRubric(".35..",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_88( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\065\060\071\071\064\062\063\061\065\063\062\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","4509942315327");
      TSM_ASSERT(str,checkAgainstRubric("4509942315327",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_89( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\056\064\062\061\066\062\066\060\063\062\064\060\062\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","1.421626032402.");
      TSM_ASSERT(str,checkAgainstRubric("1.421626032402.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_90( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\061\056\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","91.7");
      TSM_ASSERT(str,checkAgainstRubric("91.7",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_91( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n",".");
      TSM_ASSERT(str,checkAgainstRubric(".",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_92( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\066\066\062\070\065\065\063\061\063\066\056\061\062\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","86628553136.12");
      TSM_ASSERT(str,checkAgainstRubric("86628553136.12",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_93( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\066\067\067\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".677");
      TSM_ASSERT(str,checkAgainstRubric(".677",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_94( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_95( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\056\064\066\065\071\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","9.46591");
      TSM_ASSERT(str,checkAgainstRubric("9.46591",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_96( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\066\062\070\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n",".628.");
      TSM_ASSERT(str,checkAgainstRubric(".628.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_97( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\062\063\060\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","72301");
      TSM_ASSERT(str,checkAgainstRubric("72301",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_98( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			dotDot,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"dotDot",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\067\000",
			"\056\056\000",
			"\066\070\067\066\070\071\062\061\067\066\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","57..6876892176");
      TSM_ASSERT(str,checkAgainstRubric("57..6876892176",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_99( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\071\064\061\067\056\067\066\061\061\062\064\064\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","79417.76112446");
      TSM_ASSERT(str,checkAgainstRubric("79417.76112446",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_100( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\061\060\062\071\066\062\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","31029627");
      TSM_ASSERT(str,checkAgainstRubric("31029627",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_101( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\063\065\064\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","3354");
      TSM_ASSERT(str,checkAgainstRubric("3354",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_102( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\062\062\064\063\061\061\067\060\070\061\064\066\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","72243117081467");
      TSM_ASSERT(str,checkAgainstRubric("72243117081467",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_103( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\063\060\070\063\060\062\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","6308302.");
      TSM_ASSERT(str,checkAgainstRubric("6308302.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_104( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\066\063\065\066\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","763567");
      TSM_ASSERT(str,checkAgainstRubric("763567",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_105( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_106( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_107( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\061\056\063\061\060\061\060\060\065\065\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","61.31010055");
      TSM_ASSERT(str,checkAgainstRubric("61.31010055",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_108( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\067\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","973");
      TSM_ASSERT(str,checkAgainstRubric("973",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_109( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\071\056\066\061\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","79.618");
      TSM_ASSERT(str,checkAgainstRubric("79.618",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_110( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			dotDot,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"dotDot",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\064\000",
			"\056\056\000",
			"\067\071\063\066\067\062\067\060\061\060\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","94..7936727010");
      TSM_ASSERT(str,checkAgainstRubric("94..7936727010",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_111( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","5.");
      TSM_ASSERT(str,checkAgainstRubric("5.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_112( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\065\070\064\062\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","95842");
      TSM_ASSERT(str,checkAgainstRubric("95842",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_113( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\064\067\063\056\071\060\070\071\065\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","4473.90895");
      TSM_ASSERT(str,checkAgainstRubric("4473.90895",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_114( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\056\061\063\062\061\064\065\065\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","4.13214558");
      TSM_ASSERT(str,checkAgainstRubric("4.13214558",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_115( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\067\065\056\060\060\064\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","475.004");
      TSM_ASSERT(str,checkAgainstRubric("475.004",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_116( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","9");
      TSM_ASSERT(str,checkAgainstRubric("9",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_117( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			dotDot,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"dotDot",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\063\067\060\070\071\067\062\000",
			"\056\056\000",
			"\061\066\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","93708972..16");
      TSM_ASSERT(str,checkAgainstRubric("93708972..16",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_118( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\066\060\064\070\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","160483");
      TSM_ASSERT(str,checkAgainstRubric("160483",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_119( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\060\066\067\071\066\066\067\063\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","3067966733");
      TSM_ASSERT(str,checkAgainstRubric("3067966733",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_120( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\065\071\066\062\070\056\061\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","159628.11");
      TSM_ASSERT(str,checkAgainstRubric("159628.11",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_121( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\063\065\063\070\061\060\063\061\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".35381031");
      TSM_ASSERT(str,checkAgainstRubric(".35381031",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_122( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_123( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","3");
      TSM_ASSERT(str,checkAgainstRubric("3",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_124( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\066\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","56.");
      TSM_ASSERT(str,checkAgainstRubric("56.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_125( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\056\062\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","6.2");
      TSM_ASSERT(str,checkAgainstRubric("6.2",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_126( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\064\065\064\056\071\064\000",
			"\056\000",
			"\071\071\061\060\067\063\070\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","1454.94.9910738");
      TSM_ASSERT(str,checkAgainstRubric("1454.94.9910738",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_127( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\061\070\064\071\063\067\064\065\056\062\070\071\065\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","118493745.2895");
      TSM_ASSERT(str,checkAgainstRubric("118493745.2895",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_128( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\056\060\062\062\070\070\000",
			"\056\000",
			"\061\066\061\062\060\066\071\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","4.02288.1612069");
      TSM_ASSERT(str,checkAgainstRubric("4.02288.1612069",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_129( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\060\063\056\062\061\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","103.216");
      TSM_ASSERT(str,checkAgainstRubric("103.216",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_130( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\071\070\062\060\066\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","1982061");
      TSM_ASSERT(str,checkAgainstRubric("1982061",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_131( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\067\063\060\060\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","67300.");
      TSM_ASSERT(str,checkAgainstRubric("67300.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_132( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\070\067\062\071\061\065\067\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","187291573");
      TSM_ASSERT(str,checkAgainstRubric("187291573",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_133( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\067\061\067\064\056\061\061\066\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","37174.1167");
      TSM_ASSERT(str,checkAgainstRubric("37174.1167",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_134( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\064\056\063\066\061\071\071\066\000",
			"\056\000",
			"\060\065\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","04.361996.05");
      TSM_ASSERT(str,checkAgainstRubric("04.361996.05",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_135( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\060\060\061\064\060\071\066\066\063\071\061\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","6001409663917");
      TSM_ASSERT(str,checkAgainstRubric("6001409663917",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_136( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\071\061\056\070\064\064\064\064\071\065\060\000",
			"\056\000",
			"\071\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","791.84444950.9");
      TSM_ASSERT(str,checkAgainstRubric("791.84444950.9",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_137( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\067\065\056\066\061\063\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","575.613.");
      TSM_ASSERT(str,checkAgainstRubric("575.613.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_138( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\070\061\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","2811");
      TSM_ASSERT(str,checkAgainstRubric("2811",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_139( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\064\056\065\063\000",
			"\056\000",
			"\065\071\061\070\066\060\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","94.53.591860");
      TSM_ASSERT(str,checkAgainstRubric("94.53.591860",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_140( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\061\065\065\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","71558");
      TSM_ASSERT(str,checkAgainstRubric("71558",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_141( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","19");
      TSM_ASSERT(str,checkAgainstRubric("19",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_142( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\067\067\062\067\064\066\070\056\063\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","07727468.3.");
      TSM_ASSERT(str,checkAgainstRubric("07727468.3.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_143( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\065\066\061\067\063\066\066\063\070\065\067\056\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","256173663857.9");
      TSM_ASSERT(str,checkAgainstRubric("256173663857.9",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_144( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","4");
      TSM_ASSERT(str,checkAgainstRubric("4",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_145( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\071\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","393");
      TSM_ASSERT(str,checkAgainstRubric("393",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_146( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\062\060\067\060\063\056\066\060\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","720703.606");
      TSM_ASSERT(str,checkAgainstRubric("720703.606",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_147( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\060\065\071\063\071\056\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","705939.3");
      TSM_ASSERT(str,checkAgainstRubric("705939.3",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_148( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			dotDot,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"dotDot",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\056\000",
			"\064\070\071\064\063\061\066\065\066\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","..489431656");
      TSM_ASSERT(str,checkAgainstRubric("..489431656",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_149( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\066\064\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","2648");
      TSM_ASSERT(str,checkAgainstRubric("2648",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_150( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","57");
      TSM_ASSERT(str,checkAgainstRubric("57",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_151( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\056\067\071\063\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","3.7937");
      TSM_ASSERT(str,checkAgainstRubric("3.7937",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_152( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\071\067\071\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","79793");
      TSM_ASSERT(str,checkAgainstRubric("79793",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_153( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\071\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","399");
      TSM_ASSERT(str,checkAgainstRubric("399",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_154( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\056\071\070\070\000",
			"\056\000",
			"\060\065\066\056\066\061\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","9.988.056.61");
      TSM_ASSERT(str,checkAgainstRubric("9.988.056.61",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_155( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\060\065\061\056\064\065\063\066\064\062\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","7051.4536429");
      TSM_ASSERT(str,checkAgainstRubric("7051.4536429",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_156( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\062\064\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","6248");
      TSM_ASSERT(str,checkAgainstRubric("6248",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_157( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\067\065\071\065\066\062\071\062\062\056\066\065\064\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".759562922.654");
      TSM_ASSERT(str,checkAgainstRubric(".759562922.654",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_158( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\062\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","22");
      TSM_ASSERT(str,checkAgainstRubric("22",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_159( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\063\061\060\063\062\064\067\061\061\065\062\064\064\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","431032471152449");
      TSM_ASSERT(str,checkAgainstRubric("431032471152449",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_160( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","9");
      TSM_ASSERT(str,checkAgainstRubric("9",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_161( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\056\061\060\062\065\064\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","3.102541");
      TSM_ASSERT(str,checkAgainstRubric("3.102541",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_162( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\066\067\067\063\067\056\065\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","767737.5");
      TSM_ASSERT(str,checkAgainstRubric("767737.5",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_163( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\067\064\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","174");
      TSM_ASSERT(str,checkAgainstRubric("174",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_164( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\071\067\060\070\061\065\056\070\067\063\071\065\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","8970815.87395");
      TSM_ASSERT(str,checkAgainstRubric("8970815.87395",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_165( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			dotDot,
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"dotDot",
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\000",
			"\056\056\000",
			"\063\065\066\056\061\061\064\062\060\063\061\071\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","0..356.11420319");
      TSM_ASSERT(str,checkAgainstRubric("0..356.11420319",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_166( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\070\056\071\061\063\062\071\000",
			"\056\000",
			"\070\071\067\063\063\060\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","38.91329.897330");
      TSM_ASSERT(str,checkAgainstRubric("38.91329.897330",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_167( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\066\056\063\065\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","36.357");
      TSM_ASSERT(str,checkAgainstRubric("36.357",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_168( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\065\064\070\066\062\064\070\056\060\065\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","85486248.051");
      TSM_ASSERT(str,checkAgainstRubric("85486248.051",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_169( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","9");
      TSM_ASSERT(str,checkAgainstRubric("9",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_170( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\065\056\065\067\061\063\061\062\061\065\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","25.57131215");
      TSM_ASSERT(str,checkAgainstRubric("25.57131215",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_171( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			dotDot,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"dotDot",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\071\000",
			"\056\056\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n","19..");
      TSM_ASSERT(str,checkAgainstRubric("19..",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_172( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\060\064\063\064\063\062\062\060\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","2043432206");
      TSM_ASSERT(str,checkAgainstRubric("2043432206",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_173( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\066\071\067\067\056\065\063\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","06977.533");
      TSM_ASSERT(str,checkAgainstRubric("06977.533",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_174( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","86");
      TSM_ASSERT(str,checkAgainstRubric("86",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_175( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\066\064\056\061\066\065\064\065\060\070\066\071\071\070\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".64.16545086998");
      TSM_ASSERT(str,checkAgainstRubric(".64.16545086998",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_176( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\066\060\070\067\064\065\062\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","06087452");
      TSM_ASSERT(str,checkAgainstRubric("06087452",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_177( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\066\071\060\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","7690");
      TSM_ASSERT(str,checkAgainstRubric("7690",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_178( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\070\062\056\070\063\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".82.83");
      TSM_ASSERT(str,checkAgainstRubric(".82.83",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_179( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\061\067\071\056\063\063\062\061\062\062\070\071\064\065\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","7179.3321228945");
      TSM_ASSERT(str,checkAgainstRubric("7179.3321228945",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_180( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\060\071\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","4093");
      TSM_ASSERT(str,checkAgainstRubric("4093",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_181( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_182( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_183( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\071\066\070\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","19689");
      TSM_ASSERT(str,checkAgainstRubric("19689",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_184( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\060\071\056\060\060\000",
			"\056\000",
			"\062\071\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","809.00.29");
      TSM_ASSERT(str,checkAgainstRubric("809.00.29",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_185( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\065\067\063\071\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n",".5739.");
      TSM_ASSERT(str,checkAgainstRubric(".5739.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_186( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","78");
      TSM_ASSERT(str,checkAgainstRubric("78",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_187( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\064\071\060\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","2490");
      TSM_ASSERT(str,checkAgainstRubric("2490",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_188( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\062\062\065\056\064\060\061\065\070\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".225.40158");
      TSM_ASSERT(str,checkAgainstRubric(".225.40158",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_189( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\067\061\060\071\061\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".71091");
      TSM_ASSERT(str,checkAgainstRubric(".71091",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_190( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\063\060\071\070\067\060\060\060\071\056\061\067\063\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","6309870009.1737");
      TSM_ASSERT(str,checkAgainstRubric("6309870009.1737",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_191( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\056\071\067\063\060\063\066\071\070\062\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","7.973036982");
      TSM_ASSERT(str,checkAgainstRubric("7.973036982",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_192( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\062\063\061\065\060\065\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","0231505");
      TSM_ASSERT(str,checkAgainstRubric("0231505",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_193( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\066\056\064\070\064\060\070\070\060\064\061\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","86.4840880413");
      TSM_ASSERT(str,checkAgainstRubric("86.4840880413",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_194( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\064\067\061\065\070\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","0471583");
      TSM_ASSERT(str,checkAgainstRubric("0471583",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_195( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\062\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","223");
      TSM_ASSERT(str,checkAgainstRubric("223",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_196( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\071\056\061\071\060\000",
			"\056\000",
			"\062\063\061\063\062\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","69.190.23132");
      TSM_ASSERT(str,checkAgainstRubric("69.190.23132",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_197( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","3");
      TSM_ASSERT(str,checkAgainstRubric("3",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_198( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\060\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","60");
      TSM_ASSERT(str,checkAgainstRubric("60",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_199( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","3");
      TSM_ASSERT(str,checkAgainstRubric("3",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_200( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\061\065\066\062\063\071\063\063\066\061\071\071\065\064\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".15623933619954");
      TSM_ASSERT(str,checkAgainstRubric(".15623933619954",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_201( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			dotDot,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"dotDot",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\061\000",
			"\056\056\000",
			"\070\067\064\067\071\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","91..87479");
      TSM_ASSERT(str,checkAgainstRubric("91..87479",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_202( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\060\061\065\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","0015");
      TSM_ASSERT(str,checkAgainstRubric("0015",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_203( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\060\060\056\061\063\071\065\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","800.13958");
      TSM_ASSERT(str,checkAgainstRubric("800.13958",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_204( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\063\063\064\056\067\070\067\000",
			"\056\000",
			"\065\071\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","2334.787.59");
      TSM_ASSERT(str,checkAgainstRubric("2334.787.59",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_205( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\063\062\067\067\064\066\070\064\065\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","93277468459");
      TSM_ASSERT(str,checkAgainstRubric("93277468459",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_206( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			dotDot,
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"dotDot",
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\065\065\000",
			"\056\056\000",
			"\071\060\063\056\064\067\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","055..903.47");
      TSM_ASSERT(str,checkAgainstRubric("055..903.47",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_207( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\064\056\070\062\065\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","14.8257");
      TSM_ASSERT(str,checkAgainstRubric("14.8257",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_208( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\062\056\063\062\061\000",
			"\056\000",
			"\071\056\063\064\067\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","42.321.9.347");
      TSM_ASSERT(str,checkAgainstRubric("42.321.9.347",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_209( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\067\056\062\070\071\066\067\070\067\066\062\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","17.289678762");
      TSM_ASSERT(str,checkAgainstRubric("17.289678762",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_210( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\060\064\064\067\061\067\063\070\056\063\071\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","804471738.396");
      TSM_ASSERT(str,checkAgainstRubric("804471738.396",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_211( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\067\056\067\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","97.78");
      TSM_ASSERT(str,checkAgainstRubric("97.78",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_212( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","8");
      TSM_ASSERT(str,checkAgainstRubric("8",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_213( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			lexicalError,
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"lexicalError",
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\056\000",
			"\063\070\064\061\060\063\062\056\067\067\071\000",
			"\000",
		};
		int _rubric_s = 3;
      sprintf(str,"'%s' Random String Failed\n",".3841032.779");
      TSM_ASSERT(str,checkAgainstRubric(".3841032.779",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_214( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\070\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","187");
      TSM_ASSERT(str,checkAgainstRubric("187",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_215( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\061\065\067\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","41576");
      TSM_ASSERT(str,checkAgainstRubric("41576",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_216( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_217( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\062\061\061\066\056\063\070\060\071\063\067\067\065\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","42116.380937756");
      TSM_ASSERT(str,checkAgainstRubric("42116.380937756",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_218( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","5");
      TSM_ASSERT(str,checkAgainstRubric("5",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_219( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_220( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\063\066\064\071\062\064\062\071\065\060\070\060\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","03649242950801");
      TSM_ASSERT(str,checkAgainstRubric("03649242950801",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_221( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\061\071\056\066\063\062\061\063\063\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","719.6321333");
      TSM_ASSERT(str,checkAgainstRubric("719.6321333",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_222( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","9");
      TSM_ASSERT(str,checkAgainstRubric("9",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_223( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\065\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","35");
      TSM_ASSERT(str,checkAgainstRubric("35",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_224( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			floatConst,
			lexicalError,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"floatConst",
			"lexicalError",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\060\062\064\056\070\000",
			"\056\000",
			"\066\060\067\056\065\000",
			"\056\000",
			"\065\071\000",
			"\000",
		};
		int _rubric_s = 6;
      sprintf(str,"'%s' Random String Failed\n","7024.8.607.5.59");
      TSM_ASSERT(str,checkAgainstRubric("7024.8.607.5.59",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_225( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\062\070\062\061\064\062\066\064\066\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","4282142646");
      TSM_ASSERT(str,checkAgainstRubric("4282142646",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_226( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\060\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","00");
      TSM_ASSERT(str,checkAgainstRubric("00",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_227( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\071\064\063\065\070\061\065\060\070\066\070\061\062\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","49435815086812");
      TSM_ASSERT(str,checkAgainstRubric("49435815086812",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_228( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			intConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"intConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\064\066\070\056\067\063\000",
			"\056\000",
			"\071\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","8468.73.9.");
      TSM_ASSERT(str,checkAgainstRubric("8468.73.9.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_229( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\065\063\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","4533");
      TSM_ASSERT(str,checkAgainstRubric("4533",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_230( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","1");
      TSM_ASSERT(str,checkAgainstRubric("1",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_231( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\071\071\071\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","9991");
      TSM_ASSERT(str,checkAgainstRubric("9991",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_232( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\071\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","79");
      TSM_ASSERT(str,checkAgainstRubric("79",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_233( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\063\063\056\063\065\071\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","333.3597");
      TSM_ASSERT(str,checkAgainstRubric("333.3597",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_234( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\064\065\067\067\071\061\064\063\064\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","457791434");
      TSM_ASSERT(str,checkAgainstRubric("457791434",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_235( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\067\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","27");
      TSM_ASSERT(str,checkAgainstRubric("27",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_236( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_237( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\067\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","378");
      TSM_ASSERT(str,checkAgainstRubric("378",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_238( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			lexicalError,
			floatConst,
			lexicalError,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"lexicalError",
			"floatConst",
			"lexicalError",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\067\071\056\061\060\000",
			"\056\000",
			"\066\060\063\064\063\063\056\066\000",
			"\056\000",
			"\000",
		};
		int _rubric_s = 5;
      sprintf(str,"'%s' Random String Failed\n","79.10.603433.6.");
      TSM_ASSERT(str,checkAgainstRubric("79.10.603433.6.",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_239( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\060\066\067\067\063\061\066\061\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","067731613");
      TSM_ASSERT(str,checkAgainstRubric("067731613",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_240( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			endOfFile,
		};
		string _rubric_n[] ={
			"endOfFile",
		};
		string _rubric_l[] ={
			"\000",
		};
		int _rubric_s = 1;
      sprintf(str,"'%s' Random String Failed\n","");
      TSM_ASSERT(str,checkAgainstRubric("",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_241( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\056\062\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","3.28");
      TSM_ASSERT(str,checkAgainstRubric("3.28",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_242( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\066\060\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","60");
      TSM_ASSERT(str,checkAgainstRubric("60",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_243( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\063\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","3");
      TSM_ASSERT(str,checkAgainstRubric("3",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_244( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\065\063\061\062\067\071\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","5312791");
      TSM_ASSERT(str,checkAgainstRubric("5312791",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_245( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\056\071\067\065\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","1.9751");
      TSM_ASSERT(str,checkAgainstRubric("1.9751",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_246( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			floatConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"floatConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\070\063\060\071\056\067\065\060\070\063\061\064\071\062\061\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","8309.7508314921");
      TSM_ASSERT(str,checkAgainstRubric("8309.7508314921",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_247( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			dotDot,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"dotDot",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\064\065\062\061\070\070\063\000",
			"\056\056\000",
			"\065\063\071\070\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","14521883..5398");
      TSM_ASSERT(str,checkAgainstRubric("14521883..5398",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_248( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			dotDot,
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"dotDot",
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\061\071\064\061\000",
			"\056\056\000",
			"\067\067\062\061\064\065\070\066\000",
			"\000",
		};
		int _rubric_s = 4;
      sprintf(str,"'%s' Random String Failed\n","1941..77214586");
      TSM_ASSERT(str,checkAgainstRubric("1941..77214586",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }
    void test_random_potential_number_249( ) {
      char str[1000];
		terminal_t _rubric_t[] ={
			intConst,
			endOfFile,
		};
		string _rubric_n[] ={
			"intConst",
			"endOfFile",
		};
		string _rubric_l[] ={
			"\062\065\066\067\063\060\063\067\070\000",
			"\000",
		};
		int _rubric_s = 2;
      sprintf(str,"'%s' Random String Failed\n","256730378");
      TSM_ASSERT(str,checkAgainstRubric("256730378",_rubric_t,_rubric_n,_rubric_l,_rubric_s,0));
    }

} ;

